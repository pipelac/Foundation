<?php

declare(strict_types=1);

/**
 * –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramBot –≤ —Ä–µ–∂–∏–º–µ Polling
 * 
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–∞–≥–æ–≤ –≤ MySQL.insert()
 */

require_once __DIR__ . '/autoload.php';

use App\Component\Logger;
use App\Component\Http;
use App\Component\MySQL;
use App\Component\OpenRouter;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\PollingHandler;
use App\Component\TelegramBot\Core\ConversationManager;
use App\Component\TelegramBot\Core\AccessControl;
use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;
use App\Component\TelegramBot\Keyboards\ReplyKeyboardBuilder;

echo "üöÄ ===============================================\n";
echo "   –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAMBOT POLLING\n";
echo "===============================================\n\n";

$botToken = '8327641497:AAFTHb3xSTpP3Q6Peg8-OK4nTWTfF7iMWfI';
$chatId = 366442475;

$testsPassed = 0;
$testsFailed = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Logger
$logDir = __DIR__ . '/logs';
if (!is_dir($logDir)) {
    mkdir($logDir, 0775, true);
}

$logger = new Logger([
    'directory' => $logDir,
    'file_name' => 'telegram_polling_real_test.log',
    'max_files' => 3,
    'max_file_size' => 5,
    'enabled' => true,
]);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function notify(string $message, TelegramAPI $api, int $chatId, Logger $logger): void
{
    try {
        $api->sendMessage($chatId, $message);
        $logger->info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " . substr($message, 0, 50));
    } catch (\Exception $e) {
        $logger->error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " . $e->getMessage());
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function test(string $name, callable $testFunc, &$passed, &$failed): void
{
    global $logger;
    echo "üß™ –¢–ï–°–¢: {$name}... ";
    $logger->info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {$name}");
    
    try {
        $result = $testFunc();
        if ($result) {
            echo "‚úÖ PASSED\n";
            $logger->info("‚úÖ PASSED: {$name}");
            $passed++;
        } else {
            echo "‚ùå FAILED\n";
            $logger->error("‚ùå FAILED: {$name}");
            $failed++;
        }
    } catch (\Exception $e) {
        echo "‚ùå ERROR: " . $e->getMessage() . "\n";
        $logger->error("‚ùå ERROR in {$name}: " . $e->getMessage());
        $failed++;
    }
}

try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∏ API
    $http = new Http(['timeout' => 30], $logger);
    $api = new TelegramAPI($botToken, $http, $logger);
    
    echo "ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...\n";
    $botInfo = $api->getMe();
    echo "‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{$botInfo->username}\n\n";
    
    notify("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TelegramBot Polling", $api, $chatId, $logger);
    
    // =================== –¢–ï–°–¢ 1: MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===================
    echo "üìä –ë–õ–û–ö 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MYSQL\n";
    echo str_repeat("=", 50) . "\n";
    
    test("MySQL: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É", function() use ($logger) {
        $db = new MySQL([
            'host' => 'localhost',
            'port' => 3306,
            'database' => 'telegram_bot_test',
            'username' => 'root',
            'password' => '',
            'charset' => 'utf8mb4',
        ], $logger);
        
        $result = $db->queryOne("SELECT VERSION() as v");
        return isset($result['v']);
    }, $testsPassed, $testsFailed);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
    $db = new MySQL([
        'host' => 'localhost',
        'port' => 3306,
        'database' => 'telegram_bot_test',
        'username' => 'root',
        'password' => '',
        'charset' => 'utf8mb4',
    ], $logger);
    
    test("MySQL: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã", function() use ($db) {
        $db->execute("DROP TABLE IF EXISTS test_data");
        $db->execute("
            CREATE TABLE test_data (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255),
                value INT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            ) ENGINE=InnoDB
        ");
        return true;
    }, $testsPassed, $testsFailed);
    
    test("MySQL: INSERT/SELECT –æ–ø–µ—Ä–∞—Ü–∏–∏", function() use ($db) {
        $db->execute("INSERT INTO test_data (name, value) VALUES (?, ?)", ['test1', 100]);
        $result = $db->queryOne("SELECT * FROM test_data WHERE name = ?", ['test1']);
        return $result && $result['value'] == 100;
    }, $testsPassed, $testsFailed);
    
    notify("‚úÖ MySQL —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã", $api, $chatId, $logger);
    
    // =================== –¢–ï–°–¢ 2: TelegramAPI ===================
    echo "\nüì± –ë–õ–û–ö 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM API\n";
    echo str_repeat("=", 50) . "\n";
    
    test("TelegramAPI: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", function() use ($api, $chatId) {
        $msg = $api->sendMessage($chatId, "üß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
        return $msg !== null && $msg->messageId > 0;
    }, $testsPassed, $testsFailed);
    
    sleep(1);
    
    test("TelegramAPI: HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", function() use ($api, $chatId) {
        $msg = $api->sendMessage(
            $chatId,
            "<b>–ñ–∏—Ä–Ω—ã–π</b> <i>–ö—É—Ä—Å–∏–≤</i> <code>–ö–æ–¥</code>",
            ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
        );
        return $msg !== null;
    }, $testsPassed, $testsFailed);
    
    sleep(1);
    
    $editMessageId = null;
    test("TelegramAPI: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", function() use ($api, $chatId, &$editMessageId) {
        $original = $api->sendMessage($chatId, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        $editMessageId = $original->messageId;
        sleep(1);
        $edited = $api->editMessageText($chatId, $original->messageId, "‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        return $edited !== null;
    }, $testsPassed, $testsFailed);
    
    sleep(1);
    
    test("TelegramAPI: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", function() use ($api, $chatId) {
        $msg = $api->sendMessage($chatId, "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ");
        sleep(1);
        $deleted = $api->deleteMessage($chatId, $msg->messageId);
        return $deleted === true;
    }, $testsPassed, $testsFailed);
    
    notify("‚úÖ TelegramAPI —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã", $api, $chatId, $logger);
    
    // =================== –¢–ï–°–¢ 3: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===================
    echo "\n‚å®Ô∏è –ë–õ–û–ö 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†\n";
    echo str_repeat("=", 50) . "\n";
    
    test("Keyboards: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", function() use ($api, $chatId) {
        $keyboard = InlineKeyboardBuilder::make()
            ->addCallbackButton('–ö–Ω–æ–ø–∫–∞ 1', 'btn1')
            ->addCallbackButton('–ö–Ω–æ–ø–∫–∞ 2', 'btn2')
            ->row()
            ->addCallbackButton('–ö–Ω–æ–ø–∫–∞ 3', 'btn3')
            ->build();
        
        $msg = $api->sendMessage(
            $chatId,
            "‚å®Ô∏è –¢–µ—Å—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
            ['reply_markup' => $keyboard]
        );
        return $msg !== null;
    }, $testsPassed, $testsFailed);
    
    sleep(1);
    
    test("Keyboards: Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", function() use ($api, $chatId) {
        $keyboard = ReplyKeyboardBuilder::make()
            ->addButton('–ö–æ–º–∞–Ω–¥–∞ 1')
            ->addButton('–ö–æ–º–∞–Ω–¥–∞ 2')
            ->row()
            ->addButton('–û—Ç–º–µ–Ω–∞')
            ->resizeKeyboard(true)
            ->build();
        
        $msg = $api->sendMessage(
            $chatId,
            "‚å®Ô∏è –¢–µ—Å—Ç Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
            ['reply_markup' => $keyboard]
        );
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        sleep(1);
        $api->sendMessage(
            $chatId,
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
            ['reply_markup' => ['remove_keyboard' => true]]
        );
        
        return $msg !== null;
    }, $testsPassed, $testsFailed);
    
    notify("‚úÖ –¢–µ—Å—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω—ã", $api, $chatId, $logger);
    
    // =================== –¢–ï–°–¢ 4: PollingHandler ===================
    echo "\nüîÑ –ë–õ–û–ö 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POLLING\n";
    echo str_repeat("=", 50) . "\n";
    
    $polling = new PollingHandler($api, $logger);
    $polling->setTimeout(5)->setLimit(10);
    
    test("PollingHandler: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", function() use ($polling) {
        return $polling->getOffset() >= 0;
    }, $testsPassed, $testsFailed);
    
    test("PollingHandler: –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", function() use ($polling) {
        $skipped = $polling->skipPendingUpdates();
        return is_int($skipped) && $skipped >= 0;
    }, $testsPassed, $testsFailed);
    
    notify("‚è≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞ Polling...", $api, $chatId, $logger);
    echo "\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (5 —Å–µ–∫—É–Ω–¥)...\n";
    
    test("PollingHandler: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", function() use ($polling, $api, $chatId, $logger) {
        $updates = $polling->pollOnce();
        $logger->info("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: " . count($updates));
        
        if (count($updates) > 0) {
            foreach ($updates as $update) {
                if ($update->message) {
                    $text = $update->message->text ?? '[–º–µ–¥–∏–∞]';
                    $api->sendMessage($chatId, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Polling: {$text}");
                    return true;
                }
                if ($update->callbackQuery) {
                    $data = $update->callbackQuery->data;
                    $api->answerCallbackQuery($update->callbackQuery->id);
                    $api->sendMessage($chatId, "‚úÖ Callback –ø–æ–ª—É—á–µ–Ω: {$data}");
                    return true;
                }
            }
        }
        
        return true; // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
    }, $testsPassed, $testsFailed);
    
    notify("‚úÖ Polling —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã", $api, $chatId, $logger);
    
    // =================== –¢–ï–°–¢ 5: ConversationManager ===================
    echo "\nüí¨ –ë–õ–û–ö 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–ê–õ–û–ì–û–í\n";
    echo str_repeat("=", 50) . "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
    $db->execute("DROP TABLE IF EXISTS telegram_bot_users");
    $db->execute("DROP TABLE IF EXISTS telegram_bot_conversations");
    
    $db->execute("
        CREATE TABLE telegram_bot_users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id BIGINT NOT NULL UNIQUE,
            first_name VARCHAR(255),
            username VARCHAR(255),
            last_name VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        ) ENGINE=InnoDB
    ");
    
    $db->execute("
        CREATE TABLE telegram_bot_conversations (
            id INT AUTO_INCREMENT PRIMARY KEY,
            chat_id BIGINT NOT NULL,
            user_id BIGINT NOT NULL,
            state VARCHAR(100) NOT NULL,
            data TEXT,
            message_id BIGINT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            expires_at TIMESTAMP NOT NULL,
            INDEX idx_chat_user (chat_id, user_id),
            INDEX idx_expires (expires_at)
        ) ENGINE=InnoDB
    ");
    
    $convConfig = [
        'enabled' => true,
        'timeout' => 3600,
        'auto_create_tables' => false, // –£–∂–µ —Å–æ–∑–¥–∞–ª–∏
    ];
    $conversations = new ConversationManager($db, $logger, $convConfig);
    
    test("ConversationManager: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", function() use ($conversations, $chatId) {
        return $conversations->saveUser($chatId, 'TestUser', 'testuser');
    }, $testsPassed, $testsFailed);
    
    test("ConversationManager: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", function() use ($conversations, $chatId) {
        $user = $conversations->getUser($chatId);
        return $user !== null && $user['user_id'] == $chatId;
    }, $testsPassed, $testsFailed);
    
    test("ConversationManager: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞", function() use ($conversations, $chatId) {
        $id = $conversations->startConversation($chatId, $chatId, 'test_state', ['step' => 1]);
        return $id > 0;
    }, $testsPassed, $testsFailed);
    
    test("ConversationManager: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞", function() use ($conversations, $chatId) {
        $conv = $conversations->getConversation($chatId, $chatId);
        return $conv !== null && $conv['state'] === 'test_state';
    }, $testsPassed, $testsFailed);
    
    test("ConversationManager: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞", function() use ($conversations, $chatId) {
        $updated = $conversations->updateConversation($chatId, $chatId, 'new_state', ['step' => 2]);
        $conv = $conversations->getConversation($chatId, $chatId);
        return $updated && $conv['state'] === 'new_state' && $conv['data']['step'] == 2;
    }, $testsPassed, $testsFailed);
    
    test("ConversationManager: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞", function() use ($conversations, $chatId) {
        $ended = $conversations->endConversation($chatId, $chatId);
        $conv = $conversations->getConversation($chatId, $chatId);
        return $ended && $conv === null;
    }, $testsPassed, $testsFailed);
    
    notify("‚úÖ –¢–µ—Å—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã", $api, $chatId, $logger);
    
    // =================== –¢–ï–°–¢ 6: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ===================
    echo "\nüé≠ –ë–õ–û–ö 6: –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô\n";
    echo str_repeat("=", 50) . "\n";
    
    notify("üé≠ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢: –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", $api, $chatId, $logger);
    
    // –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    $keyboard = InlineKeyboardBuilder::make()
        ->addCallbackButton('–¢–∏–ø A', 'reg_type_a')
        ->addCallbackButton('–¢–∏–ø B', 'reg_type_b')
        ->addCallbackButton('–¢–∏–ø C', 'reg_type_c')
        ->build();
    
    $msg = $api->sendMessage(
        $chatId,
        "üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (—à–∞–≥ 1/3)\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        ['reply_markup' => $keyboard]
    );
    
    $conversations->startConversation($chatId, $chatId, 'awaiting_type', ['step' => 1], $msg->messageId);
    
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥)...\n";
    sleep(5);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ callback
    $updates = $polling->pollOnce();
    $selectedType = null;
    
    foreach ($updates as $update) {
        if ($update->callbackQuery && str_starts_with($update->callbackQuery->data, 'reg_type_')) {
            $selectedType = $update->callbackQuery->data;
            $api->answerCallbackQuery($update->callbackQuery->id, ['text' => "–í—ã–±—Ä–∞–Ω–æ: {$selectedType}"]);
            
            $conversations->updateConversation($chatId, $chatId, 'awaiting_name', [
                'type' => $selectedType,
                'step' => 2
            ]);
            
            $api->sendMessage($chatId, "‚úÖ –¢–∏–ø –≤—ã–±—Ä–∞–Ω!\nüìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (—à–∞–≥ 2/3)\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
            
            echo "‚úÖ Callback –ø–æ–ª—É—á–µ–Ω: {$selectedType}\n";
            echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (5 —Å–µ–∫—É–Ω–¥)...\n";
            sleep(5);
            
            // –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏
            $nameUpdates = $polling->pollOnce();
            foreach ($nameUpdates as $nameUpdate) {
                if ($nameUpdate->message && $nameUpdate->message->text) {
                    $name = $nameUpdate->message->text;
                    
                    $conversations->updateConversation($chatId, $chatId, 'awaiting_email', [
                        'name' => $name,
                        'step' => 3
                    ]);
                    
                    $api->sendMessage($chatId, "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {$name}\nüìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (—à–∞–≥ 3/3)\n–í–≤–µ–¥–∏—Ç–µ email:");
                    
                    echo "‚úÖ –ò–º—è –ø–æ–ª—É—á–µ–Ω–æ: {$name}\n";
                    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ email (5 —Å–µ–∫—É–Ω–¥)...\n";
                    sleep(5);
                    
                    // –û–∂–∏–¥–∞–Ω–∏–µ email
                    $emailUpdates = $polling->pollOnce();
                    foreach ($emailUpdates as $emailUpdate) {
                        if ($emailUpdate->message && $emailUpdate->message->text) {
                            $email = $emailUpdate->message->text;
                            
                            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                            $conv = $conversations->getConversation($chatId, $chatId);
                            
                            $summary = "üéâ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n\n";
                            $summary .= "–¢–∏–ø: {$conv['data']['type']}\n";
                            $summary .= "–ò–º—è: {$conv['data']['name']}\n";
                            $summary .= "Email: {$email}\n";
                            
                            $api->sendMessage($chatId, $summary);
                            $conversations->endConversation($chatId, $chatId);
                            
                            echo "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
                            $testsPassed++;
                            break 3;
                        }
                    }
                    break;
                }
            }
            break;
        }
    }
    
    if (!$selectedType) {
        echo "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Ç–∏–ø (–ø—Ä–æ–ø—É—â–µ–Ω–æ)\n";
        $testsFailed++;
    }
    
    // =================== –¢–ï–°–¢ 7: OpenRouter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ===================
    echo "\nüß† –ë–õ–û–ö 7: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° AI (OpenRouter)\n";
    echo str_repeat("=", 50) . "\n";
    
    try {
        $openRouter = new OpenRouter([
            'api_key' => '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',
            'app_name' => 'TelegramBotTest',
            'timeout' => 30,
        ], $logger);
        
        test("OpenRouter: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–∞", function() use ($openRouter, $api, $chatId) {
            $api->sendMessage($chatId, "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é AI –æ—Ç–≤–µ—Ç...");
            
            $response = $openRouter->text2text(
                'openai/gpt-3.5-turbo',
                '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –±–æ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–º–∞–∫—Å 30 —Å–ª–æ–≤)',
                ['max_tokens' => 80]
            );
            
            if (!empty($response)) {
                $api->sendMessage($chatId, "ü§ñ AI –æ—Ç–≤–µ—Ç:\n\n{$response}");
                return true;
            }
            return false;
        }, $testsPassed, $testsFailed);
        
    } catch (\Exception $e) {
        echo "‚ö†Ô∏è OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " . $e->getMessage() . "\n";
        $testsFailed++;
    }
    
    // =================== –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===================
    echo "\n" . str_repeat("=", 50) . "\n";
    echo "üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´\n";
    echo str_repeat("=", 50) . "\n";
    
    $total = $testsPassed + $testsFailed;
    $successRate = $total > 0 ? round(($testsPassed / $total) * 100, 2) : 0;
    
    echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$total}\n";
    echo "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {$testsPassed}\n";
    echo "‚ùå –û—à–∏–±–æ–∫: {$testsFailed}\n";
    echo "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {$successRate}%\n\n";
    
    $finalReport = "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢\n\n";
    $finalReport .= "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$total}\n";
    $finalReport .= "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {$testsPassed}\n";
    $finalReport .= "‚ùå –û—à–∏–±–æ–∫: {$testsFailed}\n";
    $finalReport .= "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {$successRate}%\n\n";
    
    if ($successRate >= 80) {
        $finalReport .= "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!";
    } else {
        $finalReport .= "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.";
    }
    
    notify($finalReport, $api, $chatId, $logger);
    
    echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
    echo "üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥: logs/telegram_polling_real_test.log\n\n";
    
    $logger->info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===", [
        'total' => $total,
        'passed' => $testsPassed,
        'failed' => $testsFailed,
        'success_rate' => $successRate,
    ]);
    
} catch (\Exception $e) {
    echo "\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
    echo "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n" . $e->getTraceAsString() . "\n";
    $logger->error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage());
    exit(1);
}
