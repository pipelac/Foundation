<?php

declare(strict_types=1);

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramBot –≤ —Ä–µ–∂–∏–º–µ Polling
 * 
 * –ü–æ–∫—Ä—ã–≤–∞–µ—Ç 7 —É—Ä–æ–≤–Ω–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
 * 1. –ù–∞—á–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
 * 2. –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç + –º–µ–¥–∏–∞)
 * 3. –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
 * 4. –î–∏–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –ø–∞–º—è—Ç—å—é
 * 5. –°–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * 6. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
 * 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
 */

require_once __DIR__ . '/autoload.php';

use App\Config\ConfigLoader;
use App\Component\Http;
use App\Component\Logger;
use App\Component\MySQLConnectionFactory;
use App\Component\TelegramBot\Core\ConversationManager;
use App\Component\TelegramBot\Core\PollingHandler;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Entities\Update;
use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;
use App\Component\TelegramBot\Keyboards\ReplyKeyboardBuilder;

// ============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================================================

$BOT_TOKEN = '8327641497:AAFTHb3xSTpP3Q6Peg8-OK4nTWTfF7iMWfI';
$TEST_CHAT_ID = 366442475;
$USER_TIMEOUT = 30; // –¢–∞–π–º–∞—É—Ç –Ω–∞ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ–∫—É–Ω–¥—ã)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
$logger = new Logger([
    'directory' => __DIR__ . '/logs',
    'fileName' => 'telegram_bot_full_test.log',
    'maxFiles' => 7,
]);

$logger->info('========================================');
$logger->info('=== –°–¢–ê–†–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
$logger->info('========================================');

echo "\n";
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë         –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM BOT (POLLING MODE)        ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";
echo "\n";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
$http = new Http(['timeout' => 60], $logger);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramAPI
$api = new TelegramAPI($BOT_TOKEN, $http, $logger);

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
function sendTelegramNotification(TelegramAPI $api, int $chatId, string $message, Logger $logger): void
{
    try {
        $api->sendMessage($chatId, "ü§ñ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–æ—Ç–∞</b>\n\n" . $message, [
            'parse_mode' => TelegramAPI::PARSE_MODE_HTML
        ]);
        $logger->info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram', ['message' => $message]);
    } catch (Exception $e) {
        $logger->error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', ['error' => $e->getMessage()]);
    }
}

sendTelegramNotification($api, $TEST_CHAT_ID, 
    "‚úÖ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ</b>\n\n" .
    "–†–µ–∂–∏–º: <b>Long Polling</b>\n" .
    "–£—Ä–æ–≤–Ω–∏: <b>1-7</b>\n" .
    "–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞: <b>{$USER_TIMEOUT} —Å–µ–∫</b>\n\n" .
    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...", 
    $logger
);

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MySQL
$mysqlConfig = ConfigLoader::load(__DIR__ . '/config/mysql.json');
$conversationsConfig = ConfigLoader::load(__DIR__ . '/config/telegram_bot_conversations.json');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
try {
    $factory = new MySQLConnectionFactory($mysqlConfig, $logger);
    $db = $factory->getConnection('main');
    $logger->info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    echo "‚úÖ MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω\n";
} catch (Exception $e) {
    $logger->error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL', ['error' => $e->getMessage()]);
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {$e->getMessage()}\n";
    exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConversationManager
$conversationManager = new ConversationManager($db, $logger, $conversationsConfig['conversations']);

if ($conversationManager->isEnabled()) {
    $logger->info('‚úÖ ConversationManager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    echo "‚úÖ ConversationManager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n";
} else {
    $logger->warning('‚ö†Ô∏è ConversationManager –æ—Ç–∫–ª—é—á–µ–Ω');
    echo "‚ö†Ô∏è ConversationManager –æ—Ç–∫–ª—é—á–µ–Ω\n";
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PollingHandler
$polling = new PollingHandler($api, $logger);
$polling
    ->setTimeout(30)
    ->setLimit(100)
    ->setAllowedUpdates(['message', 'callback_query']);

// –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
$skipped = $polling->skipPendingUpdates();
$logger->info("–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $skipped");
echo "‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $skipped\n\n";

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

$testResults = [
    'total' => 0,
    'passed' => 0,
    'failed' => 0,
    'errors' => [],
];

function logTest(string $level, string $testName, bool $passed, string $details = ''): void
{
    global $testResults, $logger;
    
    $testResults['total']++;
    if ($passed) {
        $testResults['passed']++;
        $status = '‚úÖ PASS';
    } else {
        $testResults['failed']++;
        $testResults['errors'][] = "$level ‚Üí $testName: $details";
        $status = '‚ùå FAIL';
    }
    
    $message = "[$level] $testName: $status";
    if ($details) {
        $message .= " | $details";
    }
    
    echo "$message\n";
    $logger->info($message);
}

function waitForUserResponse(
    PollingHandler $polling,
    int $timeout,
    callable $condition,
    string $description,
    Logger $logger
): ?Update {
    $logger->info("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $description");
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: $description (—Ç–∞–π–º–∞—É—Ç: {$timeout}—Å)\n";
    
    $startTime = time();
    $attempts = 0;
    
    while ((time() - $startTime) < $timeout) {
        $updates = $polling->pollOnce();
        $attempts++;
        
        foreach ($updates as $update) {
            if ($condition($update)) {
                $elapsed = time() - $startTime;
                $logger->info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ {$elapsed}—Å (–ø–æ–ø—ã—Ç–æ–∫: $attempts)");
                echo "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞ {$elapsed}—Å\n";
                return $update;
            }
        }
        
        sleep(1);
    }
    
    $logger->warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: $description");
    echo "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è\n";
    return null;
}

// ============================================================================
// –£–†–û–í–ï–ù–¨ 1: –ù–ê–ß–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò (SMOKE TESTS)
// ============================================================================

sendTelegramNotification($api, $TEST_CHAT_ID,
    "üìã <b>–£–†–û–í–ï–ù–¨ 1: –ù–∞—á–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n\n" .
    "üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/–ø—Ä–∏—ë–º–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n" .
    "üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞",
    $logger
);

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –£–†–û–í–ï–ù–¨ 1: –ù–ê–ß–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò (SMOKE TESTS)\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

// –¢–µ—Å—Ç 1.1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
try {
    $response = $api->sendMessage($TEST_CHAT_ID, "üß™ –¢–µ—Å—Ç 1.1: –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    logTest('Level 1', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', $response !== null && isset($response->messageId));
} catch (Exception $e) {
    logTest('Level 1', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', false, $e->getMessage());
}

// –¢–µ—Å—Ç 1.2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$api->sendMessage($TEST_CHAT_ID, 
    "üß™ –¢–µ—Å—Ç 1.2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
);

$receivedUpdate = waitForUserResponse(
    $polling,
    $USER_TIMEOUT,
    fn($u) => $u->isMessage() && $u->message->text !== null,
    "—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    $logger
);

if ($receivedUpdate) {
    $text = $receivedUpdate->message->text;
    $api->sendMessage($TEST_CHAT_ID, "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: \"$text\"");
    logTest('Level 1', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', true, "–¢–µ–∫—Å—Ç: $text");
} else {
    logTest('Level 1', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', false, '–¢–∞–π–º–∞—É—Ç');
}

// –¢–µ—Å—Ç 1.3: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
try {
    $response = $api->sendMessage($TEST_CHAT_ID, 
        "üß™ –¢–µ—Å—Ç 1.3:\n" .
        "‚úÖ –≠–º–æ–¥–∑–∏\n" .
        "üé® –¶–≤–µ—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏\n" .
        "üî• –û–≥–æ–Ω—å –∏ üíß –≤–æ–¥–∞\n" .
        "üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üöÄ"
    );
    logTest('Level 1', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏', $response !== null);
} catch (Exception $e) {
    logTest('Level 1', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏', false, $e->getMessage());
}

sendTelegramNotification($api, $TEST_CHAT_ID,
    "‚úÖ <b>–£–†–û–í–ï–ù–¨ 1 –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: {$testResults['passed']}\n" .
    "–û—à–∏–±–æ–∫: {$testResults['failed']}",
    $logger
);

sleep(2);

// ============================================================================
// –£–†–û–í–ï–ù–¨ 2: –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò (–ú–ï–î–ò–ê)
// ============================================================================

sendTelegramNotification($api, $TEST_CHAT_ID,
    "üìã <b>–£–†–û–í–ï–ù–¨ 2: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n\n" .
    "üîπ –†–∞–±–æ—Ç–∞ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏\n" .
    "üîπ –§–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ",
    $logger
);

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –£–†–û–í–ï–ù–¨ 2: –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò (–ú–ï–î–ò–ê)\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

// –¢–µ—Å—Ç 2.1: –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
$api->sendMessage($TEST_CHAT_ID, "üß™ –¢–µ—Å—Ç 2.1: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).");

$photoUpdate = waitForUserResponse(
    $polling,
    $USER_TIMEOUT,
    fn($u) => $u->isMessage() && isset($u->message->photo),
    "—Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    $logger
);

if ($photoUpdate && $photoUpdate->message->photo) {
    $photos = $photoUpdate->message->photo;
    $largestPhoto = end($photos);
    $fileId = $largestPhoto->fileId;
    
    $api->sendMessage($TEST_CHAT_ID, "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! File ID: $fileId");
    logTest('Level 2', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ', true, "File ID: $fileId");
    
    // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ
    try {
        $api->sendPhoto($TEST_CHAT_ID, $fileId, ['caption' => '‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ']);
        logTest('Level 2', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ', true);
    } catch (Exception $e) {
        logTest('Level 2', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ', false, $e->getMessage());
    }
} else {
    logTest('Level 2', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ', false, '–¢–∞–π–º–∞—É—Ç');
}

// –¢–µ—Å—Ç 2.2: –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
$api->sendMessage($TEST_CHAT_ID, "üß™ –¢–µ—Å—Ç 2.2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª).");

$docUpdate = waitForUserResponse(
    $polling,
    $USER_TIMEOUT,
    fn($u) => $u->isMessage() && isset($u->message->document),
    "–¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    $logger
);

if ($docUpdate && $docUpdate->message->document) {
    $doc = $docUpdate->message->document;
    $fileId = $doc->fileId;
    $fileName = $doc->fileName ?? '–±–µ–∑ –∏–º–µ–Ω–∏';
    
    $api->sendMessage($TEST_CHAT_ID, "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω!\n–ò–º—è: $fileName\nFile ID: $fileId");
    logTest('Level 2', '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞', true, "–§–∞–π–ª: $fileName");
} else {
    logTest('Level 2', '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞', false, '–¢–∞–π–º–∞—É—Ç –∏–ª–∏ —ç–º—É–ª—è—Ü–∏—è');
}

// –¢–µ—Å—Ç 2.3: –ó–∞–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
$api->sendMessage($TEST_CHAT_ID, 
    "üß™ –¢–µ—Å—Ç 2.3: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (voice) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ /skip"
);

$voiceUpdate = waitForUserResponse(
    $polling,
    $USER_TIMEOUT,
    fn($u) => ($u->isMessage() && isset($u->message->voice)) || 
              ($u->isMessage() && $u->message->text === '/skip'),
    "–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ /skip",
    $logger
);

if ($voiceUpdate) {
    if ($voiceUpdate->message->text === '/skip') {
        $api->sendMessage($TEST_CHAT_ID, "‚è© –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω");
        logTest('Level 2', '–ü–æ–ª—É—á–µ–Ω–∏–µ voice', true, '–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    } elseif (isset($voiceUpdate->message->voice)) {
        $voice = $voiceUpdate->message->voice;
        $api->sendMessage($TEST_CHAT_ID, "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! Duration: {$voice->duration}—Å");
        logTest('Level 2', '–ü–æ–ª—É—á–µ–Ω–∏–µ voice', true, "Duration: {$voice->duration}—Å");
    }
} else {
    logTest('Level 2', '–ü–æ–ª—É—á–µ–Ω–∏–µ voice', false, '–¢–∞–π–º–∞—É—Ç');
}

sendTelegramNotification($api, $TEST_CHAT_ID,
    "‚úÖ <b>–£–†–û–í–ï–ù–¨ 2 –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: {$testResults['passed']}\n" .
    "–û—à–∏–±–æ–∫: {$testResults['failed']}",
    $logger
);

sleep(2);

// ============================================================================
// –£–†–û–í–ï–ù–¨ 3: –û–ü–ï–†–ê–¶–ò–ò –° –ö–õ–ê–í–ò–ê–¢–£–†–ê–ú–ò
// ============================================================================

sendTelegramNotification($api, $TEST_CHAT_ID,
    "üìã <b>–£–†–û–í–ï–ù–¨ 3: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã</b>\n\n" .
    "üîπ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n" .
    "üîπ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n" .
    "üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback",
    $logger
);

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –£–†–û–í–ï–ù–¨ 3: –û–ü–ï–†–ê–¶–ò–ò –° –ö–õ–ê–í–ò–ê–¢–£–†–ê–ú–ò\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

// –¢–µ—Å—Ç 3.1: Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
try {
    $replyKeyboard = ReplyKeyboardBuilder::make()
        ->addButton('‚úÖ –î–∞')
        ->addButton('‚ùå –ù–µ—Ç')
        ->row()
        ->addButton('üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å')
        ->resizeKeyboard()
        ->oneTime()
        ->build();
    
    $response = $api->sendMessage($TEST_CHAT_ID, 
        "üß™ –¢–µ—Å—Ç 3.1: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
        ['reply_markup' => $replyKeyboard]
    );
    
    logTest('Level 3', '–°–æ–∑–¥–∞–Ω–∏–µ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', $response !== null);
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    $replyUpdate = waitForUserResponse(
        $polling,
        $USER_TIMEOUT,
        fn($u) => $u->isMessage() && in_array($u->message->text, ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç', 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å']),
        "–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
        $logger
    );
    
    if ($replyUpdate) {
        $choice = $replyUpdate->message->text;
        $api->sendMessage($TEST_CHAT_ID, "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: $choice");
        logTest('Level 3', '–û–±—Ä–∞–±–æ—Ç–∫–∞ Reply –∫–Ω–æ–ø–∫–∏', true, "–í—ã–±–æ—Ä: $choice");
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        $removeKeyboard = ['remove_keyboard' => true];
        $api->sendMessage($TEST_CHAT_ID, "‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞", ['reply_markup' => $removeKeyboard]);
    } else {
        logTest('Level 3', '–û–±—Ä–∞–±–æ—Ç–∫–∞ Reply –∫–Ω–æ–ø–∫–∏', false, '–¢–∞–π–º–∞—É—Ç');
    }
} catch (Exception $e) {
    logTest('Level 3', '–°–æ–∑–¥–∞–Ω–∏–µ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', false, $e->getMessage());
}

sleep(1);

// –¢–µ—Å—Ç 3.2: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å callback
try {
    $inlineKeyboard = InlineKeyboardBuilder::make()
        ->addCallbackButton('üîµ –í–∞—Ä–∏–∞–Ω—Ç 1', 'option_1')
        ->addCallbackButton('üü¢ –í–∞—Ä–∏–∞–Ω—Ç 2', 'option_2')
        ->row()
        ->addCallbackButton('üü° –í–∞—Ä–∏–∞–Ω—Ç 3', 'option_3')
        ->build();
    
    $response = $api->sendMessage($TEST_CHAT_ID,
        "üß™ –¢–µ—Å—Ç 3.2: –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
        ['reply_markup' => $inlineKeyboard]
    );
    
    logTest('Level 3', '–°–æ–∑–¥–∞–Ω–∏–µ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', $response !== null);
    
    // –û–∂–∏–¥–∞–Ω–∏–µ callback
    $callbackUpdate = waitForUserResponse(
        $polling,
        $USER_TIMEOUT,
        fn($u) => $u->isCallbackQuery() && str_starts_with($u->callbackQuery->data, 'option_'),
        "–Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–∫–∏",
        $logger
    );
    
    if ($callbackUpdate) {
        $query = $callbackUpdate->callbackQuery;
        $choice = $query->data;
        
        // –û—Ç–≤–µ—Ç –Ω–∞ callback
        $api->answerCallbackQuery($query->id, ['text' => '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ!']);
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        $api->editMessageText(
            $query->message->chat->id,
            $query->message->messageId,
            "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: $choice"
        );
        
        logTest('Level 3', '–û–±—Ä–∞–±–æ—Ç–∫–∞ Inline callback', true, "Callback: $choice");
    } else {
        logTest('Level 3', '–û–±—Ä–∞–±–æ—Ç–∫–∞ Inline callback', false, '–¢–∞–π–º–∞—É—Ç');
    }
} catch (Exception $e) {
    logTest('Level 3', 'Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å callback', false, $e->getMessage());
}

sleep(1);

// –¢–µ—Å—Ç 3.3: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å URL –∫–Ω–æ–ø–∫–æ–π
try {
    $urlKeyboard = InlineKeyboardBuilder::make()
        ->addUrlButton('üåê –û—Ç–∫—Ä—ã—Ç—å GitHub', 'https://github.com')
        ->row()
        ->addCallbackButton('‚úÖ –ì–æ—Ç–æ–≤–æ', 'url_test_done')
        ->build();
    
    $response = $api->sendMessage($TEST_CHAT_ID,
        "üß™ –¢–µ—Å—Ç 3.3: –ù–∞–∂–º–∏—Ç–µ URL-–∫–Ω–æ–ø–∫—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ':",
        ['reply_markup' => $urlKeyboard]
    );
    
    logTest('Level 3', '–°–æ–∑–¥–∞–Ω–∏–µ URL –∫–Ω–æ–ø–∫–∏', $response !== null);
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    $doneUpdate = waitForUserResponse(
        $polling,
        $USER_TIMEOUT,
        fn($u) => $u->isCallbackQuery() && $u->callbackQuery->data === 'url_test_done',
        "–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ'",
        $logger
    );
    
    if ($doneUpdate) {
        $api->answerCallbackQuery($doneUpdate->callbackQuery->id, ['text' => '‚úÖ URL —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω']);
        $api->editMessageText(
            $doneUpdate->callbackQuery->message->chat->id,
            $doneUpdate->callbackQuery->message->messageId,
            "‚úÖ URL –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞"
        );
        logTest('Level 3', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∫–Ω–æ–ø–∫–∏', true);
    } else {
        logTest('Level 3', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∫–Ω–æ–ø–∫–∏', false, '–¢–∞–π–º–∞—É—Ç');
    }
} catch (Exception $e) {
    logTest('Level 3', 'URL –∫–Ω–æ–ø–∫–∞', false, $e->getMessage());
}

sendTelegramNotification($api, $TEST_CHAT_ID,
    "‚úÖ <b>–£–†–û–í–ï–ù–¨ 3 –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: {$testResults['passed']}\n" .
    "–û—à–∏–±–æ–∫: {$testResults['failed']}",
    $logger
);

sleep(2);

// ============================================================================
// –£–†–û–í–ï–ù–¨ 4: –î–ò–ê–õ–û–ì–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò –° –ü–ê–ú–Ø–¢–¨–Æ
// ============================================================================

sendTelegramNotification($api, $TEST_CHAT_ID,
    "üìã <b>–£–†–û–í–ï–ù–¨ 4: –î–∏–∞–ª–æ–≥–∏ —Å –ø–∞–º—è—Ç—å—é</b>\n\n" .
    "üîπ –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏\n" .
    "üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n" .
    "üîπ ConversationManager",
    $logger
);

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –£–†–û–í–ï–ù–¨ 4: –î–ò–ê–õ–û–ì–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò –° –ü–ê–ú–Ø–¢–¨–Æ\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

// –¢–µ—Å—Ç 4.1: –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥)
$api->sendMessage($TEST_CHAT_ID, 
    "üß™ –¢–µ—Å—Ç 4.1: –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.\n\n" .
    "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
);

$userId = $TEST_CHAT_ID;
$conversationData = [];

// –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
$nameUpdate = waitForUserResponse(
    $polling,
    $USER_TIMEOUT,
    fn($u) => $u->isMessage() && $u->message->text !== null,
    "–≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏",
    $logger
);

if ($nameUpdate) {
    $name = trim($nameUpdate->message->text);
    $conversationData['name'] = $name;
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ConversationManager
    $conversationManager->startConversation(
        $TEST_CHAT_ID,
        $userId,
        'awaiting_age',
        ['name' => $name]
    );
    
    $api->sendMessage($TEST_CHAT_ID, "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: $name\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:");
    logTest('Level 4', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –¥–∏–∞–ª–æ–≥–µ', true, "–ò–º—è: $name");
    
    // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    $ageUpdate = waitForUserResponse(
        $polling,
        $USER_TIMEOUT,
        fn($u) => $u->isMessage() && is_numeric($u->message->text),
        "–≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞",
        $logger
    );
    
    if ($ageUpdate) {
        $age = (int)$ageUpdate->message->text;
        $conversationData['age'] = $age;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        $conversationManager->updateConversation(
            $TEST_CHAT_ID,
            $userId,
            'awaiting_city',
            ['age' => $age]
        );
        
        $api->sendMessage($TEST_CHAT_ID, "‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $age\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:");
        logTest('Level 4', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–µ', true, "–í–æ–∑—Ä–∞—Å—Ç: $age");
        
        // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        $cityUpdate = waitForUserResponse(
            $polling,
            $USER_TIMEOUT,
            fn($u) => $u->isMessage() && $u->message->text !== null,
            "–≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞",
            $logger
        );
        
        if ($cityUpdate) {
            $city = trim($cityUpdate->message->text);
            $conversationData['city'] = $city;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            $conversationManager->updateConversation(
                $TEST_CHAT_ID,
                $userId,
                'completed',
                ['city' => $city]
            );
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ ConversationManager
            $conversation = $conversationManager->getConversation($TEST_CHAT_ID, $userId);
            $fullData = $conversation['data'] ?? [];
            
            $summary = "‚úÖ <b>–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n" .
                       "–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" .
                       "üë§ –ò–º—è: {$fullData['name']}\n" .
                       "üéÇ –í–æ–∑—Ä–∞—Å—Ç: {$fullData['age']}\n" .
                       "üèôÔ∏è –ì–æ—Ä–æ–¥: {$fullData['city']}";
            
            $api->sendMessage($TEST_CHAT_ID, $summary, ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]);
            
            logTest('Level 4', '–ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥', true, "–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã");
            
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            $conversationManager->endConversation($TEST_CHAT_ID, $userId);
        } else {
            logTest('Level 4', '–í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞', false, '–¢–∞–π–º–∞—É—Ç');
        }
    } else {
        logTest('Level 4', '–í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞', false, '–¢–∞–π–º–∞—É—Ç');
    }
} else {
    logTest('Level 4', '–í–≤–æ–¥ –∏–º–µ–Ω–∏', false, '–¢–∞–π–º–∞—É—Ç');
}

sleep(2);

// –¢–µ—Å—Ç 4.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
try {
    $stats = $conversationManager->getStatistics();
    $api->sendMessage($TEST_CHAT_ID, 
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤:</b>\n\n" .
        "–ê–∫—Ç–∏–≤–Ω—ã—Ö: {$stats['total']}",
        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
    );
    logTest('Level 4', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤', true);
} catch (Exception $e) {
    logTest('Level 4', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤', false, $e->getMessage());
}

sendTelegramNotification($api, $TEST_CHAT_ID,
    "‚úÖ <b>–£–†–û–í–ï–ù–¨ 4 –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: {$testResults['passed']}\n" .
    "–û—à–∏–±–æ–∫: {$testResults['failed']}",
    $logger
);

sleep(2);

// ============================================================================
// –£–†–û–í–ï–ù–¨ 5: –°–õ–û–ñ–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö
// ============================================================================

sendTelegramNotification($api, $TEST_CHAT_ID,
    "üìã <b>–£–†–û–í–ï–ù–¨ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</b>\n\n" .
    "üîπ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n" .
    "üîπ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n" .
    "üîπ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏",
    $logger
);

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –£–†–û–í–ï–ù–¨ 5: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

// –¢–µ—Å—Ç 5.1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—ç–º—É–ª—è—Ü–∏—è)
try {
    $api->sendMessage($TEST_CHAT_ID, "üß™ –¢–µ—Å—Ç 5.1: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...");
    
    // Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
    try {
        $api->sendMessage($TEST_CHAT_ID, "");
        logTest('Level 5', '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', false, '–ù–µ –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É');
    } catch (Exception $e) {
        $api->sendMessage($TEST_CHAT_ID, "‚úÖ –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ");
        logTest('Level 5', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', true, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞');
    }
} catch (Exception $e) {
    logTest('Level 5', '–¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', false, $e->getMessage());
}

// –¢–µ—Å—Ç 5.2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
$api->sendMessage($TEST_CHAT_ID, 
    "üß™ –¢–µ—Å—Ç 5.2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä /unknowncommand123"
);

$unknownCmdUpdate = waitForUserResponse(
    $polling,
    $USER_TIMEOUT,
    fn($u) => $u->isMessage() && str_starts_with($u->message->text ?? '', '/'),
    "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã",
    $logger
);

if ($unknownCmdUpdate) {
    $command = $unknownCmdUpdate->message->text;
    $api->sendMessage($TEST_CHAT_ID, 
        "‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command\n\n" .
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" .
        "/start - –ù–∞—á–∞—Ç—å\n" .
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n" .
        "/stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" .
        "/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    );
    logTest('Level 5', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã', true, "–ö–æ–º–∞–Ω–¥–∞: $command");
} else {
    // –≠–º—É–ª—è—Ü–∏—è
    $api->sendMessage($TEST_CHAT_ID, 
        "‚úÖ –≠–º—É–ª—è—Ü–∏—è: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '/test123'\n\n" .
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /info, /stat, /edit"
    );
    logTest('Level 5', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã', true, '–≠–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ');
}

// –¢–µ—Å—Ç 5.3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
try {
    $longText = str_repeat("–¢–µ—Å—Ç ", 1000); // ~5000 —Å–∏–º–≤–æ–ª–æ–≤
    
    if (strlen($longText) > 4096) {
        $api->sendMessage($TEST_CHAT_ID, 
            "üß™ –¢–µ—Å—Ç 5.3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" .
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç (4096 —Å–∏–º–≤–æ–ª–æ–≤)\n" .
            "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        );
        logTest('Level 5', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', true, '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }
} catch (Exception $e) {
    logTest('Level 5', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', false, $e->getMessage());
}

// –¢–µ—Å—Ç 5.4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ file_id
try {
    $api->sendMessage($TEST_CHAT_ID, "üß™ –¢–µ—Å—Ç 5.4: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º file_id...");
    
    try {
        $api->sendPhoto($TEST_CHAT_ID, 'invalid_file_id_12345');
        logTest('Level 5', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ file_id', false, '–ù–µ –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É');
    } catch (Exception $e) {
        $api->sendMessage($TEST_CHAT_ID, 
            "‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π file_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n" .
            "–û—à–∏–±–∫–∞: " . substr($e->getMessage(), 0, 100)
        );
        logTest('Level 5', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ file_id', true, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞');
    }
} catch (Exception $e) {
    logTest('Level 5', '–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ file_id', false, $e->getMessage());
}

sendTelegramNotification($api, $TEST_CHAT_ID,
    "‚úÖ <b>–£–†–û–í–ï–ù–¨ 5 –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: {$testResults['passed']}\n" .
    "–û—à–∏–±–æ–∫: {$testResults['failed']}",
    $logger
);

sleep(2);

// ============================================================================
// –£–†–û–í–ï–ù–¨ 6: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –î–ò–ê–õ–û–ì–ò
// ============================================================================

sendTelegramNotification($api, $TEST_CHAT_ID,
    "üìã <b>–£–†–û–í–ï–ù–¨ 6: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏</b>\n\n" .
    "üîπ –ò–º–∏—Ç–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞\n" .
    "üîπ –í–µ—Ç–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤\n" .
    "üîπ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
    $logger
);

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –£–†–û–í–ï–ù–¨ 6: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –î–ò–ê–õ–û–ì–ò\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

// –¢–µ—Å—Ç 6.1: –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞
$api->sendMessage($TEST_CHAT_ID, 
    "üß™ –¢–µ—Å—Ç 6.1: –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞\n\n" .
    "üõçÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞..."
);

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
try {
    $categoryKeyboard = InlineKeyboardBuilder::make()
        ->addCallbackButton('üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 'order:electronics')
        ->addCallbackButton('üëï –û–¥–µ–∂–¥–∞', 'order:clothing')
        ->row()
        ->addCallbackButton('üìö –ö–Ω–∏–≥–∏', 'order:books')
        ->addCallbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'order:cancel')
        ->build();
    
    $api->sendMessage($TEST_CHAT_ID,
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        ['reply_markup' => $categoryKeyboard]
    );
    
    logTest('Level 6', '–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∑–∞–∫–∞–∑–∞', true);
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    $categoryUpdate = waitForUserResponse(
        $polling,
        $USER_TIMEOUT,
        fn($u) => $u->isCallbackQuery() && str_starts_with($u->callbackQuery->data, 'order:'),
        "–≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        $logger
    );
    
    if ($categoryUpdate) {
        $query = $categoryUpdate->callbackQuery;
        $data = explode(':', $query->data);
        $category = $data[1] ?? 'unknown';
        
        if ($category === 'cancel') {
            $api->answerCallbackQuery($query->id, ['text' => '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω']);
            $api->editMessageText(
                $query->message->chat->id,
                $query->message->messageId,
                "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω"
            );
            logTest('Level 6', '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', true);
        } else {
            $api->answerCallbackQuery($query->id, ['text' => '‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞']);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥
            $conversationManager->startConversation(
                $TEST_CHAT_ID,
                $userId,
                'order_awaiting_product',
                ['category' => $category],
                $query->message->messageId
            );
            
            $api->editMessageText(
                $query->message->chat->id,
                $query->message->messageId,
                "‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: $category"
            );
            
            // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
            $productKeyboard = InlineKeyboardBuilder::make()
                ->addCallbackButton('üì¶ –¢–æ–≤–∞—Ä 1', 'product:1')
                ->addCallbackButton('üì¶ –¢–æ–≤–∞—Ä 2', 'product:2')
                ->row()
                ->addCallbackButton('üì¶ –¢–æ–≤–∞—Ä 3', 'product:3')
                ->addCallbackButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'product:back')
                ->build();
            
            $api->sendMessage($TEST_CHAT_ID,
                "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                ['reply_markup' => $productKeyboard]
            );
            
            logTest('Level 6', '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞', true, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: $category");
            
            // –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
            $productUpdate = waitForUserResponse(
                $polling,
                $USER_TIMEOUT,
                fn($u) => $u->isCallbackQuery() && str_starts_with($u->callbackQuery->data, 'product:'),
                "–≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞",
                $logger
            );
            
            if ($productUpdate) {
                $prodQuery = $productUpdate->callbackQuery;
                $prodData = explode(':', $prodQuery->data);
                $productId = $prodData[1] ?? 'unknown';
                
                if ($productId === 'back') {
                    $api->answerCallbackQuery($prodQuery->id, ['text' => '‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥']);
                    $api->editMessageText(
                        $prodQuery->message->chat->id,
                        $prodQuery->message->messageId,
                        "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                    );
                    logTest('Level 6', '–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É', true);
                } else {
                    $api->answerCallbackQuery($prodQuery->id, ['text' => '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω']);
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
                    $conversationManager->updateConversation(
                        $TEST_CHAT_ID,
                        $userId,
                        'order_completed',
                        ['product_id' => $productId]
                    );
                    
                    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
                    $orderConv = $conversationManager->getConversation($TEST_CHAT_ID, $userId);
                    $orderData = $orderConv['data'] ?? [];
                    
                    $api->editMessageText(
                        $prodQuery->message->chat->id,
                        $prodQuery->message->messageId,
                        "‚úÖ –¢–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω: ID $productId"
                    );
                    
                    $api->sendMessage($TEST_CHAT_ID,
                        "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n" .
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {$orderData['category']}\n" .
                        "–¢–æ–≤–∞—Ä ID: {$orderData['product_id']}\n\n" .
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üéâ",
                        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                    );
                    
                    logTest('Level 6', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞', true, "–¢–æ–≤–∞—Ä ID: $productId");
                    
                    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
                    $conversationManager->endConversation($TEST_CHAT_ID, $userId);
                }
            } else {
                logTest('Level 6', '–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞', false, '–¢–∞–π–º–∞—É—Ç');
            }
        }
    } else {
        logTest('Level 6', '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', false, '–¢–∞–π–º–∞—É—Ç');
    }
} catch (Exception $e) {
    logTest('Level 6', '–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞', false, $e->getMessage());
}

sendTelegramNotification($api, $TEST_CHAT_ID,
    "‚úÖ <b>–£–†–û–í–ï–ù–¨ 6 –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: {$testResults['passed']}\n" .
    "–û—à–∏–±–æ–∫: {$testResults['failed']}",
    $logger
);

sleep(2);

// ============================================================================
// –£–†–û–í–ï–ù–¨ 7: –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –î–ï–ô–°–¢–í–ò–ô
// ============================================================================

sendTelegramNotification($api, $TEST_CHAT_ID,
    "üìã <b>–£–†–û–í–ï–ù–¨ 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n" .
    "üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n" .
    "üîπ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n" .
    "üîπ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è",
    $logger
);

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –£–†–û–í–ï–ù–¨ 7: –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

// –¢–µ—Å—Ç 7.1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
$commands = ['/start', '/info', '/stat', '/edit'];

foreach ($commands as $cmd) {
    try {
        $api->sendMessage($TEST_CHAT_ID, 
            "üß™ –¢–µ—Å—Ç 7.1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã $cmd\n\n" .
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: $cmd"
        );
        
        $cmdUpdate = waitForUserResponse(
            $polling,
            15, // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
            fn($u) => $u->isMessage() && $u->message->text === $cmd,
            "–∫–æ–º–∞–Ω–¥—ã $cmd",
            $logger
        );
        
        if ($cmdUpdate) {
            $api->sendMessage($TEST_CHAT_ID, "‚úÖ –ö–æ–º–∞–Ω–¥–∞ $cmd –ø–æ–ª—É—á–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞");
            logTest('Level 7', "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã $cmd", true);
        } else {
            // –≠–º—É–ª—è—Ü–∏—è
            $api->sendMessage($TEST_CHAT_ID, "‚è© –≠–º—É–ª—è—Ü–∏—è: –∫–æ–º–∞–Ω–¥–∞ $cmd –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞");
            logTest('Level 7', "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã $cmd", true, '–≠–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ');
        }
        
        sleep(1);
    } catch (Exception $e) {
        logTest('Level 7', "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã $cmd", false, $e->getMessage());
    }
}

// –¢–µ—Å—Ç 7.2: –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç)
try {
    $api->sendMessage($TEST_CHAT_ID, "üß™ –¢–µ—Å—Ç 7.2: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...");
    
    for ($i = 1; $i <= 5; $i++) {
        $api->sendMessage($TEST_CHAT_ID, "üì® –°–æ–æ–±—â–µ–Ω–∏–µ $i –∏–∑ 5");
        usleep(200000); // 200ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    }
    
    $api->sendMessage($TEST_CHAT_ID, "‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!");
    logTest('Level 7', '–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏', true, '5 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
} catch (Exception $e) {
    logTest('Level 7', '–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏', false, $e->getMessage());
}

// –¢–µ—Å—Ç 7.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try {
    $logFile = __DIR__ . '/logs/telegram_bot_full_test.log';
    
    if (file_exists($logFile)) {
        $logSize = filesize($logFile);
        $api->sendMessage($TEST_CHAT_ID, 
            "üß™ –¢–µ—Å—Ç 7.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n\n" .
            "‚úÖ –õ–æ–≥-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω\n" .
            "üìä –†–∞–∑–º–µ—Ä: " . number_format($logSize) . " –±–∞–π—Ç"
        );
        logTest('Level 7', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', true, "–†–∞–∑–º–µ—Ä –ª–æ–≥–∞: $logSize –±–∞–π—Ç");
    } else {
        logTest('Level 7', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', false, '–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
} catch (Exception $e) {
    logTest('Level 7', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', false, $e->getMessage());
}

sendTelegramNotification($api, $TEST_CHAT_ID,
    "‚úÖ <b>–£–†–û–í–ï–ù–¨ 7 –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: {$testResults['passed']}\n" .
    "–û—à–∏–±–æ–∫: {$testResults['failed']}",
    $logger
);

// ============================================================================
// –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
// ============================================================================

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$successRate = $testResults['total'] > 0 
    ? round(($testResults['passed'] / $testResults['total']) * 100, 2) 
    : 0;

echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$testResults['total']}\n";
echo "‚úÖ –£—Å–ø–µ—à–Ω–æ: {$testResults['passed']}\n";
echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$testResults['failed']}\n";
echo "üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $successRate%\n\n";

$logger->info('========================================');
$logger->info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:");
$logger->info("–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$testResults['total']}");
$logger->info("–£—Å–ø–µ—à–Ω–æ: {$testResults['passed']}");
$logger->info("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$testResults['failed']}");
$logger->info("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $successRate%");

if (!empty($testResults['errors'])) {
    echo "–û—à–∏–±–∫–∏:\n";
    foreach ($testResults['errors'] as $error) {
        echo "  - $error\n";
        $logger->error("–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: $error");
    }
}

$logger->info('========================================');

// –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
$finalReport = "üèÅ <b>–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û</b>\n\n" .
               "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n" .
               "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$testResults['total']}\n" .
               "‚úÖ –£—Å–ø–µ—à–Ω–æ: {$testResults['passed']}\n" .
               "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$testResults['failed']}\n" .
               "üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $successRate%\n\n";

if (!empty($testResults['errors'])) {
    $finalReport .= "‚ùå <b>–û—à–∏–±–∫–∏:</b>\n";
    foreach (array_slice($testResults['errors'], 0, 5) as $error) {
        $finalReport .= "‚Ä¢ " . htmlspecialchars($error) . "\n";
    }
    if (count($testResults['errors']) > 5) {
        $remaining = count($testResults['errors']) - 5;
        $finalReport .= "\n...–∏ –µ—â—ë $remaining –æ—à–∏–±–æ–∫(–∫–∏)\n";
    }
}

$finalReport .= "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!";

sendTelegramNotification($api, $TEST_CHAT_ID, $finalReport, $logger);

// ============================================================================
// –°–û–ó–î–ê–ù–ò–ï –î–ê–ú–ü–û–í MYSQL
// ============================================================================

echo "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "  –°–û–ó–î–ê–ù–ò–ï –î–ê–ú–ü–û–í MYSQL\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$dumpDir = __DIR__ . '/mysql';
if (!is_dir($dumpDir)) {
    mkdir($dumpDir, 0755, true);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
try {
    $tables = $db->query("SHOW TABLES");
    $tableCount = 0;
    
    foreach ($tables as $table) {
        $tableName = array_values($table)[0];
        $dumpFile = "$dumpDir/{$tableName}.sql";
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —á–µ—Ä–µ–∑ mysqldump
        $command = sprintf(
            "mysqldump -u root utilities_db %s > %s 2>&1",
            escapeshellarg($tableName),
            escapeshellarg($dumpFile)
        );
        
        exec($command, $output, $returnCode);
        
        if ($returnCode === 0 && file_exists($dumpFile)) {
            $size = filesize($dumpFile);
            echo "‚úÖ –î–∞–º–ø —Ç–∞–±–ª–∏—Ü—ã $tableName —Å–æ–∑–¥–∞–Ω (—Ä–∞–∑–º–µ—Ä: $size –±–∞–π—Ç)\n";
            $logger->info("–°–æ–∑–¥–∞–Ω –¥–∞–º–ø —Ç–∞–±–ª–∏—Ü—ã: $tableName", ['size' => $size]);
            $tableCount++;
        } else {
            echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ —Ç–∞–±–ª–∏—Ü—ã $tableName\n";
            $logger->error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ —Ç–∞–±–ª–∏—Ü—ã: $tableName");
        }
    }
    
    echo "\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–∞–º–ø–æ–≤: $tableCount\n";
    $logger->info("–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –¥–∞–º–ø–æ–≤: $tableCount");
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    sendTelegramNotification($api, $TEST_CHAT_ID,
        "üíæ <b>–î–∞–º–ø—ã MySQL —Å–æ–∑–¥–∞–Ω—ã</b>\n\n" .
        "–¢–∞–±–ª–∏—Ü: $tableCount\n" .
        "–ü–∞–ø–∫–∞: /mysql/",
        $logger
    );
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–æ–≤: {$e->getMessage()}\n";
    $logger->error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–æ–≤ MySQL", ['error' => $e->getMessage()]);
}

echo "\n";
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë                     –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û                           ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";
echo "\n";

$logger->info('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
