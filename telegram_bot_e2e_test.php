<?php

declare(strict_types=1);

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramBot —Å MySQL –∏ Polling
 * 
 * –í–∫–ª—é—á–∞–µ—Ç:
 * - –ù–∞—á–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
 * - –°—Ä–µ–¥–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏
 * - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
 * - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ Polling
 */

require_once __DIR__ . '/autoload.php';

use App\Component\Http;
use App\Component\Logger;
use App\Component\MySQL;
use App\Component\MySQLConnectionFactory;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\PollingHandler;
use App\Component\TelegramBot\Core\MessageStorage;
use App\Component\TelegramBot\Core\ConversationManager;
use App\Component\TelegramBot\Core\AccessControl;
use App\Component\TelegramBot\Core\AccessControlMiddleware;
use App\Component\TelegramBot\Entities\Update;
use App\Component\TelegramBot\Handlers\MessageHandler;
use App\Component\TelegramBot\Handlers\TextHandler;
use App\Component\TelegramBot\Handlers\CallbackQueryHandler;
use App\Component\TelegramBot\Handlers\MediaHandler;
use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;
use App\Component\TelegramBot\Keyboards\ReplyKeyboardBuilder;
use App\Component\TelegramBot\Utils\Validator;
use App\Component\TelegramBot\Utils\Parser;

// ============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================

$config = [
    'bot_token' => '8327641497:AAFTHb3xSTpP3Q6Peg8-OK4nTWTfF7iMWfI',
    'test_chat_id' => 366442475,
    'db_host' => 'localhost',
    'db_name' => 'telegram_bot_test',
    'db_user' => 'testuser',
    'db_pass' => 'testpass',
];

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================================================

echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TelegramBot\n\n";

// –õ–æ–≥–≥–µ—Ä
$logger = new Logger([
    'directory' => __DIR__ . '/logs/telegram_bot_tests',
    'prefix' => 'telegram_bot_e2e',
    'rotation' => 'daily',
]);

$logger->info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
$logger->info('–ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TelegramBot');
$logger->info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

// HTTP –∫–ª–∏–µ–Ω—Ç
$http = new Http(['timeout' => 60], $logger);

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
$db = new MySQL([
    'host' => $config['db_host'],
    'database' => $config['db_name'],
    'username' => $config['db_user'],
    'password' => $config['db_pass'],
], $logger);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
try {
    $db->ping();
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ\n";
    $logger->info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å–ø–µ—à–Ω–æ');
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {$e->getMessage()}\n";
    $logger->error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL', ['error' => $e->getMessage()]);
    exit(1);
}

// MessageStorage
$messageStorage = new MessageStorage($db, $logger, [
    'enabled' => true,
    'storage_level' => MessageStorage::LEVEL_FULL,
    'store_incoming' => true,
    'store_outgoing' => true,
    'auto_create_table' => true,
]);

echo "‚úÖ MessageStorage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n";

// ConversationManager
$conversationManager = new ConversationManager($db, $logger, [
    'enabled' => true,
    'timeout' => 3600,
    'auto_create_tables' => true,
]);

echo "‚úÖ ConversationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n";

// TelegramAPI
$api = new TelegramAPI($config['bot_token'], $http, $logger, $messageStorage);

echo "‚úÖ TelegramAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
try {
    $botInfo = $api->getMe();
    echo "‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{$botInfo->username} ({$botInfo->firstName})\n";
    $logger->info('–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω', [
        'username' => $botInfo->username,
        'id' => $botInfo->id,
    ]);
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {$e->getMessage()}\n";
    $logger->error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ', ['error' => $e->getMessage()]);
    exit(1);
}

// FileDownloader
$fileDownloader = new App\Component\TelegramBot\Utils\FileDownloader(
    $config['bot_token'],
    $http,
    $logger
);

// Handlers
$messageHandler = new MessageHandler($api, $logger);
$textHandler = new TextHandler($api, $logger);
$callbackHandler = new CallbackQueryHandler($api, $logger);
$mediaHandler = new MediaHandler($api, $fileDownloader, $logger);

echo "‚úÖ Handlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n";

// PollingHandler
$polling = new PollingHandler($api, $logger);
$polling
    ->setTimeout(30)
    ->setLimit(100)
    ->setAllowedUpdates(['message', 'callback_query']);

echo "‚úÖ PollingHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n";

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 */
function sendNotification(TelegramAPI $api, int $chatId, string $title, string $message, string $emoji = 'üì¢'): void
{
    $text = "{$emoji} <b>{$title}</b>\n\n{$message}";
    try {
        $api->sendMessage($chatId, $text, ['parse_mode' => 'HTML']);
    } catch (\Exception $e) {
        echo "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {$e->getMessage()}\n";
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
 */
function sendNotificationWithKeyboard(TelegramAPI $api, int $chatId, string $title, string $message, array $keyboard): void
{
    $text = "üéØ <b>{$title}</b>\n\n{$message}";
    try {
        $api->sendMessage($chatId, $text, [
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboard,
        ]);
    } catch (\Exception $e) {
        echo "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {$e->getMessage()}\n";
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
function formatStats(array $stats): string
{
    $text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n";
    $text .= "üì® –í—Å–µ–≥–æ: {$stats['total']}\n";
    $text .= "üì• –í—Ö–æ–¥—è—â–∏—Ö: {$stats['incoming']}\n";
    $text .= "üì§ –ò—Å—Ö–æ–¥—è—â–∏—Ö: {$stats['outgoing']}\n";
    $text .= "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {$stats['success']}\n";
    $text .= "‚ùå –û—à–∏–±–æ–∫: {$stats['failed']}\n\n";
    
    if (!empty($stats['by_type'])) {
        $text .= "üìã <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n";
        foreach ($stats['by_type'] as $type => $count) {
            $text .= "  ‚Ä¢ {$type}: {$count}\n";
        }
    }
    
    return $text;
}

// ============================================================================
// –≠–¢–ê–ü 1: –ù–ê–ß–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ú–ï–¢–û–î–û–í –í–°–ï–• –ö–õ–ê–°–°–û–í
// ============================================================================

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "–≠–¢–ê–ü 1: –ù–ê–ß–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$logger->info('‚ïê‚ïê‚ïê –≠–¢–ê–ü 1: –ù–ê–ß–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ‚ïê‚ïê‚ïê');

sendNotification(
    $api,
    $config['test_chat_id'],
    '–≠–¢–ê–ü 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    'üî¨ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤ TelegramBot\n\n' .
    'üìã –ü–ª–∞–Ω:\n' .
    '1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramAPI\n' .
    '2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Handlers\n' .
    '3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Keyboards\n' .
    '4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Utils\n' .
    '5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MessageStorage\n' .
    '6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConversationManager',
    'üöÄ'
);

sleep(2);

// --- –¢–µ—Å—Ç 1.1: TelegramAPI - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
echo "‚ñ∂ –¢–µ—Å—Ç 1.1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n";
$logger->info('–¢–µ—Å—Ç 1.1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');

try {
    // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    $msg1 = $api->sendMessage($config['test_chat_id'], 'üìù –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    echo "  ‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {$msg1->messageId})\n";
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å HTML
    $msg2 = $api->sendMessage(
        $config['test_chat_id'],
        '<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>, <pre>–ø—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</pre>',
        ['parse_mode' => 'HTML']
    );
    echo "  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å HTML –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {$msg2->messageId})\n";
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown
    $msg3 = $api->sendMessage(
        $config['test_chat_id'],
        '*–ñ–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, `–∫–æ–¥`',
        ['parse_mode' => 'Markdown']
    );
    echo "  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {$msg3->messageId})\n";
    
    $logger->info('–¢–µ—Å—Ç 1.1 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (\Exception $e) {
    echo "  ‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    $logger->error('–¢–µ—Å—Ç 1.1 –ø—Ä–æ–≤–∞–ª–µ–Ω', ['error' => $e->getMessage()]);
}

sleep(1);

// --- –¢–µ—Å—Ç 1.2: InlineKeyboardBuilder ---
echo "‚ñ∂ –¢–µ—Å—Ç 1.2: InlineKeyboardBuilder...\n";
$logger->info('–¢–µ—Å—Ç 1.2: InlineKeyboardBuilder');

try {
    // –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    $keyboard1 = InlineKeyboardBuilder::makeSimple([
        '‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1' => 'test_option_1',
        'üîî –í–∞—Ä–∏–∞–Ω—Ç 2' => 'test_option_2',
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' => 'test_settings',
    ]);
    
    $api->sendMessage(
        $config['test_chat_id'],
        'üéõ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
        ['reply_markup' => $keyboard1]
    );
    echo "  ‚úÖ –ü—Ä–æ—Å—Ç–∞—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n";
    
    // –°–ª–æ–∂–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π
    $keyboard2 = (new InlineKeyboardBuilder())
        ->addCallbackButton('üî• –ö–Ω–æ–ø–∫–∞ 1', 'btn_1')
        ->addCallbackButton('üí° –ö–Ω–æ–ø–∫–∞ 2', 'btn_2')
        ->row()
        ->addUrlButton('üåê URL', 'https://telegram.org')
        ->row()
        ->addCallbackButton('üìû Callback', 'callback_test')
        ->build();
    
    $api->sendMessage(
        $config['test_chat_id'],
        'üéÆ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–π inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
        ['reply_markup' => $keyboard2]
    );
    echo "  ‚úÖ –°–ª–æ–∂–Ω–∞—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n";
    
    $logger->info('–¢–µ—Å—Ç 1.2 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (\Exception $e) {
    echo "  ‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    $logger->error('–¢–µ—Å—Ç 1.2 –ø—Ä–æ–≤–∞–ª–µ–Ω', ['error' => $e->getMessage()]);
}

sleep(1);

// --- –¢–µ—Å—Ç 1.3: ReplyKeyboardBuilder ---
echo "‚ñ∂ –¢–µ—Å—Ç 1.3: ReplyKeyboardBuilder...\n";
$logger->info('–¢–µ—Å—Ç 1.3: ReplyKeyboardBuilder');

try {
    $replyKeyboard = (new ReplyKeyboardBuilder())
        ->addButton('üè† –ì–ª–∞–≤–Ω–∞—è')
        ->addButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        ->row()
        ->addButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        ->addButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        ->row()
        ->addButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
        ->resizeKeyboard(true)
        ->oneTime(false)
        ->build();
    
    $api->sendMessage(
        $config['test_chat_id'],
        '‚å®Ô∏è –¢–µ—Å—Ç reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
        ['reply_markup' => $replyKeyboard]
    );
    echo "  ‚úÖ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n";
    
    $logger->info('–¢–µ—Å—Ç 1.3 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (\Exception $e) {
    echo "  ‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    $logger->error('–¢–µ—Å—Ç 1.3 –ø—Ä–æ–≤–∞–ª–µ–Ω', ['error' => $e->getMessage()]);
}

sleep(1);

// --- –¢–µ—Å—Ç 1.4: Utils (Validator, Parser) ---
echo "‚ñ∂ –¢–µ—Å—Ç 1.4: Utils (Validator, Parser)...\n";
$logger->info('–¢–µ—Å—Ç 1.4: Utils');

try {
    // Validator
    $validToken = '123456789:ABCdefGHIjklMNOpqrsTUVwxyz';
    $invalidToken = 'invalid';
    
    try {
        Validator::validateToken($validToken);
        echo "  ‚úÖ Validator: –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç\n";
    } catch (\Exception $e) {
        echo "  ‚ùå Validator: –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω\n";
    }
    
    try {
        Validator::validateToken($invalidToken);
        echo "  ‚ùå Validator: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç\n";
    } catch (\Exception $e) {
        echo "  ‚úÖ Validator: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω\n";
    }
    
    // Parser
    $testText = '/start@bot arg1 arg2 #hashtag @username https://example.com';
    $command = Parser::parseCommand($testText);
    
    if ($command['command'] === 'start' && $command['bot_username'] === 'bot') {
        echo "  ‚úÖ Parser: –∫–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } else {
        echo "  ‚ùå Parser: –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã\n";
    }
    
    $entities = Parser::extractEntities($testText);
    if (!empty($entities['hashtags']) && !empty($entities['mentions']) && !empty($entities['urls'])) {
        echo "  ‚úÖ Parser: —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } else {
        echo "  ‚ö†Ô∏è Parser: –Ω–µ –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã\n";
    }
    
    $logger->info('–¢–µ—Å—Ç 1.4 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (\Exception $e) {
    echo "  ‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    $logger->error('–¢–µ—Å—Ç 1.4 –ø—Ä–æ–≤–∞–ª–µ–Ω', ['error' => $e->getMessage()]);
}

sleep(1);

// --- –¢–µ—Å—Ç 1.5: MessageStorage ---
echo "‚ñ∂ –¢–µ—Å—Ç 1.5: MessageStorage...\n";
$logger->info('–¢–µ—Å—Ç 1.5: MessageStorage');

try {
    $stats = $messageStorage->getStatistics($config['test_chat_id']);
    echo "  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: –≤—Å–µ–≥–æ {$stats['total']} —Å–æ–æ–±—â–µ–Ω–∏–π\n";
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–æ—Ç
    $api->sendMessage(
        $config['test_chat_id'],
        formatStats($stats),
        ['parse_mode' => 'HTML']
    );
    
    $logger->info('–¢–µ—Å—Ç 1.5 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ', $stats);
} catch (\Exception $e) {
    echo "  ‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    $logger->error('–¢–µ—Å—Ç 1.5 –ø—Ä–æ–≤–∞–ª–µ–Ω', ['error' => $e->getMessage()]);
}

sleep(1);

// --- –¢–µ—Å—Ç 1.6: ConversationManager ---
echo "‚ñ∂ –¢–µ—Å—Ç 1.6: ConversationManager...\n";
$logger->info('–¢–µ—Å—Ç 1.6: ConversationManager');

try {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $conversationManager->saveUser(
        $config['test_chat_id'],
        'Test',
        'testuser',
        'User'
    );
    echo "  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n";
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $user = $conversationManager->getUser($config['test_chat_id']);
    if ($user && $user['first_name'] === 'Test') {
        echo "  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } else {
        echo "  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    $conversationManager->setState($config['test_chat_id'], 'test_state', ['test_key' => 'test_value']);
    echo "  ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    $state = $conversationManager->getState($config['test_chat_id']);
    if ($state && $state['state'] === 'test_state' && $state['data']['test_key'] === 'test_value') {
        echo "  ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—É—á–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } else {
        echo "  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞\n";
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    $conversationManager->clearState($config['test_chat_id']);
    echo "  ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–æ\n";
    
    $logger->info('–¢–µ—Å—Ç 1.6 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (\Exception $e) {
    echo "  ‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    $logger->error('–¢–µ—Å—Ç 1.6 –ø—Ä–æ–≤–∞–ª–µ–Ω', ['error' => $e->getMessage()]);
}

sleep(2);

sendNotification(
    $api,
    $config['test_chat_id'],
    '–≠–¢–ê–ü 1: –ó–∞–≤–µ—Ä—à—ë–Ω',
    '‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n' .
    'üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n' .
    '‚úÖ TelegramAPI - OK\n' .
    '‚úÖ Handlers - OK\n' .
    '‚úÖ Keyboards - OK\n' .
    '‚úÖ Utils - OK\n' .
    '‚úÖ MessageStorage - OK\n' .
    '‚úÖ ConversationManager - OK',
    'üéâ'
);

echo "\n‚úÖ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–Å–ù\n\n";
$logger->info('‚ïê‚ïê‚ïê –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û ‚ïê‚ïê‚ïê');

sleep(3);

// ============================================================================
// –≠–¢–ê–ü 2: –°–†–ï–î–ù–ò–ï –°–¶–ï–ù–ê–†–ò–ò –° –ö–û–ú–ü–õ–ï–ö–°–ù–´–ú–ò –î–ò–ê–õ–û–ì–ê–ú–ò
// ============================================================================

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "–≠–¢–ê–ü 2: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –î–ò–ê–õ–û–ì–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$logger->info('‚ïê‚ïê‚ïê –≠–¢–ê–ü 2: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –î–ò–ê–õ–û–ì–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò ‚ïê‚ïê‚ïê');

sendNotification(
    $api,
    $config['test_chat_id'],
    '–≠–¢–ê–ü 2: –î–∏–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
    'üé≠ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n\n' .
    'üìã –ë—É–¥—É—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã:\n' .
    '‚Ä¢ –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏\n' .
    '‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫\n' .
    '‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n' .
    '‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n' .
    '‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —à–∞–≥–∞–º–∏\n\n' .
    '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –±–æ—Ç–æ–º!',
    'üéØ'
);

// –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$testScenarios = [
    'registration' => false,
    'survey' => false,
    'callback_test' => false,
    'edit_test' => false,
];

$polling->skipPendingUpdates();
echo "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /test_start –¥–ª—è –Ω–∞—á–∞–ª–∞\n";
echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
echo "  /test_start - –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n";
echo "  /test_survey - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –æ–ø—Ä–æ—Å–∞\n";
echo "  /test_callback - —Ç–µ—Å—Ç callback –∫–Ω–æ–ø–æ–∫\n";
echo "  /test_edit - —Ç–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
echo "  /test_finish - –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø 2\n\n";

$polling->startPolling(function(Update $update) use (
    $api,
    $config,
    $conversationManager,
    $logger,
    &$testScenarios,
    $polling
) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if ($update->isMessage() && $update->message->text) {
        $message = $update->message;
        $text = $message->text;
        $chatId = $message->chat->id;
        $userId = $message->from->id;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $conversationManager->saveUser(
            $userId,
            $message->from->firstName,
            $message->from->username,
            $message->from->lastName
        );
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        $state = $conversationManager->getState($userId);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (str_starts_with($text, '/')) {
            $command = strtolower(str_replace('/', '', explode(' ', $text)[0]));
            
            if ($command === 'test_start') {
                $conversationManager->setState($userId, 'registration_step_1');
                $api->sendMessage(
                    $chatId,
                    'üëã <b>–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!</b>\n\n' .
                    '–®–∞–≥ 1/3: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
                    ['parse_mode' => 'HTML']
                );
                echo "  ‚ñ∂ –ó–∞–ø—É—â–µ–Ω –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}\n";
            } elseif ($command === 'test_survey') {
                $keyboard = InlineKeyboardBuilder::makeGrid([
                    '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5)' => 'rate_5',
                    '‚≠ê‚≠ê‚≠ê‚≠ê (4)' => 'rate_4',
                    '‚≠ê‚≠ê‚≠ê (3)' => 'rate_3',
                    '‚≠ê‚≠ê (2)' => 'rate_2',
                    '‚≠ê (1)' => 'rate_1',
                ], 2);
                
                $api->sendMessage(
                    $chatId,
                    'üìä <b>–¢–µ—Å—Ç –æ–ø—Ä–æ—Å–∞</b>\n\n–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:',
                    ['parse_mode' => 'HTML', 'reply_markup' => $keyboard]
                );
                echo "  ‚ñ∂ –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}\n";
            } elseif ($command === 'test_callback') {
                $keyboard = (new InlineKeyboardBuilder())
                    ->addCallbackButton('üî• –î–µ–π—Å—Ç–≤–∏–µ 1', 'action_1')
                    ->addCallbackButton('üí° –î–µ–π—Å—Ç–≤–∏–µ 2', 'action_2')
                    ->row()
                    ->addCallbackButton('‚ö° –î–µ–π—Å—Ç–≤–∏–µ 3', 'action_3')
                    ->addCallbackButton('üéØ –î–µ–π—Å—Ç–≤–∏–µ 4', 'action_4')
                    ->row()
                    ->addCallbackButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', 'finish_callback_test')
                    ->build();
                
                $api->sendMessage(
                    $chatId,
                    'üéÆ <b>–¢–µ—Å—Ç callback –∫–Ω–æ–ø–æ–∫</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
                    ['parse_mode' => 'HTML', 'reply_markup' => $keyboard]
                );
                echo "  ‚ñ∂ –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç callback –∫–Ω–æ–ø–æ–∫\n";
            } elseif ($command === 'test_edit') {
                $msg = $api->sendMessage($chatId, '‚è≥ –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
                sleep(1);
                $api->editMessageText($chatId, $msg->messageId, '‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!');
                sleep(1);
                $api->editMessageText($chatId, $msg->messageId, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–≤–∞–∂–¥—ã!');
                $testScenarios['edit_test'] = true;
                echo "  ‚úÖ –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω\n";
            } elseif ($command === 'test_finish') {
                $api->sendMessage(
                    $chatId,
                    '‚úÖ <b>–≠–¢–ê–ü 2 –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É...',
                    ['parse_mode' => 'HTML']
                );
                $polling->stopPolling();
            }
            
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
        if ($state) {
            if ($state['state'] === 'registration_step_1') {
                $data = ['name' => $text];
                $conversationManager->setState($userId, 'registration_step_2', $data);
                $api->sendMessage(
                    $chatId,
                    "‚úÖ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {$text}!\n\n" .
                    "–®–∞–≥ 2/3: –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
                    ['parse_mode' => 'HTML']
                );
                echo "  ‚ñ∂ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —à–∞–≥ 1 -> —à–∞–≥ 2 (–∏–º—è: {$text})\n";
            } elseif ($state['state'] === 'registration_step_2') {
                if (!is_numeric($text)) {
                    $api->sendMessage($chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!');
                    return;
                }
                
                $data = $state['data'] ?? [];
                $data['age'] = (int)$text;
                $conversationManager->setState($userId, 'registration_step_3', $data);
                
                $keyboard = InlineKeyboardBuilder::makeSimple([
                    'üè† –ú–æ—Å–∫–≤–∞' => 'city_moscow',
                    'üåä –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' => 'city_spb',
                    'üåÑ –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' => 'city_other',
                ]);
                
                $api->sendMessage(
                    $chatId,
                    "‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n–®–∞–≥ 3/3: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
                    ['parse_mode' => 'HTML', 'reply_markup' => $keyboard]
                );
                echo "  ‚ñ∂ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —à–∞–≥ 2 -> —à–∞–≥ 3 (–≤–æ–∑—Ä–∞—Å—Ç: {$text})\n";
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    if ($update->isCallbackQuery()) {
        $query = $update->callbackQuery;
        $data = $query->data;
        $chatId = $query->message->chat->id;
        $messageId = $query->message->messageId;
        $userId = $query->from->id;
        
        echo "  ‚ñ∂ –ü–æ–ª—É—á–µ–Ω callback: {$data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}\n";
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback
        if (str_starts_with($data, 'rate_')) {
            $rating = (int)str_replace('rate_', '', $data);
            $api->answerCallbackQuery($query->id, ['text' => "–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {$rating} ‚≠ê"]);
            $api->editMessageText(
                $chatId,
                $messageId,
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b>\n\n–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {$rating} ‚≠ê",
                ['parse_mode' => 'HTML']
            );
            $testScenarios['survey'] = true;
            echo "  ‚úÖ –¢–µ—Å—Ç –æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–π–¥–µ–Ω (–æ—Ü–µ–Ω–∫–∞: {$rating})\n";
        } elseif (str_starts_with($data, 'action_')) {
            $action = str_replace('action_', '', $data);
            $api->answerCallbackQuery($query->id, ['text' => "–î–µ–π—Å—Ç–≤–∏–µ {$action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!", 'show_alert' => false]);
            echo "  ‚úÖ Callback –¥–µ–π—Å—Ç–≤–∏–µ {$action} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n";
        } elseif ($data === 'finish_callback_test') {
            $api->answerCallbackQuery($query->id, ['text' => '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!']);
            $api->editMessageText(
                $chatId,
                $messageId,
                '‚úÖ <b>–¢–µ—Å—Ç callback –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>',
                ['parse_mode' => 'HTML']
            );
            $testScenarios['callback_test'] = true;
            echo "  ‚úÖ –¢–µ—Å—Ç callback –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω\n";
        } elseif (str_starts_with($data, 'city_')) {
            $state = $conversationManager->getState($userId);
            if ($state && $state['state'] === 'registration_step_3') {
                $city = match($data) {
                    'city_moscow' => '–ú–æ—Å–∫–≤–∞',
                    'city_spb' => '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                    'city_other' => '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥',
                    default => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                };
                
                $userData = $state['data'] ?? [];
                $userData['city'] = $city;
                
                $api->answerCallbackQuery($query->id, ['text' => "–ì–æ—Ä–æ–¥: {$city}"]);
                $api->editMessageText(
                    $chatId,
                    $messageId,
                    "‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n" .
                    "üë§ –ò–º—è: {$userData['name']}\n" .
                    "üéÇ –í–æ–∑—Ä–∞—Å—Ç: {$userData['age']}\n" .
                    "üè† –ì–æ—Ä–æ–¥: {$city}",
                    ['parse_mode' => 'HTML']
                );
                
                $conversationManager->clearState($userId);
                $testScenarios['registration'] = true;
                echo "  ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " . json_encode($userData) . "\n";
            }
        }
    }
}, 50); // –ú–∞–∫—Å–∏–º—É–º 50 –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —ç—Ç–∞–ø–∞ 2

echo "\n‚úÖ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–Å–ù\n\n";
$logger->info('‚ïê‚ïê‚ïê –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–Å–ù ‚ïê‚ïê‚ïê', $testScenarios);

sleep(2);

// ============================================================================
// –≠–¢–ê–ü 3: –ü–†–û–î–í–ò–ù–£–¢–´–ï –°–¶–ï–ù–ê–†–ò–ò
// ============================================================================

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "–≠–¢–ê–ü 3: –ü–†–û–î–í–ò–ù–£–¢–´–ï –°–¶–ï–ù–ê–†–ò–ò\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$logger->info('‚ïê‚ïê‚ïê –≠–¢–ê–ü 3: –ü–†–û–î–í–ò–ù–£–¢–´–ï –°–¶–ï–ù–ê–†–ò–ò ‚ïê‚ïê‚ïê');

sendNotification(
    $api,
    $config['test_chat_id'],
    '–≠–¢–ê–ü 3: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
    'üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n\n' .
    'üìã –¢–µ—Å—Ç—ã:\n' .
    '‚Ä¢ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n' .
    '‚Ä¢ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä\n' .
    '‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î\n' .
    '‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    '‚ö°'
);

sleep(2);

// --- –¢–µ—Å—Ç 3.1: –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
echo "‚ñ∂ –¢–µ—Å—Ç 3.1: –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...\n";
$logger->info('–¢–µ—Å—Ç 3.1: –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞');

$startTime = microtime(true);
$sentCount = 0;

for ($i = 1; $i <= 10; $i++) {
    try {
        $styles = ['üìù', 'üí¨', 'üì®', '‚úâÔ∏è', 'üìÆ', 'üì¨', 'üì≠', 'üì™', 'üì´', 'üîî'];
        $emoji = $styles[$i - 1];
        $api->sendMessage(
            $config['test_chat_id'],
            "{$emoji} –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{$i}/10"
        );
        $sentCount++;
        echo "  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {$i}/10\n";
    } catch (\Exception $e) {
        echo "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {$i}: {$e->getMessage()}\n";
        $logger->error("–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ #{$i}", ['error' => $e->getMessage()]);
    }
}

$endTime = microtime(true);
$duration = round($endTime - $startTime, 2);

echo "  ‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {$sentCount}/10 –∑–∞ {$duration}—Å\n";
$logger->info('–¢–µ—Å—Ç 3.1 –∑–∞–≤–µ—Ä—à—ë–Ω', ['sent' => $sentCount, 'duration' => $duration]);

sleep(1);

// --- –¢–µ—Å—Ç 3.2: –°–ª–æ–∂–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
echo "‚ñ∂ –¢–µ—Å—Ç 3.2: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä...\n";
$logger->info('–¢–µ—Å—Ç 3.2: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä');

try {
    // –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    $builder = new InlineKeyboardBuilder();
    for ($row = 1; $row <= 5; $row++) {
        for ($col = 1; $col <= 3; $col++) {
            $num = ($row - 1) * 3 + $col;
            $builder->addCallbackButton("–ö–Ω–æ–ø–∫–∞ {$num}", "btn_{$num}");
        }
        $builder->row();
    }
    $largeKeyboard = $builder->build();
    
    $api->sendMessage(
        $config['test_chat_id'],
        'üéõ –ë–æ–ª—å—à–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (15 –∫–Ω–æ–ø–æ–∫)',
        ['reply_markup' => $largeKeyboard]
    );
    echo "  ‚úÖ –ë–æ–ª—å—à–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n";
    
    $logger->info('–¢–µ—Å—Ç 3.2 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ');
} catch (\Exception $e) {
    echo "  ‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    $logger->error('–¢–µ—Å—Ç 3.2 –ø—Ä–æ–≤–∞–ª–µ–Ω', ['error' => $e->getMessage()]);
}

sleep(1);

// --- –¢–µ—Å—Ç 3.3: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
echo "‚ñ∂ –¢–µ—Å—Ç 3.3: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...\n";
$logger->info('–¢–µ—Å—Ç 3.3: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');

try {
    $finalStats = $messageStorage->getStatistics($config['test_chat_id']);
    echo "  ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞\n";
    echo "     –í—Å–µ–≥–æ: {$finalStats['total']}\n";
    echo "     –í—Ö–æ–¥—è—â–∏—Ö: {$finalStats['incoming']}\n";
    echo "     –ò—Å—Ö–æ–¥—è—â–∏—Ö: {$finalStats['outgoing']}\n";
    echo "     –£—Å–ø–µ—à–Ω—ã—Ö: {$finalStats['success']}\n";
    echo "     –û—à–∏–±–æ–∫: {$finalStats['failed']}\n";
    
    $api->sendMessage(
        $config['test_chat_id'],
        formatStats($finalStats),
        ['parse_mode' => 'HTML']
    );
    
    $logger->info('–¢–µ—Å—Ç 3.3 –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ', $finalStats);
} catch (\Exception $e) {
    echo "  ‚ùå –û—à–∏–±–∫–∞: {$e->getMessage()}\n";
    $logger->error('–¢–µ—Å—Ç 3.3 –ø—Ä–æ–≤–∞–ª–µ–Ω', ['error' => $e->getMessage()]);
}

echo "\n‚úÖ –≠–¢–ê–ü 3 –ó–ê–í–ï–†–®–Å–ù\n\n";
$logger->info('‚ïê‚ïê‚ïê –≠–¢–ê–ü 3 –ó–ê–í–ï–†–®–Å–ù ‚ïê‚ïê‚ïê');

sleep(2);

// ============================================================================
// –§–ò–ù–ê–õ: –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢
// ============================================================================

echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "–§–ò–ù–ê–õ: –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$logger->info('‚ïê‚ïê‚ïê –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ò–¢–û–ì–û–í–û–ì–û –û–¢–ß–Å–¢–ê ‚ïê‚ïê‚ïê');

$finalStats = $messageStorage->getStatistics($config['test_chat_id']);

$reportText = "üéâ <b>–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!</b>\n\n";
$reportText .= "‚úÖ <b>–í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ</b>\n\n";
$reportText .= "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
$reportText .= "<b>üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n\n";
$reportText .= "üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$finalStats['total']}\n";
$reportText .= "üì• –í—Ö–æ–¥—è—â–∏—Ö: {$finalStats['incoming']}\n";
$reportText .= "üì§ –ò—Å—Ö–æ–¥—è—â–∏—Ö: {$finalStats['outgoing']}\n";
$reportText .= "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {$finalStats['success']}\n";
$reportText .= "‚ùå –û—à–∏–±–æ–∫: {$finalStats['failed']}\n\n";
$reportText .= "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
$reportText .= "<b>‚úÖ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:</b>\n\n";
$reportText .= "‚úì TelegramAPI\n";
$reportText .= "‚úì PollingHandler\n";
$reportText .= "‚úì MessageStorage\n";
$reportText .= "‚úì ConversationManager\n";
$reportText .= "‚úì MessageHandler\n";
$reportText .= "‚úì TextHandler\n";
$reportText .= "‚úì CallbackQueryHandler\n";
$reportText .= "‚úì MediaHandler\n";
$reportText .= "‚úì InlineKeyboardBuilder\n";
$reportText .= "‚úì ReplyKeyboardBuilder\n";
$reportText .= "‚úì Validator\n";
$reportText .= "‚úì Parser\n\n";
$reportText .= "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
$reportText .= "üéØ <b>–¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:</b>\n\n";
$reportText .= "‚úì –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π\n";
$reportText .= "‚úì Inline –∏ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n";
$reportText .= "‚úì Callback –∑–∞–ø—Ä–æ—Å—ã\n";
$reportText .= "‚úì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n";
$reportText .= "‚úì –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏\n";
$reportText .= "‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π\n";
$reportText .= "‚úì –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞\n";
$reportText .= "‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n";
$reportText .= "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
$reportText .= "üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: MySQL ‚úÖ\n";
$reportText .= "üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω–æ ‚úÖ\n";
$reportText .= "üîÑ –†–µ–∂–∏–º: Polling ‚úÖ\n\n";
$reportText .= "üèÜ <b>–°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–ê!</b>";

sendNotification(
    $api,
    $config['test_chat_id'],
    '–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢',
    $reportText,
    'üèÜ'
);

echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
echo "                   –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û                   \n";
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n";
echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {$finalStats['total']} —Å–æ–æ–±—â–µ–Ω–∏–π\n";
echo "üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: logs/telegram_bot_tests/\n\n";

$logger->info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
$logger->info('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û');
$logger->info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
$logger->info('–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', $finalStats);

echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
