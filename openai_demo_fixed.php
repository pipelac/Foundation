<?php

declare(strict_types=1);

require_once __DIR__ . '/autoload.php';

use App\Component\OpenAi;
use App\Component\Logger;
use App\Component\Exception\OpenAiException;
use App\Component\Exception\OpenAiValidationException;
use App\Component\Exception\OpenAiApiException;

/**
 * Демонстрация исправленного класса OpenAi с полным логированием
 * 
 * Этот пример показывает:
 * 1. Правильную инициализацию класса
 * 2. Корректную обработку ошибок во всех методах
 * 3. Полное логирование всех операций (DEBUG, INFO, ERROR)
 * 4. Работу с разными типами API запросов
 */

echo "╔═══════════════════════════════════════════════════════════════════════════╗\n";
echo "║         ДЕМОНСТРАЦИЯ КЛАССА OpenAi С ПОЛНЫМ ЛОГИРОВАНИЕМ                  ║\n";
echo "╚═══════════════════════════════════════════════════════════════════════════╝\n\n";

// =============================================================================
// Инициализация логгера
// =============================================================================
$logsDir = __DIR__ . '/logs';
if (!is_dir($logsDir)) {
    mkdir($logsDir, 0755, true);
}

$logger = new Logger([
    'directory' => $logsDir,
    'prefix' => 'openai_demo',
    'level' => 'debug', // Включаем все уровни логирования
]);

echo "✓ Логгер инициализирован (уровень: DEBUG)\n";
echo "  Лог файл: {$logsDir}/app.log\n\n";

// =============================================================================
// Конфигурация OpenAI
// =============================================================================

// ВАЖНО: Для реального использования установите настоящий API ключ
$apiKey = getenv('OPENAI_API_KEY') ?: 'sk-test-fake-key-for-demo';

$config = [
    'api_key' => $apiKey,
    'organization' => 'org-test-demo', // Опционально
    'timeout' => 30,
    'retries' => 2,
];

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРИМЕР 1: Создание экземпляра класса с валидацией\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

try {
    $openAi = new OpenAi($config, $logger);
    echo "✓ Экземпляр класса OpenAi создан успешно\n";
    echo "  API ключ: " . substr($apiKey, 0, 15) . "...\n";
    echo "  Organization: {$config['organization']}\n";
    echo "  Timeout: {$config['timeout']}s\n";
    echo "  Retries: {$config['retries']}\n\n";
} catch (OpenAiValidationException $e) {
    echo "✗ Ошибка валидации: {$e->getMessage()}\n\n";
    exit(1);
}

// =============================================================================
// Пример 2: Валидация параметров
// =============================================================================

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРИМЕР 2: Валидация параметров (демонстрация ошибок)\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

// 2.1: Попытка с пустым промптом
try {
    echo "Попытка вызвать text2text с пустым промптом...\n";
    $openAi->text2text('', 'gpt-4o-mini');
    echo "✗ Ошибка: валидация не сработала!\n\n";
} catch (OpenAiValidationException $e) {
    echo "✓ Валидация сработала корректно\n";
    echo "  Сообщение: {$e->getMessage()}\n\n";
}

// 2.2: Попытка с пустой моделью
try {
    echo "Попытка вызвать text2text с пустой моделью...\n";
    $openAi->text2text('Тест', '');
    echo "✗ Ошибка: валидация не сработала!\n\n";
} catch (OpenAiValidationException $e) {
    echo "✓ Валидация сработала корректно\n";
    echo "  Сообщение: {$e->getMessage()}\n\n";
}

// 2.3: Попытка с пустым массивом для embeddings
try {
    echo "Попытка вызвать embeddings с пустым массивом...\n";
    $openAi->embeddings([], 'text-embedding-3-small');
    echo "✗ Ошибка: валидация не сработала!\n\n";
} catch (OpenAiValidationException $e) {
    echo "✓ Валидация сработала корректно\n";
    echo "  Сообщение: {$e->getMessage()}\n\n";
}

// =============================================================================
// Пример 3: Метод text2text с логированием
// =============================================================================

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРИМЕР 3: Метод text2text (текстовая генерация)\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

try {
    echo "Отправка запроса к OpenAI API...\n";
    $response = $openAi->text2text(
        prompt: 'Скажи "Привет, мир!" на русском языке',
        model: 'gpt-4o-mini',
        options: [
            'temperature' => 0.7,
            'max_tokens' => 50,
            'system' => 'Ты - дружелюбный помощник',
        ]
    );
    echo "✓ Запрос выполнен успешно\n";
    echo "  Ответ: {$response}\n";
    echo "  Проверьте лог файл для DEBUG/INFO записей\n\n";
} catch (OpenAiApiException $e) {
    echo "⚠ API ошибка (ожидаемо для тестового ключа)\n";
    echo "  Код: {$e->getStatusCode()}\n";
    echo "  Сообщение: {$e->getMessage()}\n";
    echo "  Проверьте лог файл для ERROR записей\n\n";
} catch (OpenAiException $e) {
    echo "✗ Ошибка OpenAI: {$e->getMessage()}\n\n";
}

// =============================================================================
// Пример 4: Метод text2image с логированием
// =============================================================================

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРИМЕР 4: Метод text2image (генерация изображений)\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

try {
    echo "Отправка запроса на генерацию изображения...\n";
    $imageUrl = $openAi->text2image(
        prompt: 'Красивый закат над океаном в стиле импрессионизма',
        model: 'dall-e-3',
        options: [
            'size' => '1024x1024',
            'quality' => 'standard',
            'style' => 'vivid',
        ]
    );
    echo "✓ Изображение создано\n";
    echo "  URL: {$imageUrl}\n";
    echo "  Проверьте лог файл для DEBUG/INFO записей\n\n";
} catch (OpenAiApiException $e) {
    echo "⚠ API ошибка (ожидаемо для тестового ключа)\n";
    echo "  Код: {$e->getStatusCode()}\n";
    echo "  Проверьте лог файл для ERROR записей\n\n";
} catch (OpenAiException $e) {
    echo "✗ Ошибка OpenAI: {$e->getMessage()}\n\n";
}

// =============================================================================
// Пример 5: Метод image2text с логированием
// =============================================================================

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРИМЕР 5: Метод image2text (распознавание изображений)\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

try {
    echo "Отправка запроса на анализ изображения...\n";
    $description = $openAi->image2text(
        imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg',
        question: 'Опиши это изображение подробно',
        model: 'gpt-4o',
        options: [
            'max_tokens' => 300,
            'detail' => 'high',
        ]
    );
    echo "✓ Изображение проанализировано\n";
    echo "  Описание: " . substr($description, 0, 100) . "...\n";
    echo "  Проверьте лог файл для DEBUG/INFO записей\n\n";
} catch (OpenAiApiException $e) {
    echo "⚠ API ошибка (ожидаемо для тестового ключа)\n";
    echo "  Код: {$e->getStatusCode()}\n";
    echo "  Проверьте лог файл для ERROR записей\n\n";
} catch (OpenAiException $e) {
    echo "✗ Ошибка OpenAI: {$e->getMessage()}\n\n";
}

// =============================================================================
// Пример 6: Метод textStream с логированием (ИСПРАВЛЕНО!)
// =============================================================================

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРИМЕР 6: Метод textStream (потоковая передача) - ИСПРАВЛЕНО!\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

try {
    echo "Отправка streaming запроса...\n";
    echo "Ответ (streaming): ";
    
    $chunks = [];
    $openAi->textStream(
        prompt: 'Напиши короткое стихотворение о весне (2 строки)',
        callback: function (string $chunk) use (&$chunks): void {
            echo $chunk;
            $chunks[] = $chunk;
            flush();
        },
        model: 'gpt-4o-mini',
        options: [
            'temperature' => 0.8,
            'max_tokens' => 100,
        ]
    );
    
    echo "\n\n✓ Streaming завершен\n";
    echo "  Получено чанков: " . count($chunks) . "\n";
    echo "  Проверьте лог файл для DEBUG/INFO записей\n\n";
} catch (OpenAiApiException $e) {
    echo "\n⚠ API ошибка (ожидаемо для тестового ключа)\n";
    echo "  Код: {$e->getStatusCode()}\n";
    echo "  Исключение корректно обработано (ИСПРАВЛЕНО!)\n";
    echo "  Проверьте лог файл для ERROR записей\n\n";
} catch (OpenAiException $e) {
    echo "\n✗ Ошибка OpenAI: {$e->getMessage()}\n\n";
}

// =============================================================================
// Пример 7: Метод embeddings с логированием
// =============================================================================

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРИМЕР 7: Метод embeddings (векторные представления)\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

try {
    echo "Отправка запроса на создание эмбеддингов...\n";
    $embeddings = $openAi->embeddings(
        input: [
            'Машинное обучение - это раздел искусственного интеллекта',
            'Искусственный интеллект меняет мир',
            'Deep learning - это подраздел машинного обучения',
        ],
        model: 'text-embedding-3-small',
        options: ['dimensions' => 512]
    );
    
    echo "✓ Эмбеддинги созданы\n";
    echo "  Количество: " . count($embeddings) . "\n";
    echo "  Размерность: " . count($embeddings[0]) . "\n";
    echo "  Проверьте лог файл для DEBUG/INFO записей\n\n";
} catch (OpenAiApiException $e) {
    echo "⚠ API ошибка (ожидаемо для тестового ключа)\n";
    echo "  Код: {$e->getStatusCode()}\n";
    echo "  Проверьте лог файл для ERROR записей\n\n";
} catch (OpenAiException $e) {
    echo "✗ Ошибка OpenAI: {$e->getMessage()}\n\n";
}

// =============================================================================
// Пример 8: Метод moderation с логированием
// =============================================================================

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРИМЕР 8: Метод moderation (модерация контента)\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

try {
    echo "Отправка запроса на модерацию контента...\n";
    $moderationResult = $openAi->moderation(
        input: 'Это обычный безопасный текст о погоде и природе',
        model: 'text-moderation-latest'
    );
    
    echo "✓ Модерация выполнена\n";
    echo "  Нарушение: " . ($moderationResult['flagged'] ? 'Да' : 'Нет') . "\n";
    echo "  Проверьте лог файл для DEBUG/INFO записей\n\n";
} catch (OpenAiApiException $e) {
    echo "⚠ API ошибка (ожидаемо для тестового ключа)\n";
    echo "  Код: {$e->getStatusCode()}\n";
    echo "  Проверьте лог файл для ERROR записей\n\n";
} catch (OpenAiException $e) {
    echo "✗ Ошибка OpenAI: {$e->getMessage()}\n\n";
}

// =============================================================================
// Итоги
// =============================================================================

echo "═══════════════════════════════════════════════════════════════════════════\n";
echo "ПРОВЕРКА ЛОГОВ\n";
echo "═══════════════════════════════════════════════════════════════════════════\n\n";

$logFile = $logsDir . '/app.log';
if (file_exists($logFile)) {
    $logContent = file_get_contents($logFile);
    
    // Подсчитываем записи
    $debugCount = substr_count($logContent, 'DEBUG Отправка запроса');
    $infoCount = substr_count($logContent, 'INFO Успешный запрос');
    $errorCount = substr_count($logContent, 'ERROR');
    
    echo "✓ Лог файл найден: app.log\n";
    echo "  Размер: " . number_format(strlen($logContent)) . " байт\n";
    echo "  DEBUG записей (отправка): {$debugCount}\n";
    echo "  INFO записей (успех): {$infoCount}\n";
    echo "  ERROR записей: {$errorCount}\n\n";
    
    echo "Последние 20 строк лога:\n";
    echo "─────────────────────────────────────────────────────────────────────────\n";
    $lines = explode("\n", $logContent);
    $lastLines = array_slice($lines, -20);
    foreach ($lastLines as $line) {
        if (trim($line) !== '') {
            echo substr($line, 0, 150) . "\n";
        }
    }
    echo "─────────────────────────────────────────────────────────────────────────\n\n";
} else {
    echo "✗ Лог файл не найден\n\n";
}

echo "╔═══════════════════════════════════════════════════════════════════════════╗\n";
echo "║                        ДЕМОНСТРАЦИЯ ЗАВЕРШЕНА                            ║\n";
echo "║                                                                           ║\n";
echo "║  ✓ Все методы протестированы                                             ║\n";
echo "║  ✓ Валидация параметров работает корректно                               ║\n";
echo "║  ✓ Логирование настроено и функционирует (DEBUG/INFO/ERROR)              ║\n";
echo "║  ✓ Обработка исключений работает правильно                               ║\n";
echo "║  ✓ Исправлена проблема с textStream                                      ║\n";
echo "║                                                                           ║\n";
echo "║  Класс OpenAi готов к использованию!                                     ║\n";
echo "╚═══════════════════════════════════════════════════════════════════════════╝\n";
