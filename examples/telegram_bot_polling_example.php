<?php

declare(strict_types=1);

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PollingHandler –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ü–∏–∫–ª–µ
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
 * - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

require_once __DIR__ . '/../autoload.php';

use App\Component\Http;
use App\Component\Logger;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\PollingHandler;
use App\Component\TelegramBot\Entities\Update;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
$botToken = 'YOUR_BOT_TOKEN';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
$logger = new Logger(['directory' => __DIR__ . '/../logs']);
$http = new Http(['timeout' => 60], $logger);
$api = new TelegramAPI($botToken, $http, $logger);

// –°–æ–∑–¥–∞–Ω–∏–µ PollingHandler
$polling = new PollingHandler($api, $logger);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
$polling
    ->setTimeout(30)         // Long polling timeout: 30 —Å–µ–∫—É–Ω–¥
    ->setLimit(100)          // –ú–∞–∫—Å–∏–º—É–º 100 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ –∑–∞–ø—Ä–æ—Å
    ->setAllowedUpdates([    // –§–∏–ª—å—Ç—Ä —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        'message',
        'callback_query',
    ]);

// –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
$skipped = $polling->skipPendingUpdates();
echo "–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $skipped\n";

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —ç—Ö–æ–º
// ============================================================================

echo "–ó–∞–ø—É—Å–∫ polling (–ü—Ä–∏–º–µ—Ä 1)...\n";

$polling->startPolling(function(Update $update) use ($api) {
    if ($update->isMessage() && $update->message->text) {
        $message = $update->message;
        $api->sendMessage(
            $message->chat->id,
            "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: " . $message->text
        );
    }
}, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

echo "–ü—Ä–∏–º–µ—Ä 1 –∑–∞–≤–µ—Ä—à–µ–Ω\n\n";

// ============================================================================
// –ü–†–ò–ú–ï–† 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
// ============================================================================

echo "–ó–∞–ø—É—Å–∫ polling (–ü—Ä–∏–º–µ—Ä 2)...\n";

// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
$polling->reset();

$polling->startPolling(function(Update $update) use ($api, $polling) {
    if (!$update->isMessage() || !$update->message->text) {
        return;
    }
    
    $message = $update->message;
    $text = $message->text;
    $chatId = $message->chat->id;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (str_starts_with($text, '/')) {
        $command = strtolower(trim($text, '/'));
        
        match($command) {
            'start' => $api->sendMessage($chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ polling."),
            'help' => $api->sendMessage($chatId, "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start\n/help\n/stop"),
            'stop' => function() use ($api, $chatId, $polling) {
                $api->sendMessage($chatId, "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç...");
                $polling->stopPolling();
            },
            default => $api->sendMessage($chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"),
        };
    } else {
        // –≠—Ö–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        $api->sendMessage($chatId, "üìù –≠—Ö–æ: $text");
    }
}, 10); // –ú–∞–∫—Å–∏–º—É–º 10 –∏—Ç–µ—Ä–∞—Ü–∏–π

echo "–ü—Ä–∏–º–µ—Ä 2 –∑–∞–≤–µ—Ä—à–µ–Ω\n\n";

// ============================================================================
// –ü–†–ò–ú–ï–† 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
// ============================================================================

use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;

echo "–ó–∞–ø—É—Å–∫ polling (–ü—Ä–∏–º–µ—Ä 3)...\n";

$polling->reset();

$polling->startPolling(function(Update $update) use ($api) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if ($update->isMessage() && $update->message->text === '/menu') {
        $keyboard = InlineKeyboardBuilder::makeSimple([
            '‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1' => 'option_1',
            'üîî –í–∞—Ä–∏–∞–Ω—Ç 2' => 'option_2',
            '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' => 'settings',
        ]);
        
        $api->sendMessage(
            $update->message->chat->id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            ['reply_markup' => $keyboard]
        );
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    if ($update->isCallbackQuery()) {
        $query = $update->callbackQuery;
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        $api->answerCallbackQuery($query->id, [
            'text' => '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ!',
        ]);
        
        // –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $api->editMessageText(
            $query->message->chat->id,
            $query->message->messageId,
            "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: " . $query->data
        );
    }
}, 5);

echo "–ü—Ä–∏–º–µ—Ä 3 –∑–∞–≤–µ—Ä—à–µ–Ω\n\n";

// ============================================================================
// –ü–†–ò–ú–ï–† 4: –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–±–µ–∑ —Ü–∏–∫–ª–∞)
// ============================================================================

echo "–ü—Ä–∏–º–µ—Ä 4: –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ\n";

$polling->reset();

// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑
$updates = $polling->pollOnce();

echo "–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: " . count($updates) . "\n";

foreach ($updates as $update) {
    echo "  - Update ID: {$update->updateId}\n";
    
    if ($update->isMessage()) {
        echo "    –¢–∏–ø: Message\n";
    } elseif ($update->isCallbackQuery()) {
        echo "    –¢–∏–ø: CallbackQuery\n";
    }
}

echo "\n";

// ============================================================================
// –ü–†–ò–ú–ï–† 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
// ============================================================================

echo "–ü—Ä–∏–º–µ—Ä 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫\n";

$polling->reset();

$polling->startPolling(function(Update $update) use ($api, $logger) {
    try {
        // –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if ($update->isMessage()) {
            $message = $update->message;
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏
            if ($message->text === '/error') {
                throw new Exception('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞');
            }
            
            $api->sendMessage($message->chat->id, "OK");
        }
    } catch (Exception $e) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        $logger->error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', [
            'error' => $e->getMessage(),
            'update_id' => $update->updateId,
        ]);
        
        // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if ($update->isMessage()) {
            $api->sendMessage(
                $update->message->chat->id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"
            );
        }
    }
}, 5);

echo "–ü—Ä–∏–º–µ—Ä 5 –∑–∞–≤–µ—Ä—à–µ–Ω\n\n";

// ============================================================================
// –ü–†–ò–ú–ï–† 6: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
// ============================================================================

echo "–ü—Ä–∏–º–µ—Ä 6: –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏\n";

$polling->reset();
$maxIterations = 3;

for ($i = 0; $i < $maxIterations; $i++) {
    echo "–ò—Ç–µ—Ä–∞—Ü–∏—è " . ($i + 1) . "...\n";
    
    $updates = $polling->getUpdates();
    
    foreach ($updates as $update) {
        // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        echo "  - –û–±—Ä–∞–±–æ—Ç–∫–∞ update {$update->updateId}\n";
        
        if ($update->isMessage() && $update->message->text) {
            $api->sendMessage(
                $update->message->chat->id,
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " . ($i + 1)
            );
        }
    }
    
    echo "  –ü–æ–ª—É—á–µ–Ω–æ: " . count($updates) . " –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n";
}

echo "–ü—Ä–∏–º–µ—Ä 6 –∑–∞–≤–µ—Ä—à–µ–Ω\n\n";

// ============================================================================
// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
// ============================================================================

echo "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n";
echo "  - –¢–µ–∫—É—â–∏–π offset: {$polling->getOffset()}\n";
echo "  - Polling –∞–∫—Ç–∏–≤–µ–Ω: " . ($polling->isPolling() ? '–î–∞' : '–ù–µ—Ç') . "\n";
echo "\n–í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n";
