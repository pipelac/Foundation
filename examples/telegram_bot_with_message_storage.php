<?php

declare(strict_types=1);

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TelegramBot —Å —Å–∏—Å—Ç–µ–º–æ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
 * - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MessageStorage –∫ TelegramAPI
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * - –ù–∞—Å—Ç—Ä–æ–π–∫—É —É—Ä–æ–≤–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è
 */

require_once __DIR__ . '/../autoload.php';

use App\Config\ConfigLoader;
use App\Component\Http;
use App\Component\Logger;
use App\Component\MySQLConnectionFactory;
use App\Component\TelegramBot\Core\MessageStorage;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\WebhookHandler;
use App\Component\TelegramBot\Handlers\MessageHandler;
use App\Component\TelegramBot\Handlers\TextHandler;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
$configDir = __DIR__ . '/../config';

$mysqlConfig = ConfigLoader::load($configDir . '/mysql.json');
$storageConfig = ConfigLoader::load($configDir . '/telegram_bot_message_storage.json');
$telegramConfig = ConfigLoader::load($configDir . '/telegram.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
$logger = new Logger([
    'directory' => __DIR__ . '/../logs',
    'fileName' => 'telegram_bot_with_storage.log',
    'maxFiles' => 7,
]);

$logger->info('=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π ===');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
$http = new Http([
    'timeout' => 30,
    'connect_timeout' => 10,
], $logger);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
try {
    $factory = new MySQLConnectionFactory($mysqlConfig, $logger);
    $db = $factory->getConnection('main');
    $logger->info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
} catch (\Exception $e) {
    $logger->error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', [
        'error' => $e->getMessage(),
    ]);
    die('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ' . $e->getMessage());
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
$messageStorage = new MessageStorage(
    $db,
    $logger,
    $storageConfig['message_storage']
);

if ($messageStorage->isEnabled()) {
    $logger->info('MessageStorage –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', [
        'level' => $storageConfig['message_storage']['storage_level'] ?? 'standard',
    ]);
} else {
    $logger->warning('MessageStorage –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
}

// –°–æ–∑–¥–∞–Ω–∏–µ TelegramAPI —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
$api = new TelegramAPI(
    $telegramConfig['token'],
    $http,
    $logger,
    $messageStorage  // ‚Üê –ü–µ—Ä–µ–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
);

$logger->info('TelegramAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ webhook –∑–∞–ø—Ä–æ—Å
if (!WebhookHandler::isValidWebhookRequest()) {
    $logger->warning('–ü–æ–ª—É—á–µ–Ω –Ω–µ-webhook –∑–∞–ø—Ä–æ—Å');
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∂–∏–º–µ CLI
    echo "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø MessageStorage ===\n\n";
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ (—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    try {
        $botInfo = $api->getMe();
        echo "–ë–æ—Ç: @{$botInfo->username}\n";
        echo "ID: {$botInfo->id}\n\n";
    } catch (\Exception $e) {
        echo "–û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if ($messageStorage->isEnabled()) {
        echo "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===\n\n";
        
        $stats = $messageStorage->getStatistics();
        echo "–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$stats['total']}\n";
        echo "  –í—Ö–æ–¥—è—â–∏—Ö: {$stats['incoming']}\n";
        echo "  –ò—Å—Ö–æ–¥—è—â–∏—Ö: {$stats['outgoing']}\n";
        echo "  –£—Å–ø–µ—à–Ω—ã—Ö: {$stats['success']}\n";
        echo "  –ù–µ—É–¥–∞—á–Ω—ã—Ö: {$stats['failed']}\n\n";
        
        if (!empty($stats['by_type'])) {
            echo "–ü–æ —Ç–∏–ø–∞–º:\n";
            foreach ($stats['by_type'] as $type => $count) {
                echo "  $type: $count\n";
            }
        }
        
        echo "\n";
    }
    
    exit(0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
$webhookHandler = new WebhookHandler($logger);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
$messageHandler = new MessageHandler($api, $logger);
$textHandler = new TextHandler($api, $logger);

try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    $update = $webhookHandler->getUpdate();
    
    // === –°–û–•–†–ê–ù–ï–ù–ò–ï –í–•–û–î–Ø–©–ò–• –°–û–û–ë–©–ï–ù–ò–ô ===
    if ($update->message) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if ($messageStorage->isEnabled()) {
            $storageId = $messageStorage->storeIncoming($update->message);
            
            if ($storageId) {
                $logger->info('–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î', [
                    'storage_id' => $storageId,
                    'message_id' => $update->message->messageId,
                    'chat_id' => $update->message->chat->id,
                ]);
            }
        }
    }
    
    // === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    $textHandler->handleCommand($update, 'start', function ($message) use ($api, $messageStorage) {
        // –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        $response = $api->sendMessage(
            $message->chat->id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n" .
            "–°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: " . ($messageStorage->isEnabled() ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ") . "\n\n" .
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" .
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" .
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n" .
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
        );
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ë–î
    });
    
    // –ö–æ–º–∞–Ω–¥–∞ /stats
    $textHandler->handleCommand($update, 'stats', function ($message) use ($api, $messageStorage) {
        if (!$messageStorage->isEnabled()) {
            $api->sendMessage(
                $message->chat->id,
                "‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            );
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $stats = $messageStorage->getStatistics();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        $chatStats = $messageStorage->getStatistics($message->chat->id);
        
        $text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n";
        
        $text .= "*–û–±—â–∞—è:*\n";
        $text .= "–í—Å–µ–≥–æ: {$stats['total']}\n";
        $text .= "–í—Ö–æ–¥—è—â–∏—Ö: {$stats['incoming']}\n";
        $text .= "–ò—Å—Ö–æ–¥—è—â–∏—Ö: {$stats['outgoing']}\n";
        $text .= "–£—Å–ø–µ—à–Ω—ã—Ö: {$stats['success']}\n";
        $text .= "–ù–µ—É–¥–∞—á–Ω—ã—Ö: {$stats['failed']}\n\n";
        
        $text .= "*–≠—Ç–æ—Ç —á–∞—Ç:*\n";
        $text .= "–í—Å–µ–≥–æ: {$chatStats['total']}\n";
        $text .= "–í—Ö–æ–¥—è—â–∏—Ö: {$chatStats['incoming']}\n";
        $text .= "–ò—Å—Ö–æ–¥—è—â–∏—Ö: {$chatStats['outgoing']}\n\n";
        
        if (!empty($chatStats['by_type'])) {
            $text .= "*–ü–æ —Ç–∏–ø–∞–º:*\n";
            foreach ($chatStats['by_type'] as $type => $count) {
                $text .= "‚Ä¢ $type: $count\n";
            }
        }
        
        $api->sendMessage(
            $message->chat->id,
            $text,
            ['parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN]
        );
    });
    
    // –ö–æ–º–∞–Ω–¥–∞ /info
    $textHandler->handleCommand($update, 'info', function ($message) use ($api, $messageStorage, $storageConfig) {
        $text = "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è*\n\n";
        
        $text .= "–°—Ç–∞—Ç—É—Å: " . ($messageStorage->isEnabled() ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ") . "\n";
        
        if ($messageStorage->isEnabled()) {
            $level = $storageConfig['message_storage']['storage_level'] ?? 'standard';
            $text .= "–£—Ä–æ–≤–µ–Ω—å: `$level`\n";
            
            $text .= "–í—Ö–æ–¥—è—â–∏–µ: " . 
                ($storageConfig['message_storage']['store_incoming'] ?? true ? "‚úÖ" : "‚ùå") . "\n";
            $text .= "–ò—Å—Ö–æ–¥—è—â–∏–µ: " . 
                ($storageConfig['message_storage']['store_outgoing'] ?? true ? "‚úÖ" : "‚ùå") . "\n";
            
            $retentionDays = $storageConfig['message_storage']['retention_days'] ?? 0;
            $text .= "–•—Ä–∞–Ω–µ–Ω–∏–µ: " . ($retentionDays > 0 ? "$retentionDays –¥–Ω–µ–π" : "‚àû –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ") . "\n\n";
            
            $text .= "*–£—Ä–æ–≤–Ω–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:*\n";
            $text .= "‚Ä¢ `minimal` - –±–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n";
            $text .= "‚Ä¢ `standard` - —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã\n";
            $text .= "‚Ä¢ `extended` - –º–µ–¥–∏–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\n";
            $text .= "‚Ä¢ `full` - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API\n";
        }
        
        $api->sendMessage(
            $message->chat->id,
            $text,
            ['parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN]
        );
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    $textHandler->handlePlainText($update, function ($message, $text) use ($api, $messageStorage) {
        $response = "–ü–æ–ª—É—á–µ–Ω–æ: " . mb_substr($text, 0, 50);
        
        if ($messageStorage->isEnabled()) {
            $response .= "\n\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î";
        }
        
        $api->sendMessage($message->chat->id, $response);
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ webhook
    $webhookHandler->sendResponse();
    
} catch (\Exception $e) {
    $logger->error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook', [
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString(),
    ]);
    
    $webhookHandler->sendResponse();
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ–±—ã—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ cron)
if ($messageStorage->isEnabled()) {
    $retentionDays = $storageConfig['message_storage']['retention_days'] ?? 0;
    
    if ($retentionDays > 0 && rand(1, 100) === 1) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 1%
        $deleted = $messageStorage->cleanupOldMessages();
        
        if ($deleted > 0) {
            $logger->info("–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: $deleted");
        }
    }
}

$logger->info('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===');
