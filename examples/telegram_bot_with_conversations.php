<?php

declare(strict_types=1);

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TelegramBot —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–∏–∞–ª–æ–≥–æ–≤ (ConversationManager)
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
 * - –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * - –û–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
 * - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
 * - –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * - –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

require_once __DIR__ . '/../autoload.php';

use App\Config\ConfigLoader;
use App\Component\Http;
use App\Component\Logger;
use App\Component\MySQLConnectionFactory;
use App\Component\TelegramBot\Core\ConversationManager;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\WebhookHandler;
use App\Component\TelegramBot\Handlers\CallbackQueryHandler;
use App\Component\TelegramBot\Handlers\MessageHandler;
use App\Component\TelegramBot\Handlers\TextHandler;
use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
$configDir = __DIR__ . '/../config';

$mysqlConfig = ConfigLoader::load($configDir . '/mysql.json');
$conversationsConfig = ConfigLoader::load($configDir . '/telegram_bot_conversations.json');
$telegramConfig = ConfigLoader::load($configDir . '/telegram.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
$logger = new Logger([
    'directory' => __DIR__ . '/../logs',
    'fileName' => 'telegram_bot_conversations.log',
    'maxFiles' => 7,
]);

$logger->info('=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–∏–∞–ª–æ–≥–æ–≤ ===');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
$http = new Http([
    'timeout' => 30,
    'connect_timeout' => 10,
], $logger);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
try {
    $factory = new MySQLConnectionFactory($mysqlConfig, $logger);
    $db = $factory->getConnection('main');
    $logger->info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
} catch (\Exception $e) {
    $logger->error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', ['error' => $e->getMessage()]);
    die('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ' . $e->getMessage());
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
$conversationManager = new ConversationManager(
    $db,
    $logger,
    $conversationsConfig['conversations']
);

if ($conversationManager->isEnabled()) {
    $logger->info('ConversationManager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
} else {
    $logger->warning('ConversationManager –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
}

// –°–æ–∑–¥–∞–Ω–∏–µ TelegramAPI
$api = new TelegramAPI(
    $telegramConfig['token'],
    $http,
    $logger
);

$logger->info('TelegramAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ webhook –∑–∞–ø—Ä–æ—Å
if (!WebhookHandler::isValidWebhookRequest()) {
    $logger->warning('–ü–æ–ª—É—á–µ–Ω –Ω–µ-webhook –∑–∞–ø—Ä–æ—Å');
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∂–∏–º–µ CLI
    echo "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ConversationManager ===\n\n";
    
    if ($conversationManager->isEnabled()) {
        echo "–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n";
        
        $stats = $conversationManager->getStatistics();
        echo "–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {$stats['total']}\n";
        
        if (!empty($stats['by_state'])) {
            echo "–ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:\n";
            foreach ($stats['by_state'] as $state => $count) {
                echo "  - $state: $count\n";
            }
        }
    } else {
        echo "–°—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n";
    }
    
    exit(0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
$webhookHandler = new WebhookHandler($logger);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
$messageHandler = new MessageHandler($api, $logger);
$textHandler = new TextHandler($api, $logger);
$callbackHandler = new CallbackQueryHandler($api, $logger);

try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    $update = $webhookHandler->getUpdate();
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if ($update->message && $update->message->from) {
        $conversationManager->saveUser(
            $update->message->from->id,
            $update->message->from->firstName,
            $update->message->from->username ?? null,
            $update->message->from->lastName ?? null
        );
    } elseif ($update->callbackQuery && $update->callbackQuery->from) {
        $conversationManager->saveUser(
            $update->callbackQuery->from->id,
            $update->callbackQuery->from->firstName,
            $update->callbackQuery->from->username ?? null,
            $update->callbackQuery->from->lastName ?? null
        );
    }
    
    // ===========================
    // –ö–û–ú–ê–ù–î–ê /adduser - –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    // ===========================
    $textHandler->handleCommand($update, 'adduser', function ($message) use (
        $api,
        $conversationManager,
        $logger
    ) {
        $chatId = $message->chat->id;
        $userId = $message->from->id;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        $keyboard = (new InlineKeyboardBuilder())
            ->addCallbackButton('üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'reg:user')
            ->row()
            ->addCallbackButton('üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'reg:admin')
            ->row()
            ->addCallbackButton('üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', 'reg:moderator')
            ->row()
            ->addCallbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'reg:cancel')
            ->build();
        
        $sentMessage = $api->sendMessage(
            $chatId,
            "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n" .
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            [
                'parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN,
                'reply_markup' => $keyboard,
            ]
        );
        
        // –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        $conversationManager->startConversation(
            $chatId,
            $userId,
            'awaiting_type_selection',
            [],
            $sentMessage->messageId
        );
        
        $logger->info('–ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', [
            'chat_id' => $chatId,
            'user_id' => $userId,
            'message_id' => $sentMessage->messageId,
        ]);
    });
    
    // ===========================
    // –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –¢–ò–ü–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    // ===========================
    $callbackHandler->handleAction($update, 'reg', function ($query, $params) use (
        $api,
        $callbackHandler,
        $conversationManager,
        $logger
    ) {
        $chatId = $query->message->chat->id;
        $userId = $query->from->id;
        $action = $params[0] ?? null;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        $conversation = $conversationManager->getConversation($chatId, $userId);
        
        if (!$conversation) {
            $callbackHandler->answerWithText($query, '‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /adduser');
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if ($action === 'cancel') {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if ($conversation['message_id']) {
                try {
                    $api->deleteMessage($chatId, $conversation['message_id']);
                } catch (\Exception $e) {
                    $logger->warning('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', [
                        'message_id' => $conversation['message_id'],
                        'error' => $e->getMessage(),
                    ]);
                }
            }
            
            $conversationManager->endConversation($chatId, $userId);
            $callbackHandler->answerWithText($query, '‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            
            $api->sendMessage($chatId, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        if ($conversation['state'] === 'awaiting_type_selection') {
            $typeLabels = [
                'user' => 'üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'admin' => 'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'moderator' => 'üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
            ];
            
            $selectedType = $action;
            $typeLabel = $typeLabels[$selectedType] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if ($conversation['message_id']) {
                try {
                    $api->deleteMessage($chatId, $conversation['message_id']);
                } catch (\Exception $e) {
                    $logger->warning('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', [
                        'message_id' => $conversation['message_id'],
                    ]);
                }
            }
            
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            $callbackHandler->answerWithText($query, "‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: $typeLabel");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $api->sendMessage(
                $chatId,
                "‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: *$typeLabel*\n\n" .
                "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–∏–º—è* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                ['parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN]
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            $conversationManager->updateConversation(
                $chatId,
                $userId,
                'awaiting_name',
                ['type' => $selectedType, 'type_label' => $typeLabel],
                null
            );
            
            $logger->info('–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω', [
                'chat_id' => $chatId,
                'user_id' => $userId,
                'type' => $selectedType,
            ]);
        }
    });
    
    // ===========================
    // –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ò–ú–ï–ù–ò
    // ===========================
    $textHandler->handlePlainText($update, function ($message, $text) use (
        $api,
        $conversationManager,
        $logger
    ) {
        $chatId = $message->chat->id;
        $userId = $message->from->id;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        $conversation = $conversationManager->getConversation($chatId, $userId);
        
        if (!$conversation) {
            // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
        if ($conversation['state'] === 'awaiting_name') {
            $name = trim($text);
            
            if (empty($name)) {
                $api->sendMessage($chatId, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            $api->sendMessage(
                $chatId,
                "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *$name*\n\n" .
                "üìß –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *email* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                ['parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN]
            );
            
            $conversationManager->updateConversation(
                $chatId,
                $userId,
                'awaiting_email',
                ['name' => $name]
            );
            
            $logger->info('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–µ–Ω–æ', [
                'chat_id' => $chatId,
                'user_id' => $userId,
                'name' => $name,
            ]);
            
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–æ–∂–∏–¥–∞–Ω–∏–µ email"
        if ($conversation['state'] === 'awaiting_email') {
            $email = trim($text);
            
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $api->sendMessage($chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            $keyboard = (new InlineKeyboardBuilder())
                ->addCallbackButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm:yes')
                ->addCallbackButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'confirm:no')
                ->build();
            
            $data = $conversation['data'];
            $summaryText = "üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n\n" .
                "–¢–∏–ø: {$data['type_label']}\n" .
                "–ò–º—è: {$data['name']}\n" .
                "Email: $email\n\n" .
                "–í—Å–µ –≤–µ—Ä–Ω–æ?";
            
            $sentMessage = $api->sendMessage(
                $chatId,
                $summaryText,
                [
                    'parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN,
                    'reply_markup' => $keyboard,
                ]
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            $conversationManager->updateConversation(
                $chatId,
                $userId,
                'awaiting_confirmation',
                ['email' => $email],
                $sentMessage->messageId
            );
            
            $logger->info('Email –≤–≤–µ–¥–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', [
                'chat_id' => $chatId,
                'user_id' => $userId,
                'email' => $email,
            ]);
            
            return;
        }
    });
    
    // ===========================
    // –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
    // ===========================
    $callbackHandler->handleAction($update, 'confirm', function ($query, $params) use (
        $api,
        $callbackHandler,
        $conversationManager,
        $logger,
        $db
    ) {
        $chatId = $query->message->chat->id;
        $userId = $query->from->id;
        $action = $params[0] ?? null;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
        $conversation = $conversationManager->getConversation($chatId, $userId);
        
        if (!$conversation || $conversation['state'] !== 'awaiting_confirmation') {
            $callbackHandler->answerWithText($query, '‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª');
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if ($conversation['message_id']) {
            try {
                $api->deleteMessage($chatId, $conversation['message_id']);
            } catch (\Exception $e) {
                $logger->warning('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', [
                    'message_id' => $conversation['message_id'],
                ]);
            }
        }
        
        if ($action === 'yes') {
            $data = $conversation['data'];
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            // –ü—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                $tableExists = $db->querySingle("SHOW TABLES LIKE 'app_users'");
                
                if ($tableExists) {
                    $db->insert('app_users', [
                        'name' => $data['name'],
                        'email' => $data['email'],
                        'type' => $data['type'],
                        'telegram_user_id' => $userId,
                        'created_at' => date('Y-m-d H:i:s'),
                    ]);
                }
            } catch (\Exception $e) {
                $logger->warning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ app_users (—Ç–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)', [
                    'error' => $e->getMessage(),
                ]);
            }
            
            $callbackHandler->answerWithText($query, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!');
            
            $api->sendMessage(
                $chatId,
                "‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*\n\n" .
                "–¢–∏–ø: {$data['type_label']}\n" .
                "–ò–º—è: {$data['name']}\n" .
                "Email: {$data['email']}",
                ['parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN]
            );
            
            $logger->info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', [
                'chat_id' => $chatId,
                'data' => $data,
            ]);
        } else {
            $callbackHandler->answerWithText($query, '‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            
            $api->sendMessage($chatId, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /adduser");
            
            $logger->info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', [
                'chat_id' => $chatId,
                'user_id' => $userId,
            ]);
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        $conversationManager->endConversation($chatId, $userId);
    });
    
    // ===========================
    // –ö–û–ú–ê–ù–î–ê /start
    // ===========================
    $textHandler->handleCommand($update, 'start', function ($message) use ($api) {
        $api->sendMessage(
            $message->chat->id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–∏–∞–ª–æ–≥–æ–≤.\n\n" .
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" .
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" .
            "/adduser - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" .
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤\n" .
            "/help - –ü–æ–º–æ—â—å"
        );
    });
    
    // ===========================
    // –ö–û–ú–ê–ù–î–ê /stats
    // ===========================
    $textHandler->handleCommand($update, 'stats', function ($message) use (
        $api,
        $conversationManager
    ) {
        if (!$conversationManager->isEnabled()) {
            $api->sendMessage($message->chat->id, "‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω");
            return;
        }
        
        $stats = $conversationManager->getStatistics();
        
        $text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤*\n\n";
        $text .= "–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {$stats['total']}\n\n";
        
        if (!empty($stats['by_state'])) {
            $text .= "*–ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:*\n";
            foreach ($stats['by_state'] as $state => $count) {
                $text .= "‚Ä¢ $state: $count\n";
            }
        }
        
        $api->sendMessage(
            $message->chat->id,
            $text,
            ['parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN]
        );
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ webhook
    $webhookHandler->sendResponse();
    
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 5%)
    if ($conversationManager->isEnabled() && rand(1, 20) === 1) {
        $deleted = $conversationManager->cleanupExpiredConversations();
        if ($deleted > 0) {
            $logger->info("–û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤: $deleted");
        }
    }
    
} catch (\Exception $e) {
    $logger->error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook', [
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString(),
    ]);
    
    $webhookHandler->sendResponse();
}

$logger->info('=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===');
