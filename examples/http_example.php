<?php

declare(strict_types=1);

require_once __DIR__ . '/../autoload.php';

use App\Component\Http;
use App\Component\Logger;

/**
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ Http
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–ª–∞—Å—Å–∞ –Ω–∞ production —É—Ä–æ–≤–Ω–µ
 */

echo "=== –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ Http ===\n\n";

// –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
echo "1. –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:\n";
$logger = new Logger([
    'directory' => __DIR__ . '/../logs',
    'file_name' => 'http.log',
    'max_files' => 5,
    'max_file_size' => 10, // –ú–ë
]);

$http = new Http([
    'base_uri' => 'https://jsonplaceholder.typicode.com',
    'timeout' => 30.0,
    'connect_timeout' => 5.0,
    'verify' => true,
    'retries' => 3,
    'headers' => [
        'User-Agent' => 'PHP-HTTP-Client/1.0',
        'Accept' => 'application/json',
    ],
], $logger);

echo "‚úì HTTP –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω\n\n";

// –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä
echo "2. GET –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥-—Ö–µ–ª–ø–µ—Ä:\n";
try {
    $response = $http->get('/posts/1');
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
    $data = json_decode((string)$response->getBody(), true);
    echo "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞: " . ($data['title'] ?? 'N/A') . "\n";
    echo "‚úì GET –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\InvalidArgumentException $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " . $e->getMessage() . "\n\n";
} catch (\RuntimeException $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 3: POST –∑–∞–ø—Ä–æ—Å —Å JSON –¥–∞–Ω–Ω—ã–º–∏
echo "3. POST –∑–∞–ø—Ä–æ—Å —Å JSON –¥–∞–Ω–Ω—ã–º–∏:\n";
try {
    $response = $http->post('/posts', [
        'json' => [
            'title' => '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç',
            'body' => '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
            'userId' => 1,
        ],
    ]);
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
    $data = json_decode((string)$response->getBody(), true);
    echo "ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: " . ($data['id'] ?? 'N/A') . "\n";
    echo "‚úì POST –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 4: PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
echo "4. PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n";
try {
    $response = $http->put('/posts/1', [
        'json' => [
            'id' => 1,
            'title' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
            'body' => '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
            'userId' => 1,
        ],
    ]);
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
    echo "‚úì PUT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 5: PATCH –∑–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
echo "5. PATCH –∑–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n";
try {
    $response = $http->patch('/posts/1', [
        'json' => [
            'title' => '–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
        ],
    ]);
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
    echo "‚úì PATCH –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 6: DELETE –∑–∞–ø—Ä–æ—Å
echo "6. DELETE –∑–∞–ø—Ä–æ—Å:\n";
try {
    $response = $http->delete('/posts/1');
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
    echo "‚úì DELETE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 7: HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
echo "7. HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–∞:\n";
try {
    $response = $http->head('/posts/1');
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
    echo "Content-Type: " . $response->getHeaderLine('Content-Type') . "\n";
    echo "‚úì HEAD –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 8: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è –º–µ—Ç–æ–¥–æ–≤
echo "8. –ó–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç:\n";
try {
    $response = $http->request(Http::METHOD_GET, '/posts', [
        'query' => [
            'userId' => 1,
            '_limit' => 5,
        ],
    ]);
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
    $posts = json_decode((string)$response->getBody(), true);
    echo "–ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: " . count($posts) . "\n";
    echo "‚úì –ó–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
echo "9. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n";
try {
    $response = $http->get(''); // –ü—É—Å—Ç–æ–π URI
    echo "–≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è\n";
} catch (\InvalidArgumentException $e) {
    echo "‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " . $e->getMessage() . "\n\n";
} catch (\Exception $e) {
    echo "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 10: –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
echo "10. –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö (Stream):\n";
try {
    $chunks = 0;
    $totalBytes = 0;
    
    $http->requestStream(
        Http::METHOD_GET,
        '/posts',
        function (string $chunk) use (&$chunks, &$totalBytes): void {
            $chunks++;
            $totalBytes += strlen($chunk);
        }
    );
    
    echo "–ü–æ–ª—É—á–µ–Ω–æ —á–∞–Ω–∫–æ–≤: $chunks\n";
    echo "–í—Å–µ–≥–æ –±–∞–π—Ç: $totalBytes\n";
    echo "‚úì –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 11: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ Guzzle –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
echo "11. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ Guzzle –∫–ª–∏–µ–Ω—Ç–∞:\n";
try {
    $guzzleClient = $http->getClient();
    echo "–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: " . get_class($guzzleClient) . "\n";
    echo "‚úì –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 12: –†–∞–±–æ—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
echo "12. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è retry –ª–æ–≥–∏–∫–∏ (—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ö–æ—Å—Ç–æ–º):\n";
$httpWithRetry = new Http([
    'base_uri' => 'http://non-existent-host-12345.invalid',
    'timeout' => 2.0,
    'connect_timeout' => 1.0,
    'retries' => 3,
], $logger);

try {
    $response = $httpWithRetry->get('/test');
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
} catch (\RuntimeException $e) {
    echo "‚úì –û–∂–∏–¥–∞–µ–º–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (retry —Å—Ä–∞–±–æ—Ç–∞–ª 3 —Ä–∞–∑–∞)\n";
    echo "–°–æ–æ–±—â–µ–Ω–∏–µ: " . $e->getMessage() . "\n\n";
}

// –ü—Ä–∏–º–µ—Ä 13: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
echo "13. –ó–∞–ø—Ä–æ—Å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n";
try {
    $response = $http->get('/comments', [
        'headers' => [
            'X-Custom-Header' => 'CustomValue',
            'X-Request-ID' => uniqid('req_', true),
        ],
        'query' => [
            'postId' => 1,
            '_limit' => 3,
        ],
    ]);
    
    echo "–°—Ç–∞—Ç—É—Å: " . $response->getStatusCode() . "\n";
    $comments = json_decode((string)$response->getBody(), true);
    echo "–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: " . count($comments) . "\n";
    echo "‚úì –ó–∞–ø—Ä–æ—Å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (\Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n\n";
}

echo "=== –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ===\n";
echo "\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ —Ñ–∞–π–ª: " . __DIR__ . "/../logs/http.log\n";
echo "–í –Ω—ë–º –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ retry –ø–æ–ø—ã—Ç–∫–∏.\n";
