<?php

declare(strict_types=1);

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã TelegramBot
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–º–∞–Ω–¥, callback
 * - –†–∞–±–æ—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
 * - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
 */

require_once __DIR__ . '/../autoload.php';

use App\Component\Config\ConfigLoader;
use App\Component\Http;
use App\Component\Logger;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\WebhookHandler;
use App\Component\TelegramBot\Handlers\CallbackQueryHandler;
use App\Component\TelegramBot\Handlers\MessageHandler;
use App\Component\TelegramBot\Handlers\TextHandler;
use App\Component\TelegramBot\Handlers\MediaHandler;
use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;
use App\Component\TelegramBot\Keyboards\ReplyKeyboardBuilder;
use App\Component\TelegramBot\Utils\FileDownloader;
use App\Component\TelegramBot\Utils\Parser;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
$configLoader = new ConfigLoader(__DIR__ . '/../config');
$config = $configLoader->load('telegram.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
$logger = new Logger([
    'directory' => __DIR__ . '/../logs',
    'fileName' => 'telegram_bot.log',
    'maxFiles' => 7,
    'maxFileSize' => 10 * 1024 * 1024,
]);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
$http = new Http([
    'timeout' => 30,
    'connect_timeout' => 10,
], $logger);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramAPI
$api = new TelegramAPI(
    token: $config['token'],
    http: $http,
    logger: $logger
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
$fileDownloader = new FileDownloader(
    token: $config['token'],
    http: $http,
    logger: $logger
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
$messageHandler = new MessageHandler($api, $logger);
$textHandler = new TextHandler($api, $logger);
$callbackHandler = new CallbackQueryHandler($api, $logger);
$mediaHandler = new MediaHandler($api, $fileDownloader, $logger);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
$webhookHandler = new WebhookHandler($logger);

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if (isset($config['webhook_secret'])) {
    $webhookHandler->setSecretToken($config['webhook_secret']);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ webhook –∑–∞–ø—Ä–æ—Å
if (!WebhookHandler::isValidWebhookRequest()) {
    http_response_code(400);
    exit('Invalid request');
}

try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    $update = $webhookHandler->getUpdate();

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===

    // –ö–æ–º–∞–Ω–¥–∞ /start
    $textHandler->handleCommand($update, 'start', function ($message, $args) use ($api) {
        $keyboard = InlineKeyboardBuilder::makeSimple([
            'üìö –ü–æ–º–æ—â—å' => 'help',
            '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' => 'settings',
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' => 'stats',
        ]);

        $api->sendMessage(
            $message->chat->id,
            "üëã –ü—Ä–∏–≤–µ—Ç, {$message->from->firstName}!\n\n" .
            "–Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.\n" .
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            ['reply_markup' => $keyboard]
        );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    $textHandler->handleCommand($update, 'help', function ($message) use ($api) {
        $helpText = "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n" .
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" .
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n" .
            "/keyboard - –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n" .
            "/photo - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n" .
            "/poll - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n" .
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ";

        $api->sendMessage(
            $message->chat->id,
            $helpText,
            ['parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN]
        );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /keyboard - –ø–æ–∫–∞–∑–∞—Ç—å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    $textHandler->handleCommand($update, 'keyboard', function ($message) use ($api) {
        $keyboard = ReplyKeyboardBuilder::makeGrid(
            ['üì± –ö–æ–Ω—Ç–∞–∫—Ç', 'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '‚ùå –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É'],
            columns: 2,
            resize: true
        );

        $api->sendMessage(
            $message->chat->id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            ['reply_markup' => $keyboard]
        );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /photo - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    $textHandler->handleCommand($update, 'photo', function ($message) use ($api) {
        $keyboard = (new InlineKeyboardBuilder())
            ->addCallbackButton('‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è', 'like:photo')
            ->addCallbackButton('üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', 'dislike:photo')
            ->row()
            ->addUrlButton('üîó –ò—Å—Ç–æ—á–Ω–∏–∫', 'https://example.com')
            ->build();

        $api->sendPhoto(
            $message->chat->id,
            'https://picsum.photos/800/600',
            [
                'caption' => 'üñºÔ∏è –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                'reply_markup' => $keyboard,
            ]
        );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /poll - —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å
    $textHandler->handleCommand($update, 'poll', function ($message) use ($api) {
        $api->sendPoll(
            $message->chat->id,
            '–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ª—É—á—à–∏–π?',
            ['PHP', 'Python', 'JavaScript', 'Go', 'Rust'],
            [
                'is_anonymous' => true,
                'allows_multiple_answers' => false,
            ]
        );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    $textHandler->handleCommand($update, 'info', function ($message) use ($api) {
        $botInfo = $api->getMe();
        
        $infoText = "ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:*\n\n" .
            "ID: `{$botInfo->id}`\n" .
            "Username: @{$botInfo->username}\n" .
            "–ò–º—è: {$botInfo->firstName}\n" .
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ inline: " . ($botInfo->supportsInlineQueries ? '–î–∞' : '–ù–µ—Ç');

        $api->sendMessage(
            $message->chat->id,
            $infoText,
            ['parse_mode' => TelegramAPI::PARSE_MODE_MARKDOWN]
        );
    });

    // === –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK QUERY ===

    // Callback: help
    $callbackHandler->handleAction($update, 'help', function ($query) use ($callbackHandler) {
        $helpText = "üìö –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É.\n\n" .
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.";

        $callbackHandler->answerAndEdit($query, $helpText);
    });

    // Callback: settings
    $callbackHandler->handleAction($update, 'settings', function ($query) use ($callbackHandler) {
        $keyboard = (new InlineKeyboardBuilder())
            ->addCallbackButton('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'setting:notifications')
            ->addCallbackButton('üåç –Ø–∑—ã–∫', 'setting:language')
            ->row()
            ->addCallbackButton('üîô –ù–∞–∑–∞–¥', 'back:main')
            ->build();

        $callbackHandler->answerAndEdit(
            $query,
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
            ['reply_markup' => $keyboard]
        );
    });

    // Callback: stats
    $callbackHandler->handleAction($update, 'stats', function ($query) use ($callbackHandler) {
        $statsText = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n" .
            "–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 1,234\n" .
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 567\n" .
            "–ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 890";

        $callbackHandler->answerAndEdit($query, $statsText);
    });

    // Callback: like/dislike
    $callbackHandler->handleAction($update, 'like', function ($query, $params) use ($callbackHandler) {
        $callbackHandler->answerWithText($query, '‚ù§Ô∏è –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!');
    });

    $callbackHandler->handleAction($update, 'dislike', function ($query, $params) use ($callbackHandler) {
        $callbackHandler->answerWithText($query, 'üëé –ñ–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å');
    });

    // === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ "–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
    $textHandler->handleContains($update, '–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', function ($message) use ($api) {
        $api->sendMessage(
            $message->chat->id,
            '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞',
            ['reply_markup' => ReplyKeyboardBuilder::remove()]
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    $textHandler->handlePlainText($update, function ($message, $text) use ($api, $textHandler) {
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        $mentions = $textHandler->extractMentions($message);
        $hashtags = $textHandler->extractHashtags($message);
        $urls = $textHandler->extractUrls($message);

        $response = "–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n";
        
        if (!empty($mentions)) {
            $response .= "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è: " . implode(', ', $mentions) . "\n";
        }
        
        if (!empty($hashtags)) {
            $response .= "–•–µ—à—Ç–µ–≥–∏: #" . implode(', #', $hashtags) . "\n";
        }
        
        if (!empty($urls)) {
            $response .= "–°—Å—ã–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: " . count($urls) . "\n";
        }

        $api->sendMessage($message->chat->id, $response);
    });

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê ===

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    $messageHandler->handlePhoto($update, function ($message) use ($api, $mediaHandler) {
        $photo = $mediaHandler->getBestPhoto($message);
        
        if ($photo) {
            $fileSize = $photo->getFileSizeInMB();
            $response = "üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ!\n\n" .
                "–†–∞–∑–º–µ—Ä: {$fileSize} –ú–ë\n" .
                "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {$photo->width}x{$photo->height}";

            $api->sendMessage($message->chat->id, $response);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    $messageHandler->handleDocument($update, function ($message) use ($api, $mediaHandler) {
        $document = $message->document;
        
        if ($document) {
            $response = "üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç!\n\n" .
                "–ò–º—è —Ñ–∞–π–ª–∞: {$document->fileName}\n" .
                "–†–∞–∑–º–µ—Ä: {$document->getFileSizeInMB()} –ú–ë\n" .
                "MIME: {$document->mimeType}";

            // –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
            $savedPath = $mediaHandler->downloadDocument(
                $message,
                __DIR__ . '/../uploads/' . $document->fileName
            );

            if ($savedPath) {
                $response .= "\n\n‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " . basename($savedPath);
            }

            $api->sendMessage($message->chat->id, $response);
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ webhook
    $webhookHandler->sendResponse();

} catch (\Exception $e) {
    $logger->error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook', [
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString(),
    ]);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    $webhookHandler->sendResponse();
}
