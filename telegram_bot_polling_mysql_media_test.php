<?php

declare(strict_types=1);

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç TelegramBot –≤ —Ä–µ–∂–∏–º–µ Polling —Å MySQL –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * - –†–∞–±–æ—Ç—É –≤ —Ä–µ–∂–∏–º–µ Long Polling
 * - –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ MySQL (MessageStorage)
 * - –†–∞–±–æ—Ç—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ (ConversationManager)
 * - –û—Ç–ø—Ä–∞–≤–∫—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
 * - –û–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –∏ callback-–∫–Ω–æ–ø–æ–∫
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */

require_once __DIR__ . '/autoload.php';

use App\Config\ConfigLoader;
use App\Component\Http;
use App\Component\Logger;
use App\Component\MySQL;
use App\Component\Telegram;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\PollingHandler;
use App\Component\TelegramBot\Core\MessageStorage;
use App\Component\TelegramBot\Core\ConversationManager;
use App\Component\TelegramBot\Entities\Update;
use App\Component\TelegramBot\Handlers\MessageHandler;
use App\Component\TelegramBot\Handlers\TextHandler;
use App\Component\TelegramBot\Handlers\CallbackQueryHandler;
use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;
use App\Component\TelegramBot\Keyboards\ReplyKeyboardBuilder;

// ============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================

$botToken = '8327641497:AAFTHb3xSTpP3Q6Peg8-OK4nTWTfF7iMWfI';
$testChatId = 366442475;
$testTimeout = 30; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
// ============================================================================

echo "=== –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM BOT ===\n";
echo "–†–µ–∂–∏–º: Polling (Long Polling)\n";
echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: MySQL\n";
echo "–î–∞—Ç–∞: " . date('Y-m-d H:i:s') . "\n\n";

// –õ–æ–≥–≥–µ—Ä
$logger = new Logger([
    'directory' => __DIR__ . '/logs',
    'fileName' => 'telegram_bot_polling_test.log',
    'maxFiles' => 7,
]);

$logger->info('=== –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');

// HTTP –∫–ª–∏–µ–Ω—Ç
$http = new Http(['timeout' => 60], $logger);

// ============================================================================
// –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î
// ============================================================================

echo "üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL...\n";

try {
    $db = new MySQL([
        'host' => 'localhost',
        'port' => 3306,
        'database' => 'telegram_bot_test',
        'username' => 'telegram_bot',
        'password' => 'telegram_bot_pass',
        'charset' => 'utf8mb4',
    ], $logger);
    
    $logger->info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n";
} catch (Exception $e) {
    $logger->error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL', ['error' => $e->getMessage()]);
    echo "‚ùå –û–®–ò–ë–ö–ê: {$e->getMessage()}\n";
    exit(1);
}

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –•–†–ê–ù–ò–õ–ò–©
// ============================================================================

echo "üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageStorage...\n";

$messageStorage = new MessageStorage($db, $logger, [
    'enabled' => true,
    'storage_level' => 'full',
    'store_incoming' => true,
    'store_outgoing' => true,
    'exclude_methods' => ['getMe'],
    'retention_days' => 0,
    'auto_create_table' => true,
]);

if ($messageStorage->isEnabled()) {
    $logger->info('‚úÖ MessageStorage –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    echo "‚úÖ MessageStorage –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—É—Ä–æ–≤–µ–Ω—å: full)\n";
} else {
    echo "‚ùå MessageStorage –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n";
}

echo "\nüìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConversationManager...\n";

$conversationManager = new ConversationManager($db, $logger, [
    'enabled' => true,
    'timeout' => 3600,
    'auto_create_tables' => true,
]);

if ($conversationManager->isEnabled()) {
    $logger->info('‚úÖ ConversationManager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    echo "‚úÖ ConversationManager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n";
} else {
    echo "‚ùå ConversationManager –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n";
}

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM API –ò POLLING
// ============================================================================

echo "ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramAPI...\n";

$api = new TelegramAPI($botToken, $http, $logger, $messageStorage);
$polling = new PollingHandler($api, $logger);

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
$sendNotification = function(string $message) use ($api, $testChatId, $logger): void {
    try {
        $api->sendMessage($testChatId, "ü§ñ <b>TEST BOT</b>\n\n$message", ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]);
    } catch (Exception $e) {
        $logger->warning('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', ['error' => $e->getMessage()]);
    }
};

$polling
    ->setTimeout($testTimeout)
    ->setLimit(100)
    ->setAllowedUpdates(['message', 'callback_query']);

$logger->info('‚úÖ TelegramAPI –∏ PollingHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
echo "‚úÖ TelegramAPI –∏ PollingHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n";

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
try {
    $botInfo = $api->getMe();
    echo "üë§ –ë–æ—Ç: @{$botInfo->username} (ID: {$botInfo->id})\n\n";
    $logger->info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', [
        'username' => $botInfo->username,
        'id' => $botInfo->id,
    ]);
} catch (Exception $e) {
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n\n";
}

// –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
echo "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n";
$skipped = $polling->skipPendingUpdates();
echo "–ü—Ä–æ–ø—É—â–µ–Ω–æ: $skipped –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n\n";
$logger->info("–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $skipped");

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
// ============================================================================

$messageHandler = new MessageHandler($api, $logger);
$textHandler = new TextHandler($api, $logger);
$callbackHandler = new CallbackQueryHandler($api, $logger);

// ============================================================================
// –°–ß–ï–¢–ß–ò–ö–ò –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
// ============================================================================

$stats = [
    'messages_received' => 0,
    'commands_processed' => 0,
    'media_received' => 0,
    'callbacks_processed' => 0,
    'errors' => 0,
];

// ============================================================================
// –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

echo "üéØ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n";
echo str_repeat('=', 80) . "\n\n";

$sendNotification(
    "üéØ <b>–ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø</b>\n\n" .
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" .
    "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n" .
    "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" .
    "/stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n" .
    "/edit - –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n" .
    "/media - –¢–µ—Å—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤\n" .
    "/keyboard - –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä\n" .
    "/conversation - –¢–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞\n" .
    "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç\n\n" .
    "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: {$testTimeout} —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É"
);

$logger->info('–ó–∞–ø—É—Å–∫ Polling Handler');

// ============================================================================
// –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò
// ============================================================================

$polling->startPolling(function(Update $update) use (
    $api,
    $logger,
    $sendNotification,
    $testChatId,
    $messageStorage,
    $conversationManager,
    $textHandler,
    $callbackHandler,
    $polling,
    &$stats
) {
    try {
        $stats['messages_received']++;
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ($update->message && $update->message->from) {
            $conversationManager->saveUser(
                $update->message->from->id,
                $update->message->from->firstName,
                $update->message->from->username ?? null,
                $update->message->from->lastName ?? null
            );
        }
        
        // ====================================================================
        // –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î
        // ====================================================================
        
        // /start
        $textHandler->handleCommand($update, 'start', function($message) use ($api, $logger, $sendNotification, $testChatId, &$stats) {
            $stats['commands_processed']++;
            $logger->info('–ö–æ–º–∞–Ω–¥–∞ /start', ['chat_id' => $message->chat->id]);
            
            $text = "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç</b>\n\n" .
                    "–†–µ–∂–∏–º: <code>Polling + MySQL + Media</code>\n\n" .
                    "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" .
                    "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n" .
                    "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n" .
                    "/stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n" .
                    "/edit - –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n" .
                    "/media - –¢–µ—Å—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤\n" .
                    "/keyboard - –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä\n" .
                    "/conversation - –¢–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞\n" .
                    "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç\n\n" .
                    "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!";
            
            $api->sendMessage($message->chat->id, $text, ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]);
            $sendNotification("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞");
        });
        
        // /info
        $textHandler->handleCommand($update, 'info', function($message) use ($api, $logger, $messageStorage, $conversationManager, &$stats) {
            $stats['commands_processed']++;
            $logger->info('–ö–æ–º–∞–Ω–¥–∞ /info', ['chat_id' => $message->chat->id]);
            
            $storageStats = $messageStorage->getStatistics();
            $convStats = $conversationManager->getStatistics();
            
            $text = "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n" .
                    "üìä <b>MessageStorage:</b>\n" .
                    "–°—Ç–∞—Ç—É—Å: " . ($messageStorage->isEnabled() ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω") . "\n" .
                    "–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$storageStats['total']}\n" .
                    "–í—Ö–æ–¥—è—â–∏—Ö: {$storageStats['incoming']}\n" .
                    "–ò—Å—Ö–æ–¥—è—â–∏—Ö: {$storageStats['outgoing']}\n\n" .
                    "üí¨ <b>ConversationManager:</b>\n" .
                    "–°—Ç–∞—Ç—É—Å: " . ($conversationManager->isEnabled() ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω") . "\n" .
                    "–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {$convStats['total']}\n\n" .
                    "üìà <b>–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:</b>\n" .
                    "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$stats['messages_received']}\n" .
                    "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {$stats['commands_processed']}\n" .
                    "–ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞: {$stats['media_received']}\n" .
                    "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ callback: {$stats['callbacks_processed']}";
            
            $api->sendMessage($message->chat->id, $text, ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]);
        });
        
        // /stat
        $textHandler->handleCommand($update, 'stat', function($message) use ($api, $logger, $messageStorage, $sendNotification, $testChatId, &$stats) {
            $stats['commands_processed']++;
            $logger->info('–ö–æ–º–∞–Ω–¥–∞ /stat', ['chat_id' => $message->chat->id]);
            
            $allStats = $messageStorage->getStatistics();
            $chatStats = $messageStorage->getStatistics($message->chat->id);
            
            $text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n" .
                    "<b>–û–±—â–∞—è:</b>\n" .
                    "–í—Å–µ–≥–æ: {$allStats['total']}\n" .
                    "–í—Ö–æ–¥—è—â–∏—Ö: {$allStats['incoming']}\n" .
                    "–ò—Å—Ö–æ–¥—è—â–∏—Ö: {$allStats['outgoing']}\n" .
                    "–£—Å–ø–µ—à–Ω—ã—Ö: {$allStats['success']}\n" .
                    "–ù–µ—É–¥–∞—á–Ω—ã—Ö: {$allStats['failed']}\n\n" .
                    "<b>–≠—Ç–æ—Ç —á–∞—Ç:</b>\n" .
                    "–í—Å–µ–≥–æ: {$chatStats['total']}\n" .
                    "–í—Ö–æ–¥—è—â–∏—Ö: {$chatStats['incoming']}\n" .
                    "–ò—Å—Ö–æ–¥—è—â–∏—Ö: {$chatStats['outgoing']}";
            
            if (!empty($chatStats['by_type'])) {
                $text .= "\n\n<b>–ü–æ —Ç–∏–ø–∞–º:</b>\n";
                foreach ($chatStats['by_type'] as $type => $count) {
                    $text .= "‚Ä¢ $type: $count\n";
                }
            }
            
            $api->sendMessage($message->chat->id, $text, ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]);
        });
        
        // /edit - –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        $textHandler->handleCommand($update, 'edit', function($message) use ($api, $logger, $sendNotification, $testChatId, &$stats) {
            $stats['commands_processed']++;
            $logger->info('–ö–æ–º–∞–Ω–¥–∞ /edit', ['chat_id' => $message->chat->id]);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            $sent = $api->sendMessage($message->chat->id, "‚è≥ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ...");
            
            // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            sleep(2);
            
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            $api->editMessageText(
                $message->chat->id,
                $sent->messageId,
                "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n–ü—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã.",
                ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
            );
            
        });
        
        // /media - –ó–∞–ø—Ä–æ—Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        $textHandler->handleCommand($update, 'media', function($message) use ($api, $logger, $sendNotification, $testChatId, &$stats) {
            $stats['commands_processed']++;
            $logger->info('–ö–æ–º–∞–Ω–¥–∞ /media', ['chat_id' => $message->chat->id]);
            
            $keyboard = InlineKeyboardBuilder::make()
                ->addCallbackButton('üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', 'media:photo')
                ->row()
                ->addCallbackButton('üé¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ', 'media:video')
                ->row()
                ->addCallbackButton('üéµ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ', 'media:audio')
                ->row()
                ->addCallbackButton('üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', 'media:document')
                ->row()
                ->addCallbackButton('üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë —Å—Ä–∞–∑—É', 'media:all')
                ->build();
            
            $text = "üìé <b>–¢–µ—Å—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤</b>\n\n" .
                    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n" .
                    "‚Ä¢ –§–æ—Ç–æ\n" .
                    "‚Ä¢ –í–∏–¥–µ–æ\n" .
                    "‚Ä¢ –ê—É–¥–∏–æ\n" .
                    "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n" .
                    "‚Ä¢ –í—Å—ë —Å—Ä–∞–∑—É\n\n" .
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é!";
            
            $api->sendMessage($message->chat->id, $text, [
                'parse_mode' => TelegramAPI::PARSE_MODE_HTML,
                'reply_markup' => $keyboard
            ]);
            
        });
        
        // /keyboard - –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        $textHandler->handleCommand($update, 'keyboard', function($message) use ($api, $logger, $sendNotification, $testChatId, &$stats) {
            $stats['commands_processed']++;
            $logger->info('–ö–æ–º–∞–Ω–¥–∞ /keyboard', ['chat_id' => $message->chat->id]);
            
            // Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            $inlineKeyboard = InlineKeyboardBuilder::make()
                ->addCallbackButton('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1', 'option:1')
                ->addCallbackButton('‚≠ê –í–∞—Ä–∏–∞–Ω—Ç 2', 'option:2')
                ->row()
                ->addCallbackButton('üîî –í–∞—Ä–∏–∞–Ω—Ç 3', 'option:3')
                ->addCallbackButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'option:settings')
                ->row()
                ->addUrlButton('üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', 'https://telegram.org')
                ->build();
            
            $api->sendMessage($message->chat->id, 
                "‚å®Ô∏è <b>Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", 
                [
                    'parse_mode' => TelegramAPI::PARSE_MODE_HTML,
                    'reply_markup' => $inlineKeyboard
                ]
            );
            
            // Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            $replyKeyboard = ReplyKeyboardBuilder::make()
                ->addButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                ->addButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                ->row()
                ->addButton('üéØ –¢–µ—Å—Ç')
                ->addButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
                ->resizeKeyboard()
                ->build();
            
            $api->sendMessage($message->chat->id,
                "‚å®Ô∏è <b>Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞</b>\n\n–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.",
                [
                    'parse_mode' => TelegramAPI::PARSE_MODE_HTML,
                    'reply_markup' => $replyKeyboard
                ]
            );
            
        });
        
        // /conversation - –¢–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        $textHandler->handleCommand($update, 'conversation', function($message) use (
            $api,
            $logger,
            $conversationManager,
            $sendNotification,
            $testChatId,
            &$stats
        ) {
            $stats['commands_processed']++;
            $logger->info('–ö–æ–º–∞–Ω–¥–∞ /conversation', ['chat_id' => $message->chat->id]);
            
            $keyboard = InlineKeyboardBuilder::make()
                ->addCallbackButton('üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'conv:user')
                ->row()
                ->addCallbackButton('üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'conv:admin')
                ->row()
                ->addCallbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'conv:cancel')
                ->build();
            
            $sent = $api->sendMessage($message->chat->id,
                "üí¨ <b>–¢–µ—Å—Ç –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞</b>\n\n" .
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                [
                    'parse_mode' => TelegramAPI::PARSE_MODE_HTML,
                    'reply_markup' => $keyboard
                ]
            );
            
            // –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
            $conversationManager->startConversation(
                $message->chat->id,
                $message->from->id,
                'awaiting_type',
                [],
                $sent->messageId
            );
            
        });
        
        // /stop
        $textHandler->handleCommand($update, 'stop', function($message) use ($api, $logger, $polling, $sendNotification, $testChatId, &$stats) {
            $stats['commands_processed']++;
            $logger->info('–ö–æ–º–∞–Ω–¥–∞ /stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞', ['chat_id' => $message->chat->id]);
            
            $api->sendMessage($message->chat->id, 
                "üõë <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...</b>\n\n" .
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.",
                ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
            );
            
            $polling->stopPolling();
        });
        
        // ====================================================================
        // –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK –ó–ê–ü–†–û–°–û–í
        // ====================================================================
        
        if ($update->isCallbackQuery()) {
            $stats['callbacks_processed']++;
            $query = $update->callbackQuery;
            $logger->info('–ü–æ–ª—É—á–µ–Ω callback', ['data' => $query->data]);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–¥–∏–∞
            $callbackHandler->handleAction($update, 'media', function($query, $params) use ($api, $logger, $sendNotification, $testChatId) {
                $action = $params[0] ?? null;
                
                $api->answerCallbackQuery($query->id, ['text' => "‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."]);
                
                $api->sendMessage($query->message->chat->id,
                    "üìé –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>$action</b>\n\n" .
                    "‚ö†Ô∏è –í –¥–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.\n" .
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –º–µ–¥–∏–∞ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!",
                    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                );
                
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π
            $callbackHandler->handleAction($update, 'option', function($query, $params) use ($api, $logger, $sendNotification, $testChatId) {
                $option = $params[0] ?? null;
                
                $api->answerCallbackQuery($query->id, ['text' => "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: $option"]);
                
                $api->editMessageText(
                    $query->message->chat->id,
                    $query->message->messageId,
                    "‚úÖ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b> $option\n\n–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                );
                
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
            $callbackHandler->handleAction($update, 'conv', function($query, $params) use (
                $api,
                $logger,
                $conversationManager,
                $sendNotification,
                $testChatId
            ) {
                $action = $params[0] ?? null;
                $chatId = $query->message->chat->id;
                $userId = $query->from->id;
                
                $conversation = $conversationManager->getConversation($chatId, $userId);
                
                if (!$conversation) {
                    $api->answerCallbackQuery($query->id, ['text' => '‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω']);
                    return;
                }
                
                if ($action === 'cancel') {
                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if ($conversation['message_id']) {
                        try {
                            $api->deleteMessage($chatId, $conversation['message_id']);
                        } catch (Exception $e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                        }
                    }
                    
                    $conversationManager->endConversation($chatId, $userId);
                    $api->answerCallbackQuery($query->id, ['text' => '‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω']);
                    $api->sendMessage($chatId, "‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.");
                    
                    return;
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
                if ($conversation['state'] === 'awaiting_type') {
                    $typeLabels = [
                        'user' => 'üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        'admin' => 'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    ];
                    
                    $selectedType = $action;
                    $typeLabel = $typeLabels[$selectedType] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
                    
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if ($conversation['message_id']) {
                        try {
                            $api->deleteMessage($chatId, $conversation['message_id']);
                        } catch (Exception $e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                        }
                    }
                    
                    $api->answerCallbackQuery($query->id, ['text' => "‚úÖ –í—ã–±—Ä–∞–Ω: $typeLabel"]);
                    
                    $api->sendMessage($chatId,
                        "‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: <b>$typeLabel</b>\n\n" .
                        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–∏–º—è</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                    );
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    $conversationManager->updateConversation(
                        $chatId,
                        $userId,
                        'awaiting_name',
                        ['type' => $selectedType, 'type_label' => $typeLabel],
                        null
                    );
                    
                }
            });
        }
        
        // ====================================================================
        // –û–ë–†–ê–ë–û–¢–ö–ê –î–ò–ê–õ–û–ì–û–í (–í–í–û–î –¢–ï–ö–°–¢–ê)
        // ====================================================================
        
        if ($update->isMessage() && $update->message->text && !str_starts_with($update->message->text, '/')) {
            $message = $update->message;
            $conversation = $conversationManager->getConversation($message->chat->id, $message->from->id);
            
            if ($conversation) {
                $text = trim($message->text);
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
                if ($conversation['state'] === 'awaiting_name') {
                    if (empty($text)) {
                        $api->sendMessage($message->chat->id, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                        return;
                    }
                    
                    $api->sendMessage($message->chat->id,
                        "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>$text</b>\n\n" .
                        "üìß –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>email</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                    );
                    
                    $conversationManager->updateConversation(
                        $message->chat->id,
                        $message->from->id,
                        'awaiting_email',
                        ['name' => $text]
                    );
                    
                    return;
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
                if ($conversation['state'] === 'awaiting_email') {
                    if (!filter_var($text, FILTER_VALIDATE_EMAIL)) {
                        $api->sendMessage($message->chat->id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
                        return;
                    }
                    
                    $data = $conversation['data'];
                    
                    $keyboard = InlineKeyboardBuilder::make()
                        ->addCallbackButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm:yes')
                        ->addCallbackButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'confirm:no')
                        ->build();
                    
                    $summaryText = "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n" .
                        "–¢–∏–ø: {$data['type_label']}\n" .
                        "–ò–º—è: {$data['name']}\n" .
                        "Email: $text\n\n" .
                        "–í—Å–µ –≤–µ—Ä–Ω–æ?";
                    
                    $sent = $api->sendMessage($message->chat->id, $summaryText, [
                        'parse_mode' => TelegramAPI::PARSE_MODE_HTML,
                        'reply_markup' => $keyboard
                    ]);
                    
                    $conversationManager->updateConversation(
                        $message->chat->id,
                        $message->from->id,
                        'awaiting_confirmation',
                        ['email' => $text],
                        $sent->messageId
                    );
                    
                    return;
                }
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        $callbackHandler->handleAction($update, 'confirm', function($query, $params) use (
            $api,
            $logger,
            $conversationManager,
            $sendNotification,
            $testChatId
        ) {
            $action = $params[0] ?? null;
            $chatId = $query->message->chat->id;
            $userId = $query->from->id;
            
            $conversation = $conversationManager->getConversation($chatId, $userId);
            
            if (!$conversation || $conversation['state'] !== 'awaiting_confirmation') {
                $api->answerCallbackQuery($query->id, ['text' => '‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω']);
                return;
            }
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if ($conversation['message_id']) {
                try {
                    $api->deleteMessage($chatId, $conversation['message_id']);
                } catch (Exception $e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                }
            }
            
            if ($action === 'yes') {
                $data = $conversation['data'];
                
                $api->answerCallbackQuery($query->id, ['text' => '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!']);
                
                $api->sendMessage($chatId,
                    "‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n" .
                    "–¢–∏–ø: {$data['type_label']}\n" .
                    "–ò–º—è: {$data['name']}\n" .
                    "Email: {$data['email']}",
                    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                );
                
                $logger->info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥', ['data' => $data]);
            } else {
                $api->answerCallbackQuery($query->id, ['text' => '‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞']);
                $api->sendMessage($chatId, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /conversation");
                
            }
            
            $conversationManager->endConversation($chatId, $userId);
        });
        
        // ====================================================================
        // –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê–§–ê–ô–õ–û–í
        // ====================================================================
        
        if ($update->isMessage()) {
            $message = $update->message;
            $hasMedia = false;
            $mediaTypes = [];
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
            if ($message->hasPhoto()) {
                $hasMedia = true;
                $mediaTypes[] = 'photo';
                $stats['media_received']++;
                
                $photo = $message->getBestPhoto();
                $logger->info('–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ', [
                    'chat_id' => $message->chat->id,
                    'file_id' => $photo->fileId,
                    'file_size' => $photo->fileSize ?? 0,
                    'width' => $photo->width ?? 0,
                    'height' => $photo->height ?? 0,
                ]);
                
                // –î—É–±–ª–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ
                $api->sendPhoto($message->chat->id, $photo->fileId, [
                    'caption' => "üì∑ <b>–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î!</b>\n\n" .
                                 "File ID: <code>{$photo->fileId}</code>\n" .
                                 "–†–∞–∑–º–µ—Ä: " . ($photo->fileSize ? round($photo->fileSize / 1024, 2) . ' KB' : 'N/A'),
                    'parse_mode' => TelegramAPI::PARSE_MODE_HTML
                ]);
                
            }
            
            if ($message->hasVideo()) {
                $hasMedia = true;
                $mediaTypes[] = 'video';
                $stats['media_received']++;
                
                $video = $message->video;
                $logger->info('–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ', [
                    'chat_id' => $message->chat->id,
                    'file_id' => $video->fileId,
                    'file_size' => $video->fileSize ?? 0,
                    'duration' => $video->duration ?? 0,
                ]);
                
                // –î—É–±–ª–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ
                $api->sendVideo($message->chat->id, $video->fileId, [
                    'caption' => "üé¨ <b>–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î!</b>\n\n" .
                                 "File ID: <code>{$video->fileId}</code>\n" .
                                 "–†–∞–∑–º–µ—Ä: " . ($video->fileSize ? round($video->fileSize / 1024, 2) . ' KB' : 'N/A') . "\n" .
                                 "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " . ($video->duration ?? 0) . " —Å–µ–∫",
                    'parse_mode' => TelegramAPI::PARSE_MODE_HTML
                ]);
                
            }
            
            if ($message->hasAudio()) {
                $hasMedia = true;
                $mediaTypes[] = 'audio';
                $stats['media_received']++;
                
                $audio = $message->audio;
                $logger->info('–ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ', [
                    'chat_id' => $message->chat->id,
                    'file_id' => $audio->fileId,
                    'file_size' => $audio->fileSize ?? 0,
                    'duration' => $audio->duration ?? 0,
                ]);
                
                // –î—É–±–ª–∏—Ä—É–µ–º –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ
                $api->sendAudio($message->chat->id, $audio->fileId, [
                    'caption' => "üéµ <b>–ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î!</b>\n\n" .
                                 "File ID: <code>{$audio->fileId}</code>\n" .
                                 "–†–∞–∑–º–µ—Ä: " . ($audio->fileSize ? round($audio->fileSize / 1024, 2) . ' KB' : 'N/A') . "\n" .
                                 "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " . ($audio->duration ?? 0) . " —Å–µ–∫",
                    'parse_mode' => TelegramAPI::PARSE_MODE_HTML
                ]);
                
            }
            
            if ($message->hasDocument()) {
                $hasMedia = true;
                $mediaTypes[] = 'document';
                $stats['media_received']++;
                
                $document = $message->document;
                $logger->info('–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç', [
                    'chat_id' => $message->chat->id,
                    'file_id' => $document->fileId,
                    'file_name' => $document->fileName ?? 'N/A',
                    'file_size' => $document->fileSize ?? 0,
                ]);
                
                // –î—É–±–ª–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ
                $api->sendDocument($message->chat->id, $document->fileId, [
                    'caption' => "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î!</b>\n\n" .
                                 "–ò–º—è: " . ($document->fileName ?? 'N/A') . "\n" .
                                 "File ID: <code>{$document->fileId}</code>\n" .
                                 "–†–∞–∑–º–µ—Ä: " . ($document->fileSize ? round($document->fileSize / 1024, 2) . ' KB' : 'N/A'),
                    'parse_mode' => TelegramAPI::PARSE_MODE_HTML
                ]);
                
            }
            
            if ($message->hasVoice()) {
                $hasMedia = true;
                $mediaTypes[] = 'voice';
                $stats['media_received']++;
                
                $voice = $message->voice;
                $logger->info('–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', [
                    'chat_id' => $message->chat->id,
                    'file_id' => $voice->fileId,
                    'duration' => $voice->duration ?? 0,
                ]);
                
                $api->sendMessage($message->chat->id,
                    "üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î!</b>\n\n" .
                    "File ID: <code>{$voice->fileId}</code>\n" .
                    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " . ($voice->duration ?? 0) . " —Å–µ–∫",
                    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                );
                
            }
            
            if ($hasMedia) {
                $logger->info('–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î', [
                    'types' => $mediaTypes,
                    'count' => count($mediaTypes)
                ]);
            }
        }
        
        // ====================================================================
        // –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–û–ì–û –¢–ï–ö–°–¢–ê
        // ====================================================================
        
        $textHandler->handlePlainText($update, function($message, $text) use ($api, $logger, $conversationManager) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            $conversation = $conversationManager->getConversation($message->chat->id, $message->from->id);
            
            if (!$conversation) {
                // –≠—Ö–æ —Ç–µ–∫—Å—Ç–∞
                $logger->info('–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç', ['chat_id' => $message->chat->id, 'text' => mb_substr($text, 0, 50)]);
                
                $api->sendMessage($message->chat->id,
                    "üí¨ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: <i>" . htmlspecialchars($text) . "</i>\n\n" .
                    "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î!",
                    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                );
            }
        });
        
    } catch (Exception $e) {
        $stats['errors']++;
        $logger->error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
        ]);
        
        echo "‚ùå –û–®–ò–ë–ö–ê: {$e->getMessage()}\n";
        
        if ($update->isMessage()) {
            try {
                $api->sendMessage($update->message->chat->id, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n–û—à–∏–±–∫–∞: " . $e->getMessage()
                );
            } catch (Exception $ex) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            }
        }
    }
});

// ============================================================================
// –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
// ============================================================================

echo "\n" . str_repeat('=', 80) . "\n";
echo "üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û\n\n";

$logger->info('=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===', $stats);

// –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
echo "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n";
echo "  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$stats['messages_received']}\n";
echo "  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {$stats['commands_processed']}\n";
echo "  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞: {$stats['media_received']}\n";
echo "  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ callback: {$stats['callbacks_processed']}\n";
echo "  ‚Ä¢ –û—à–∏–±–æ–∫: {$stats['errors']}\n\n";

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
$dbStats = $messageStorage->getStatistics();
echo "üì¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–î (MessageStorage):\n";
echo "  ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$dbStats['total']}\n";
echo "  ‚Ä¢ –í—Ö–æ–¥—è—â–∏—Ö: {$dbStats['incoming']}\n";
echo "  ‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏—Ö: {$dbStats['outgoing']}\n";
echo "  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {$dbStats['success']}\n";
echo "  ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {$dbStats['failed']}\n";

if (!empty($dbStats['by_type'])) {
    echo "\n  –ü–æ —Ç–∏–ø–∞–º:\n";
    foreach ($dbStats['by_type'] as $type => $count) {
        echo "    - $type: $count\n";
    }
}

$convStats = $conversationManager->getStatistics();
echo "\nüí¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–î (ConversationManager):\n";
echo "  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {$convStats['total']}\n";

if (!empty($convStats['by_state'])) {
    echo "\n  –ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:\n";
    foreach ($convStats['by_state'] as $state => $count) {
        echo "    - $state: $count\n";
    }
}

echo "\n";

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
$finalMessage = "üèÅ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n" .
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n" .
                "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$stats['messages_received']}\n" .
                "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {$stats['commands_processed']}\n" .
                "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞: {$stats['media_received']}\n" .
                "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ callback: {$stats['callbacks_processed']}\n" .
                "‚Ä¢ –û—à–∏–±–æ–∫: {$stats['errors']}\n\n" .
                "üì¶ <b>–ë–î:</b>\n" .
                "‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$dbStats['total']}\n" .
                "‚Ä¢ –í—Ö–æ–¥—è—â–∏—Ö: {$dbStats['incoming']}\n" .
                "‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏—Ö: {$dbStats['outgoing']}\n\n" .
                "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MySQL!";


// ============================================================================
// –î–ê–ú–ü –ë–î
// ============================================================================

echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–æ–≤ –ë–î...\n";

$dumpDir = __DIR__ . '/mysql';
if (!is_dir($dumpDir)) {
    mkdir($dumpDir, 0755, true);
}

// –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –¥–∞–º–ø–∞
$tables = [
    'telegram_bot_messages',
    'telegram_bot_conversations',
    'telegram_bot_users',
];

foreach ($tables as $table) {
    try {
        $dumpFile = $dumpDir . '/' . $table . '_' . date('Ymd_His') . '.sql';
        $command = sprintf(
            'mysqldump -u telegram_bot -ptelegram_bot_pass telegram_bot_test %s > %s 2>&1',
            escapeshellarg($table),
            escapeshellarg($dumpFile)
        );
        
        exec($command, $output, $returnCode);
        
        if ($returnCode === 0 && file_exists($dumpFile)) {
            $size = filesize($dumpFile);
            echo "  ‚úÖ $table: " . round($size / 1024, 2) . " KB\n";
            $logger->info("–î–∞–º–ø —Ç–∞–±–ª–∏—Ü—ã $table —Å–æ–∑–¥–∞–Ω", ['file' => $dumpFile, 'size' => $size]);
        } else {
            echo "  ‚ö†Ô∏è $table: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø\n";
        }
    } catch (Exception $e) {
        echo "  ‚ùå $table: {$e->getMessage()}\n";
    }
}

echo "\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!\n";
echo "–õ–æ–≥–∏: " . __DIR__ . "/logs/\n";
echo "–î–∞–º–ø—ã –ë–î: $dumpDir/\n\n";

$logger->info('=== –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û ===');
