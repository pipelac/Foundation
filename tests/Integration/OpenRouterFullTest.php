<?php

declare(strict_types=1);

require_once __DIR__ . '/../../autoload.php';

use App\Component\OpenRouter;
use App\Component\OpenRouterMetrics;
use App\Component\Logger;
use App\Component\Exception\OpenRouter\OpenRouterException;
use App\Component\Exception\OpenRouter\OpenRouterApiException;
use App\Component\Exception\OpenRouter\OpenRouterValidationException;

/**
 * –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ OpenRouter –∏ OpenRouterMetrics
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
 * –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ª–∏–º–∏—Ç $1).
 */
class OpenRouterFullTest
{
    private OpenRouter $openRouter;
    private OpenRouterMetrics $metrics;
    private Logger $logger;
    private array $results = [];
    private float $estimatedCost = 0.0;
    private string $logDirectory;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–µ—Å—Ç–∞
     *
     * @param string $apiKey API –∫–ª—é—á OpenRouter
     */
    public function __construct(string $apiKey)
    {
        $this->logDirectory = __DIR__ . '/../../logs_openrouter_test';
        
        if (!is_dir($this->logDirectory)) {
            mkdir($this->logDirectory, 0755, true);
        }

        $this->logger = new Logger([
            'directory' => $this->logDirectory,
            'file_name' => 'openrouter_full_test.log',
            'max_files' => 3,
        ]);

        $config = [
            'api_key' => $apiKey,
            'app_name' => 'OpenRouterFullTestSuite',
            'timeout' => 60,
            'retries' => 2,
        ];

        $this->openRouter = new OpenRouter($config, $this->logger);
        $this->metrics = new OpenRouterMetrics($config, $this->logger);

        $this->logInfo('=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===');
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
     */
    public function runAllTests(): void
    {
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
        echo "‚ïë  –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ OpenRouter –ò OpenRouterMetrics      ‚ïë\n";
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –±–∞–ª–∞–Ω—Å
        $this->testMetricsGetKeyInfo();
        $this->testMetricsGetBalance();
        $this->testMetricsGetUsageStats();
        $this->testMetricsGetRateLimits();
        $this->testMetricsGetAccountStatus();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        $this->testMetricsGetModels();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—É—é, –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        // GPT-3.5-Turbo —Å—Ç–æ–∏—Ç $0.0005 –∑–∞ 1M prompt tokens –∏ $0.0015 –∑–∞ 1M completion tokens
        // –î–ª—è —Ç–µ—Å—Ç–∞ —Å 10 tokens —ç—Ç–æ –±—É–¥–µ—Ç ~$0.00002 —á—Ç–æ —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ –ª–∏–º–∏—Ç $1
        $cheapModel = 'openai/gpt-3.5-turbo';
        echo "   ‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤: {$cheapModel}\n\n";

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        $this->testMetricsEstimateCost($cheapModel);
        $this->testMetricsHasEnoughBalance();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã OpenRouter —Å –¥–µ—à–µ–≤–æ–π –º–æ–¥–µ–ª—å—é
        $this->testText2Text($cheapModel);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º streaming
        $this->testTextStream($cheapModel);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        $this->testValidation();
        
        // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        $this->printReport();
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
     *
     * @return string|null ID –º–æ–¥–µ–ª–∏ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
     */
    private function findCheapestModel(): ?string
    {
        try {
            $models = $this->metrics->getModels();
            $cheapest = null;
            $lowestCost = PHP_FLOAT_MAX;

            // –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (—Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            $problematicModels = [
                'nvidia/nemotron-nano-12b-v2-vl:free',  // –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ data policy
                'minimax/minimax-m2:free',  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç reasoning –≤–º–µ—Å—Ç–æ content
            ];

            foreach ($models as $model) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏
                if (in_array($model['id'], $problematicModels, true)) {
                    continue;
                }

                // –ò—â–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
                $promptCost = (float)$model['pricing']['prompt'];
                $completionCost = (float)$model['pricing']['completion'];
                $totalCost = $promptCost + $completionCost;

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å image
                if (isset($model['architecture']['modality'])) {
                    $modality = $model['architecture']['modality'];
                    if (strpos($modality, 'text') === false || strpos($modality, 'image') !== false) {
                        continue;
                    }
                }

                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –º–æ–¥–µ–ª—è–º
                if ($totalCost == 0.0) {
                    $this->logInfo("–ù–∞–π–¥–µ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {$model['id']}");
                    return $model['id'];
                }

                if ($totalCost < $lowestCost && $totalCost > 0) {
                    $lowestCost = $totalCost;
                    $cheapest = $model['id'];
                }
            }

            if ($cheapest !== null) {
                $this->logInfo("–ù–∞–π–¥–µ–Ω–∞ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å: {$cheapest} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {$lowestCost})");
            }

            return $cheapest;
        } catch (Exception $e) {
            $this->logError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ—à–µ–≤–æ–π –º–æ–¥–µ–ª–∏: ' . $e->getMessage());
            return null;
        }
    }

    /**
     * –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ
     */
    private function testMetricsGetKeyInfo(): void
    {
        $testName = 'OpenRouterMetrics::getKeyInfo()';
        echo "üìä –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $keyInfo = $this->metrics->getKeyInfo();
            
            $this->assertArrayHasKeys($keyInfo, ['label', 'usage', 'limit', 'is_free_tier', 'rate_limit']);
            $this->assertIsFloat($keyInfo['usage']);
            $this->assertIsArray($keyInfo['rate_limit']);
            
            echo "   ‚úì –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞: {$keyInfo['label']}\n";
            echo "   ‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \${$keyInfo['usage']}\n";
            echo "   ‚úì –õ–∏–º–∏—Ç: " . ($keyInfo['limit'] !== null ? "\${$keyInfo['limit']}" : "–ë–µ–∑ –ª–∏–º–∏—Ç–∞") . "\n";
            echo "   ‚úì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π: " . ($keyInfo['is_free_tier'] ? "–î–∞" : "–ù–µ—Ç") . "\n";
            
            $this->recordSuccess($testName, $keyInfo);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
     */
    private function testMetricsGetBalance(): void
    {
        $testName = 'OpenRouterMetrics::getBalance()';
        echo "üí∞ –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $balance = $this->metrics->getBalance();
            
            $this->assertIsFloat($balance);
            
            if ($balance >= 0) {
                echo "   ‚úì –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: \${$balance}\n";
            } else {
                echo "   ‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (–±–µ–∑ –ª–∏–º–∏—Ç–∞): \$" . abs($balance) . "\n";
            }
            
            $this->recordSuccess($testName, ['balance' => $balance]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    private function testMetricsGetUsageStats(): void
    {
        $testName = 'OpenRouterMetrics::getUsageStats()';
        echo "üìà –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $stats = $this->metrics->getUsageStats();
            
            $this->assertArrayHasKeys($stats, ['total_usage', 'limit', 'remaining', 'usage_percent', 'is_free_tier']);
            $this->assertIsFloat($stats['total_usage']);
            $this->assertIsFloat($stats['remaining']);
            $this->assertIsFloat($stats['usage_percent']);
            
            echo "   ‚úì –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \${$stats['total_usage']}\n";
            echo "   ‚úì –û—Å—Ç–∞—Ç–æ–∫: \${$stats['remaining']}\n";
            echo "   ‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {$stats['usage_percent']}%\n";
            
            $this->recordSuccess($testName, $stats);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private function testMetricsGetRateLimits(): void
    {
        $testName = 'OpenRouterMetrics::getRateLimits()';
        echo "‚è±Ô∏è  –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $rateLimits = $this->metrics->getRateLimits();
            
            $this->assertArrayHasKeys($rateLimits, ['requests', 'interval', 'description']);
            $this->assertIsInt($rateLimits['requests']);
            $this->assertIsString($rateLimits['interval']);
            
            echo "   ‚úì {$rateLimits['description']}\n";
            
            $this->recordSuccess($testName, $rateLimits);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    private function testMetricsGetAccountStatus(): void
    {
        $testName = 'OpenRouterMetrics::getAccountStatus()';
        echo "üîç –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $status = $this->metrics->getAccountStatus();
            
            $this->assertArrayHasKeys($status, ['key_info', 'balance', 'usage_stats', 'rate_limits']);
            $this->assertIsArray($status['key_info']);
            $this->assertIsFloat($status['balance']);
            $this->assertIsArray($status['usage_stats']);
            
            echo "   ‚úì –ë–∞–ª–∞–Ω—Å: \${$status['balance']}\n";
            echo "   ‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {$status['usage_stats']['usage_percent']}%\n";
            
            $this->recordSuccess($testName, $status);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
     */
    private function testMetricsGetModels(): void
    {
        $testName = 'OpenRouterMetrics::getModels()';
        echo "ü§ñ –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $models = $this->metrics->getModels();
            
            $this->assertIsArray($models);
            $this->assertGreaterThan(count($models), 0);
            
            if (count($models) > 0) {
                $this->assertArrayHasKeys($models[0], ['id', 'name', 'pricing', 'context_length']);
            }
            
            echo "   ‚úì –ü–æ–ª—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: " . count($models) . "\n";
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–æ–¥–µ–ª–∏
            $displayCount = min(3, count($models));
            for ($i = 0; $i < $displayCount; $i++) {
                $model = $models[$i];
                echo "   ‚Ä¢ {$model['name']} (prompt: \${$model['pricing']['prompt']}/1M)\n";
            }
            
            $this->recordSuccess($testName, ['models_count' => count($models)]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
     *
     * @param string $modelId ID –º–æ–¥–µ–ª–∏
     */
    private function testMetricsEstimateCost(string $modelId): void
    {
        $testName = 'OpenRouterMetrics::estimateCost()';
        echo "üíµ –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $estimate = $this->metrics->estimateCost($modelId, 100, 50);
            
            $this->assertArrayHasKeys($estimate, ['prompt_cost', 'completion_cost', 'total_cost', 'model', 'tokens']);
            $this->assertIsFloat($estimate['total_cost']);
            
            echo "   ‚úì –ú–æ–¥–µ–ª—å: {$estimate['model']}\n";
            echo "   ‚úì –°—Ç–æ–∏–º–æ—Å—Ç—å prompt: \${$estimate['prompt_cost']}\n";
            echo "   ‚úì –°—Ç–æ–∏–º–æ—Å—Ç—å completion: \${$estimate['completion_cost']}\n";
            echo "   ‚úì –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: \${$estimate['total_cost']}\n";
            
            $this->estimatedCost += $estimate['total_cost'];
            
            $this->recordSuccess($testName, $estimate);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
     */
    private function testMetricsHasEnoughBalance(): void
    {
        $testName = 'OpenRouterMetrics::hasEnoughBalance()';
        echo "‚úîÔ∏è  –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $hasBalance = $this->metrics->hasEnoughBalance(0.01);
            
            $this->assertIsBool($hasBalance);
            
            echo "   ‚úì –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è $0.01: " . ($hasBalance ? "–î–∞" : "–ù–µ—Ç") . "\n";
            
            $this->recordSuccess($testName, ['has_balance' => $hasBalance]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
     *
     * @param string $model ID –º–æ–¥–µ–ª–∏
     */
    private function testText2Text(string $model): void
    {
        $testName = 'OpenRouter::text2text()';
        echo "‚úçÔ∏è  –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $prompt = "Say 'OK'";
            $response = $this->openRouter->text2text(
                $model,
                $prompt,
                [
                    'max_tokens' => 10,
                    'temperature' => 0.1,
                ]
            );
            
            $this->assertIsString($response);
            $this->assertNotEmpty($response);
            
            echo "   ‚úì –ú–æ–¥–µ–ª—å: {$model}\n";
            echo "   ‚úì –ü—Ä–æ–º–ø—Ç: {$prompt}\n";
            echo "   ‚úì –û—Ç–≤–µ—Ç: {$response}\n";
            
            $this->recordSuccess($testName, [
                'model' => $model,
                'prompt' => $prompt,
                'response' => $response,
                'response_length' => strlen($response),
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–µ–∫—Å—Ç–∞
     *
     * @param string $model ID –º–æ–¥–µ–ª–∏
     */
    private function testTextStream(string $model): void
    {
        $testName = 'OpenRouter::textStream()';
        echo "üåä –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $prompt = "Count: 1, 2, 3";
            $chunks = [];
            
            echo "   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞: ";
            
            $this->openRouter->textStream(
                $model,
                $prompt,
                function (string $chunk) use (&$chunks): void {
                    $chunks[] = $chunk;
                    echo ".";
                },
                [
                    'max_tokens' => 20,
                    'temperature' => 0.1,
                ]
            );
            
            echo "\n";
            
            $fullResponse = implode('', $chunks);
            
            $this->assertIsArray($chunks);
            $this->assertGreaterThan(count($chunks), 0);
            $this->assertNotEmpty($fullResponse);
            
            echo "   ‚úì –ü–æ–ª—É—á–µ–Ω–æ —á–∞–Ω–∫–æ–≤: " . count($chunks) . "\n";
            echo "   ‚úì –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {$fullResponse}\n";
            
            $this->recordSuccess($testName, [
                'model' => $model,
                'prompt' => $prompt,
                'chunks_count' => count($chunks),
                'response' => $fullResponse,
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    private function testValidation(): void
    {
        echo "üîí –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n";
        
        // –¢–µ—Å—Ç 1: –ü—É—Å—Ç–∞—è –º–æ–¥–µ–ª—å
        $testName = 'Validation: Empty model';
        try {
            $this->openRouter->text2text('', 'test');
            $this->recordFailure($testName, new Exception('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞'));
        } catch (OpenRouterValidationException $e) {
            echo "   ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ª–æ–≤–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –º–æ–¥–µ–ª—å\n";
            $this->recordSuccess($testName, ['exception' => $e->getMessage()]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        // –¢–µ—Å—Ç 2: –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
        $testName = 'Validation: Empty prompt';
        try {
            $this->openRouter->text2text('some-model', '');
            $this->recordFailure($testName, new Exception('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞'));
        } catch (OpenRouterValidationException $e) {
            echo "   ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ª–æ–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç\n";
            $this->recordSuccess($testName, ['exception' => $e->getMessage()]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        // –¢–µ—Å—Ç 3: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ estimateCost
        $testName = 'Validation: Negative tokens';
        try {
            $this->metrics->estimateCost('some-model', -100, 50);
            $this->recordFailure($testName, new Exception('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞'));
        } catch (OpenRouterValidationException $e) {
            echo "   ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ª–æ–≤–ª–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n";
            $this->recordSuccess($testName, ['exception' => $e->getMessage()]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        // –¢–µ—Å—Ç 4: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ hasEnoughBalance
        $testName = 'Validation: Negative cost';
        try {
            $this->metrics->hasEnoughBalance(-0.01);
            $this->recordFailure($testName, new Exception('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞'));
        } catch (OpenRouterValidationException $e) {
            echo "   ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ª–æ–≤–ª–µ–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\n";
            $this->recordSuccess($testName, ['exception' => $e->getMessage()]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
     */
    private function printReport(): void
    {
        $successCount = 0;
        $failureCount = 0;
        
        foreach ($this->results as $result) {
            if ($result['success']) {
                $successCount++;
            } else {
                $failureCount++;
            }
        }
        
        $totalTests = $successCount + $failureCount;
        $successRate = $totalTests > 0 ? round(($successCount / $totalTests) * 100, 2) : 0;
        
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
        echo "‚ïë                        –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢                            ‚ïë\n";
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";
        
        echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$totalTests}\n";
        echo "‚úì –£—Å–ø–µ—à–Ω–æ: {$successCount}\n";
        echo "‚úó –û—à–∏–±–æ–∫: {$failureCount}\n";
        echo "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {$successRate}%\n";
        echo "–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤: \${$this->estimatedCost}\n\n";
        
        if ($failureCount > 0) {
            echo "–û—à–∏–±–∫–∏:\n";
            echo str_repeat('-', 70) . "\n";
            foreach ($this->results as $result) {
                if (!$result['success']) {
                    echo "‚Ä¢ {$result['test']}\n";
                    echo "  –û—à–∏–±–∫–∞: {$result['error']}\n\n";
                }
            }
        }
        
        echo "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {$this->logDirectory}\n\n";
        
        $this->logInfo('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===');
        $this->logInfo("–£—Å–ø–µ—à–Ω–æ: {$successCount}/{$totalTests} ({$successRate}%)");
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
     *
     * @param string $testName –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
     * @param mixed $data –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
     */
    private function recordSuccess(string $testName, $data): void
    {
        $this->results[] = [
            'test' => $testName,
            'success' => true,
            'data' => $data,
        ];
        
        $this->logInfo("‚úì {$testName} - —É—Å–ø–µ—à–Ω–æ", is_array($data) ? $data : []);
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
     *
     * @param string $testName –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
     * @param Exception $exception –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
     */
    private function recordFailure(string $testName, Exception $exception): void
    {
        $error = $exception->getMessage();
        
        $this->results[] = [
            'test' => $testName,
            'success' => false,
            'error' => $error,
            'exception_class' => get_class($exception),
        ];
        
        echo "   ‚úó –û—à–∏–±–∫–∞: {$error}\n";
        
        $this->logError("‚úó {$testName} - –æ—à–∏–±–∫–∞: {$error}", [
            'exception_class' => get_class($exception),
            'trace' => $exception->getTraceAsString(),
        ]);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ –º–∞—Å—Å–∏–≤–µ
     *
     * @param array<string, mixed> $array –ú–∞—Å—Å–∏–≤
     * @param array<int, string> $keys –ö–ª—é—á–∏
     * @throws Exception –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
     */
    private function assertArrayHasKeys(array $array, array $keys): void
    {
        foreach ($keys as $key) {
            if (!array_key_exists($key, $array)) {
                throw new Exception("–ö–ª—é—á '{$key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ");
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
     *
     * @param mixed $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @throws Exception –ï—Å–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞
     */
    private function assertIsString($value): void
    {
        if (!is_string($value)) {
            throw new Exception('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
     *
     * @param mixed $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @throws Exception –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
     */
    private function assertIsFloat($value): void
    {
        if (!is_float($value) && !is_int($value)) {
            throw new Exception('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
     *
     * @param mixed $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @throws Exception –ï—Å–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
     */
    private function assertIsInt($value): void
    {
        if (!is_int($value)) {
            throw new Exception('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
     *
     * @param mixed $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @throws Exception –ï—Å–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤
     */
    private function assertIsArray($value): void
    {
        if (!is_array($value)) {
            throw new Exception('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–ª–µ–≤—ã–º
     *
     * @param mixed $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @throws Exception –ï—Å–ª–∏ –Ω–µ –±—É–ª–µ–≤–æ
     */
    private function assertIsBool($value): void
    {
        if (!is_bool($value)) {
            throw new Exception('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
     *
     * @param string $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @throws Exception –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è
     */
    private function assertNotEmpty(string $value): void
    {
        if (trim($value) === '') {
            throw new Exception('–°—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ
     *
     * @param int|float $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @param int|float $min –ú–∏–Ω–∏–º—É–º
     * @throws Exception –ï—Å–ª–∏ –º–µ–Ω—å—à–µ
     */
    private function assertGreaterThan($value, $min): void
    {
        if ($value <= $min) {
            throw new Exception("–ó–Ω–∞—á–µ–Ω–∏–µ {$value} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ {$min}");
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     *
     * @param string $message –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param array<string, mixed> $context –ö–æ–Ω—Ç–µ–∫—Å—Ç
     */
    private function logInfo(string $message, array $context = []): void
    {
        $this->logger->info($message, $context);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
     *
     * @param string $message –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param array<string, mixed> $context –ö–æ–Ω—Ç–µ–∫—Å—Ç
     */
    private function logError(string $message, array $context = []): void
    {
        $this->logger->error($message, $context);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (php_sapi_name() === 'cli') {
    $apiKey = $argv[1] ?? '';
    
    if (empty($apiKey)) {
        echo "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php OpenRouterFullTest.php <api-key>\n";
        exit(1);
    }
    
    try {
        $test = new OpenRouterFullTest($apiKey);
        $test->runAllTests();
    } catch (Exception $e) {
        echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {$e->getMessage()}\n";
        echo "–ö–ª–∞—Å—Å: " . get_class($e) . "\n";
        exit(1);
    }
}
