<?php

declare(strict_types=1);

require_once __DIR__ . '/../../autoload.php';

use App\Component\OpenRouter;
use App\Component\Logger;
use App\Component\Exception\OpenRouterException;

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ OpenRouter –≤–∫–ª—é—á–∞—è text2image, pdf2text, audio2text
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ API
 */
class OpenRouterCompleteTest
{
    private OpenRouter $openRouter;
    private Logger $logger;
    private array $results = [];
    private string $logDirectory;
    private float $totalCost = 0.0;

    public function __construct(string $apiKey)
    {
        $this->logDirectory = __DIR__ . '/../../logs_openrouter_complete';
        
        if (!is_dir($this->logDirectory)) {
            mkdir($this->logDirectory, 0755, true);
        }

        $this->logger = new Logger([
            'directory' => $this->logDirectory,
            'file_name' => 'complete_test.log',
            'max_files' => 3,
        ]);

        $config = [
            'api_key' => $apiKey,
            'app_name' => 'OpenRouterCompleteTest',
            'timeout' => 120,
            'retries' => 2,
        ];

        $this->openRouter = new OpenRouter($config, $this->logger);
        $this->logInfo('=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ ===');
    }

    public function runAllTests(): void
    {
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
        echo "‚ïë     –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ú–ï–¢–û–î–û–í OpenRouter                 ‚ïë\n";
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

        // 1. text2text (—É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
        $this->testText2Text();
        
        // 2. textStream (—É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
        $this->testTextStream();
        
        // 3. image2text (—É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –¥–æ–±–∞–≤–∏–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
        $this->testImage2Text();
        
        // 4. text2image - –¢–ï–°–¢
        $this->testText2Image();
        
        // 5. pdf2text - –¢–ï–°–¢ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        $this->testPdf2Text();
        
        // 6. audio2text - –¢–ï–°–¢ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        $this->testAudio2Text();
        
        $this->printReport();
    }

    /**
     * –¢–µ—Å—Ç 1: –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
     */
    private function testText2Text(): void
    {
        $testName = 'OpenRouter::text2text()';
        echo "‚úçÔ∏è  –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $model = 'openai/gpt-3.5-turbo';
            $prompt = 'Say "Hello World"';
            
            echo "   ‚Ä¢ –ú–æ–¥–µ–ª—å: {$model}\n";
            echo "   ‚Ä¢ –ü—Ä–æ–º–ø—Ç: {$prompt}\n";
            echo "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞...\n";
            
            $response = $this->openRouter->text2text(
                $model,
                $prompt,
                ['max_tokens' => 10]
            );
            
            echo "   ‚úì –û—Ç–≤–µ—Ç: {$response}\n";
            
            $this->recordSuccess($testName, [
                'model' => $model,
                'prompt' => $prompt,
                'response' => $response,
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç 2: –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞
     */
    private function testTextStream(): void
    {
        $testName = 'OpenRouter::textStream()';
        echo "üåä –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $model = 'openai/gpt-3.5-turbo';
            $prompt = 'Count from 1 to 5';
            $chunks = [];
            
            echo "   ‚Ä¢ –ú–æ–¥–µ–ª—å: {$model}\n";
            echo "   ‚Ä¢ –ü—Ä–æ–º–ø—Ç: {$prompt}\n";
            echo "   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞: ";
            
            $this->openRouter->textStream(
                $model,
                $prompt,
                function (string $chunk) use (&$chunks): void {
                    $chunks[] = $chunk;
                    echo ".";
                },
                ['max_tokens' => 20]
            );
            
            $fullResponse = implode('', $chunks);
            echo "\n";
            echo "   ‚úì –ü–æ–ª—É—á–µ–Ω–æ —á–∞–Ω–∫–æ–≤: " . count($chunks) . "\n";
            echo "   ‚úì –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {$fullResponse}\n";
            
            $this->recordSuccess($testName, [
                'model' => $model,
                'chunks_count' => count($chunks),
                'response' => $fullResponse,
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç 3: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private function testImage2Text(): void
    {
        $testName = 'OpenRouter::image2text()';
        echo "üñºÔ∏è  –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $model = 'openai/gpt-4o';
            $imageUrl = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';
            $question = 'What is in this image?';
            
            echo "   ‚Ä¢ –ú–æ–¥–µ–ª—å: {$model}\n";
            echo "   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {$imageUrl}\n";
            echo "   ‚Ä¢ –í–æ–ø—Ä–æ—Å: {$question}\n";
            echo "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞...\n";
            
            $description = $this->openRouter->image2text(
                $model,
                $imageUrl,
                $question,
                ['max_tokens' => 100]
            );
            
            echo "   ‚úì –û–ø–∏—Å–∞–Ω–∏–µ: " . substr($description, 0, 80) . "...\n";
            
            $this->recordSuccess($testName, [
                'model' => $model,
                'image_url' => $imageUrl,
                'description' => $description,
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private function testText2Image(): void
    {
        $testName = 'OpenRouter::text2image()';
        echo "üé® –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Gemini, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            $model = 'google/gemini-2.5-flash-image';
            $prompt = 'Draw a simple red circle';
            
            echo "   ‚Ä¢ –ú–æ–¥–µ–ª—å: {$model}\n";
            echo "   ‚Ä¢ –ü—Ä–æ–º–ø—Ç: {$prompt}\n";
            echo "   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n";
            echo "   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Ä–æ–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π!\n";
            
            $imageData = $this->openRouter->text2image(
                $model,
                $prompt,
                ['max_tokens' => 2000]
            );
            
            $isBase64 = (strpos($imageData, 'data:image') === 0 || strlen($imageData) > 1000);
            
            echo "   ‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ\n";
            echo "   ‚úì –§–æ—Ä–º–∞—Ç: " . ($isBase64 ? "Base64 (" . strlen($imageData) . " –±–∞–π—Ç)" : "URL") . "\n";
            
            if ($isBase64) {
                echo "   ‚úì –ù–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: " . substr($imageData, 0, 50) . "...\n";
            } else {
                echo "   ‚úì –î–∞–Ω–Ω—ã–µ: {$imageData}\n";
            }
            
            $this->recordSuccess($testName, [
                'model' => $model,
                'prompt' => $prompt,
                'image_length' => strlen($imageData),
                'is_base64' => $isBase64,
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
     */
    private function testPdf2Text(): void
    {
        $testName = 'OpenRouter::pdf2text()';
        echo "üìÑ –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $model = 'openai/gpt-4o';
            $pdfUrl = 'https://bitcoin.org/bitcoin.pdf';
            $instruction = 'What is the title of this document?';
            
            echo "   ‚Ä¢ –ú–æ–¥–µ–ª—å: {$model}\n";
            echo "   ‚Ä¢ PDF URL: {$pdfUrl}\n";
            echo "   ‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {$instruction}\n";
            echo "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF (type: file, file_data)...\n";
            
            $extractedText = $this->openRouter->pdf2text(
                $model,
                $pdfUrl,
                $instruction,
                ['max_tokens' => 200]
            );
            
            echo "   ‚úì –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω\n";
            echo "   ‚úì –î–ª–∏–Ω–∞: " . strlen($extractedText) . " —Å–∏–º–≤–æ–ª–æ–≤\n";
            echo "   ‚úì –û—Ç–≤–µ—Ç: " . substr($extractedText, 0, 150) . "...\n";
            
            $this->recordSuccess($testName, [
                'model' => $model,
                'pdf_url' => $pdfUrl,
                'extracted_length' => strlen($extractedText),
                'extracted_text' => $extractedText,
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç 6: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
     */
    private function testAudio2Text(): void
    {
        $testName = 'OpenRouter::audio2text()';
        echo "üéµ –¢–µ—Å—Ç: {$testName}\n";
        
        try {
            $model = 'google/gemini-2.5-flash';
            $audioPath = __DIR__ . '/../../test_assets/test_audio.wav';
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!file_exists($audioPath)) {
                $dir = dirname($audioPath);
                if (!is_dir($dir)) {
                    mkdir($dir, 0755, true);
                }
                // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
                file_put_contents($audioPath, base64_decode('SGVsbG8gV29ybGQh'));
            }
            
            echo "   ‚Ä¢ –ú–æ–¥–µ–ª—å: {$model}\n";
            echo "   ‚Ä¢ Audio —Ñ–∞–π–ª: {$audioPath}\n";
            echo "   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " . filesize($audioPath) . " –±–∞–π—Ç\n";
            echo "   ‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ (type: input_audio, base64)...\n";
            
            $transcription = $this->openRouter->audio2text(
                $model,
                $audioPath,
                [
                    'format' => 'wav',
                    'prompt' => 'Transcribe this audio',
                ]
            );
            
            echo "   ‚úì –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞\n";
            echo "   ‚úì –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: " . strlen($transcription) . " —Å–∏–º–≤–æ–ª–æ–≤\n";
            echo "   ‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç: " . substr($transcription, 0, 100) . "\n";
            
            $this->recordSuccess($testName, [
                'model' => $model,
                'audio_path' => $audioPath,
                'transcription_length' => strlen($transcription),
                'transcription' => $transcription,
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    private function printReport(): void
    {
        $successCount = 0;
        $failureCount = 0;
        
        foreach ($this->results as $result) {
            if ($result['success']) {
                $successCount++;
            } else {
                $failureCount++;
            }
        }
        
        $totalTests = $successCount + $failureCount;
        $successRate = $totalTests > 0 ? round(($successCount / $totalTests) * 100, 2) : 0;
        
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
        echo "‚ïë                    –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢                                ‚ïë\n";
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";
        
        echo "–í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {$totalTests}\n";
        echo "‚úì –£—Å–ø–µ—à–Ω–æ: {$successCount}\n";
        echo "‚úó –û—à–∏–±–æ–∫: {$failureCount}\n";
        echo "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {$successRate}%\n\n";
        
        // –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        echo "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã:\n";
        foreach ($this->results as $result) {
            $status = $result['success'] ? '‚úì' : '‚úó';
            echo "  {$status} {$result['test']}\n";
        }
        echo "\n";
        
        if ($failureCount > 0) {
            echo "–û—à–∏–±–∫–∏:\n";
            echo str_repeat('-', 70) . "\n";
            foreach ($this->results as $result) {
                if (!$result['success']) {
                    echo "‚Ä¢ {$result['test']}\n";
                    echo "  –û—à–∏–±–∫–∞: {$result['error']}\n";
                    echo "  –ö–ª–∞—Å—Å: {$result['exception_class']}\n\n";
                }
            }
        }
        
        echo "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {$this->logDirectory}\n\n";
        
        $this->logInfo('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===');
        $this->logInfo("–£—Å–ø–µ—à–Ω–æ: {$successCount}/{$totalTests} ({$successRate}%)");
    }

    private function recordSuccess(string $testName, $data): void
    {
        $this->results[] = [
            'test' => $testName,
            'success' => true,
            'data' => $data,
        ];
        
        $this->logInfo("‚úì {$testName} - —É—Å–ø–µ—à–Ω–æ", is_array($data) ? $data : []);
    }

    private function recordFailure(string $testName, Exception $exception): void
    {
        $error = $exception->getMessage();
        
        $this->results[] = [
            'test' => $testName,
            'success' => false,
            'error' => $error,
            'exception_class' => get_class($exception),
        ];
        
        echo "   ‚úó –û—à–∏–±–∫–∞: {$error}\n";
        echo "   ‚ÑπÔ∏è  –ö–ª–∞—Å—Å: " . get_class($exception) . "\n";
        
        $this->logError("‚úó {$testName} - –æ—à–∏–±–∫–∞: {$error}", [
            'exception_class' => get_class($exception),
            'trace' => $exception->getTraceAsString(),
        ]);
    }

    private function logInfo(string $message, array $context = []): void
    {
        $this->logger->info($message, $context);
    }

    private function logError(string $message, array $context = []): void
    {
        $this->logger->error($message, $context);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (php_sapi_name() === 'cli') {
    $apiKey = $argv[1] ?? '';
    
    if (empty($apiKey)) {
        echo "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php OpenRouterCompleteTest.php <api-key>\n";
        exit(1);
    }
    
    try {
        $test = new OpenRouterCompleteTest($apiKey);
        $test->runAllTests();
    } catch (Exception $e) {
        echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {$e->getMessage()}\n";
        echo "–ö–ª–∞—Å—Å: " . get_class($e) . "\n";
        exit(1);
    }
}
