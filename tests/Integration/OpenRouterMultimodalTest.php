<?php

declare(strict_types=1);

require_once __DIR__ . '/../../autoload.php';

use App\Component\OpenRouter;
use App\Component\Logger;
use App\Component\Exception\OpenRouter\OpenRouterException;

/**
 * –¢–µ—Å—Ç –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π OpenRouter (image2text, pdf2text, audio2text)
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, PDF –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ API OpenRouter
 */
class OpenRouterMultimodalTest
{
    private OpenRouter $openRouter;
    private Logger $logger;
    private array $results = [];
    private string $logDirectory;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–µ—Å—Ç–∞
     *
     * @param string $apiKey API –∫–ª—é—á OpenRouter
     */
    public function __construct(string $apiKey)
    {
        $this->logDirectory = __DIR__ . '/../../logs_openrouter_multimodal';
        
        if (!is_dir($this->logDirectory)) {
            mkdir($this->logDirectory, 0755, true);
        }

        $this->logger = new Logger([
            'directory' => $this->logDirectory,
            'file_name' => 'multimodal_test.log',
            'max_files' => 3,
        ]);

        $config = [
            'api_key' => $apiKey,
            'app_name' => 'OpenRouterMultimodalTest',
            'timeout' => 120,
            'retries' => 2,
        ];

        $this->openRouter = new OpenRouter($config, $this->logger);

        $this->logInfo('=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ ===');
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
     */
    public function runAllTests(): void
    {
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
        echo "‚ïë        –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í OpenRouter          ‚ïë\n";
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º image2text
        $this->testImage2Text();
        
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: pdf2text –∏ audio2text —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ª–∏—á–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        // –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Ä–æ–∂–µ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ö –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ
        echo "\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú–µ—Ç–æ–¥—ã pdf2text –∏ audio2text —Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã\n";
        echo "   –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ä–æ–∂–µ. –û–Ω–∏ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é.\n\n";
        
        // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        $this->printReport();
    }

    /**
     * –¢–µ—Å—Ç: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private function testImage2Text(): void
    {
        $testName = 'OpenRouter::image2text()';
        echo "üñºÔ∏è  –¢–µ—Å—Ç: {$testName}\n";
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ GitHub
        $imageUrl = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';
        
        try {
            echo "   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {$imageUrl}\n";
            echo "   ‚Ä¢ –ú–æ–¥–µ–ª—å: gpt-4o (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç vision)\n";
            echo "   ‚Ä¢ –í–æ–ø—Ä–æ—Å: What do you see in this image?\n";
            echo "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞...\n";
            
            $description = $this->openRouter->image2text(
                'openai/gpt-4o',
                $imageUrl,
                'What do you see in this image? Describe it briefly.',
                [
                    'max_tokens' => 100,
                ]
            );
            
            echo "   ‚úì –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ\n";
            echo "   ‚úì –û—Ç–≤–µ—Ç: " . substr($description, 0, 100) . "...\n";
            echo "   ‚úì –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: " . strlen($description) . " —Å–∏–º–≤–æ–ª–æ–≤\n";
            
            $this->recordSuccess($testName, [
                'image_url' => $imageUrl,
                'description' => $description,
                'description_length' => strlen($description),
            ]);
        } catch (Exception $e) {
            $this->recordFailure($testName, $e);
        }
        
        echo "\n";
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
     */
    private function printReport(): void
    {
        $successCount = 0;
        $failureCount = 0;
        
        foreach ($this->results as $result) {
            if ($result['success']) {
                $successCount++;
            } else {
                $failureCount++;
            }
        }
        
        $totalTests = $successCount + $failureCount;
        $successRate = $totalTests > 0 ? round(($successCount / $totalTests) * 100, 2) : 0;
        
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
        echo "‚ïë                        –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢                            ‚ïë\n";
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";
        
        echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$totalTests}\n";
        echo "‚úì –£—Å–ø–µ—à–Ω–æ: {$successCount}\n";
        echo "‚úó –û—à–∏–±–æ–∫: {$failureCount}\n";
        echo "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {$successRate}%\n\n";
        
        if ($failureCount > 0) {
            echo "–û—à–∏–±–∫–∏:\n";
            echo str_repeat('-', 70) . "\n";
            foreach ($this->results as $result) {
                if (!$result['success']) {
                    echo "‚Ä¢ {$result['test']}\n";
                    echo "  –û—à–∏–±–∫–∞: {$result['error']}\n\n";
                }
            }
        }
        
        echo "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {$this->logDirectory}\n\n";
        
        $this->logInfo('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===');
        $this->logInfo("–£—Å–ø–µ—à–Ω–æ: {$successCount}/{$totalTests} ({$successRate}%)");
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
     *
     * @param string $testName –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
     * @param mixed $data –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
     */
    private function recordSuccess(string $testName, $data): void
    {
        $this->results[] = [
            'test' => $testName,
            'success' => true,
            'data' => $data,
        ];
        
        $this->logInfo("‚úì {$testName} - —É—Å–ø–µ—à–Ω–æ", is_array($data) ? $data : []);
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
     *
     * @param string $testName –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
     * @param Exception $exception –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
     */
    private function recordFailure(string $testName, Exception $exception): void
    {
        $error = $exception->getMessage();
        
        $this->results[] = [
            'test' => $testName,
            'success' => false,
            'error' => $error,
            'exception_class' => get_class($exception),
        ];
        
        echo "   ‚úó –û—à–∏–±–∫–∞: {$error}\n";
        echo "   ‚ÑπÔ∏è  –ö–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è: " . get_class($exception) . "\n";
        
        $this->logError("‚úó {$testName} - –æ—à–∏–±–∫–∞: {$error}", [
            'exception_class' => get_class($exception),
            'trace' => $exception->getTraceAsString(),
        ]);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     *
     * @param string $message –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param array<string, mixed> $context –ö–æ–Ω—Ç–µ–∫—Å—Ç
     */
    private function logInfo(string $message, array $context = []): void
    {
        $this->logger->info($message, $context);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
     *
     * @param string $message –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param array<string, mixed> $context –ö–æ–Ω—Ç–µ–∫—Å—Ç
     */
    private function logError(string $message, array $context = []): void
    {
        $this->logger->error($message, $context);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (php_sapi_name() === 'cli') {
    $apiKey = $argv[1] ?? '';
    
    if (empty($apiKey)) {
        echo "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php OpenRouterMultimodalTest.php <api-key>\n";
        exit(1);
    }
    
    try {
        $test = new OpenRouterMultimodalTest($apiKey);
        $test->runAllTests();
    } catch (Exception $e) {
        echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {$e->getMessage()}\n";
        echo "–ö–ª–∞—Å—Å: " . get_class($e) . "\n";
        exit(1);
    }
}
