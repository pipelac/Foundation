<?php

declare(strict_types=1);

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–ª–∞—Å—Å–∞ PollingHandler
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
 */

require_once __DIR__ . '/../autoload.php';

use App\Component\Http;
use App\Component\Logger;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\PollingHandler;
use App\Component\TelegramBot\Entities\Update;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
$BOT_TOKEN = '8327641497:AAFTHb3xSTpP3Q6Peg8-OK4nTWTfF7iMWfI';
$CHAT_ID = 366442475;

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$testResults = [];
$totalTests = 0;
$passedTests = 0;

function logTest(string $testName, bool $passed, string $message = ''): void
{
    global $testResults, $totalTests, $passedTests;
    
    $totalTests++;
    if ($passed) {
        $passedTests++;
    }
    
    $status = $passed ? '‚úÖ PASS' : '‚ùå FAIL';
    $result = "$status | $testName";
    if ($message) {
        $result .= " | $message";
    }
    
    $testResults[] = $result;
    echo $result . PHP_EOL;
}

function printHeader(string $title): void
{
    echo PHP_EOL;
    echo str_repeat('=', 80) . PHP_EOL;
    echo $title . PHP_EOL;
    echo str_repeat('=', 80) . PHP_EOL;
}

function printSeparator(): void
{
    echo str_repeat('-', 80) . PHP_EOL;
}

try {
    printHeader('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POLLING HANDLER');
    echo "Bot Token: " . substr($BOT_TOKEN, 0, 20) . "..." . PHP_EOL;
    echo "Chat ID: $CHAT_ID" . PHP_EOL;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    printSeparator();
    echo "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..." . PHP_EOL;
    
    $logger = new Logger([
        'directory' => __DIR__ . '/../logs',
        'filename' => 'telegram_bot_polling_test',
    ]);
    logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Logger', true);

    $http = new Http(['timeout' => 60], $logger);
    logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Http', true);

    $api = new TelegramAPI($BOT_TOKEN, $http, $logger);
    logTest('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramAPI', true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
    printSeparator();
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É..." . PHP_EOL;
    try {
        $botInfo = $api->getMe();
        logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ (getMe)', true, "Bot: @{$botInfo->username}");
        echo "  ‚îî‚îÄ ID: {$botInfo->id}" . PHP_EOL;
        echo "  ‚îî‚îÄ –ò–º—è: {$botInfo->firstName}" . PHP_EOL;
        echo "  ‚îî‚îÄ Username: @{$botInfo->username}" . PHP_EOL;
    } catch (Exception $e) {
        logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ (getMe)', false, $e->getMessage());
        throw $e;
    }

    // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª—è —Ä–∞–±–æ—Ç—ã polling)
    printSeparator();
    echo "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ polling —Ä–µ–∂–∏–º—É..." . PHP_EOL;
    try {
        $webhookInfo = $api->getWebhookInfo();
        if (!empty($webhookInfo['url'])) {
            echo "  ‚îî‚îÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω webhook: {$webhookInfo['url']}" . PHP_EOL;
            $api->deleteWebhook(true);
            logTest('–£–¥–∞–ª–µ–Ω–∏–µ webhook', true);
            sleep(1); // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        } else {
            logTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook', true, 'Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    } catch (Exception $e) {
        logTest('–ü—Ä–æ–≤–µ—Ä–∫–∞/—É–¥–∞–ª–µ–Ω–∏–µ webhook', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ PollingHandler
    printHeader('–¢–ï–°–¢ 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø POLLING HANDLER');
    try {
        $polling = new PollingHandler($api, $logger);
        logTest('–°–æ–∑–¥–∞–Ω–∏–µ PollingHandler', true);
    } catch (Exception $e) {
        logTest('–°–æ–∑–¥–∞–Ω–∏–µ PollingHandler', false, $e->getMessage());
        throw $e;
    }

    // –¢–µ—Å—Ç 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    printHeader('–¢–ï–°–¢ 2: –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í');
    try {
        $polling->setTimeout(10);
        logTest('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ timeout (setTimeout)', true, 'timeout=10');
        
        $polling->setLimit(50);
        logTest('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ limit (setLimit)', true, 'limit=50');
        
        $polling->setAllowedUpdates(['message', 'callback_query']);
        logTest('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ allowedUpdates (setAllowedUpdates)', true);
        
        $polling->setOffset(0);
        logTest('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ offset (setOffset)', true, 'offset=0');
        
        $currentOffset = $polling->getOffset();
        logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ offset (getOffset)', $currentOffset === 0, "offset=$currentOffset");
    } catch (Exception $e) {
        logTest('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    printHeader('–¢–ï–°–¢ 3: –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í');
    try {
        // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π timeout (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 0-50)
        $polling->setTimeout(100); // –î–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 30 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è timeout (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)', true, '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        
        // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π limit (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-100)
        $polling->setLimit(200); // –î–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 100
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è limit (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)', true, '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        $polling->setTimeout(5);
        $polling->setLimit(10);
    } catch (Exception $e) {
        logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    printHeader('–¢–ï–°–¢ 4: –ü–†–û–ü–£–°–ö –°–¢–ê–†–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô');
    try {
        $skipped = $polling->skipPendingUpdates();
        logTest('–ü—Ä–æ–ø—É—Å–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (skipPendingUpdates)', true, "–ü—Ä–æ–ø—É—â–µ–Ω–æ: $skipped");
        echo "  ‚îî‚îÄ –ù–æ–≤—ã–π offset: {$polling->getOffset()}" . PHP_EOL;
    } catch (Exception $e) {
        logTest('–ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', false, $e->getMessage());
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è
    printHeader('–ü–û–î–ì–û–¢–û–í–ö–ê: –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø');
    try {
        $testMessage = "üß™ –¢–µ—Å—Ç Polling " . date('H:i:s');
        $sentMessage = $api->sendMessage($CHAT_ID, $testMessage);
        logTest('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', true, "ID: {$sentMessage->messageId}");
        echo "  ‚îî‚îÄ –¢–µ–∫—Å—Ç: $testMessage" . PHP_EOL;
        sleep(1); // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    } catch (Exception $e) {
        logTest('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (getUpdates)
    printHeader('–¢–ï–°–¢ 5: –ü–û–õ–£–ß–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–ô');
    try {
        $updates = $polling->getUpdates();
        $count = count($updates);
        logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (getUpdates)', true, "–ü–æ–ª—É—á–µ–Ω–æ: $count");
        
        if ($count > 0) {
            foreach ($updates as $i => $update) {
                echo "  ‚îî‚îÄ Update #" . ($i + 1) . ":" . PHP_EOL;
                echo "     ‚îú‚îÄ ID: {$update->updateId}" . PHP_EOL;
                
                if ($update->isMessage()) {
                    $msg = $update->message;
                    echo "     ‚îú‚îÄ –¢–∏–ø: Message" . PHP_EOL;
                    echo "     ‚îú‚îÄ Chat ID: {$msg->chat->id}" . PHP_EOL;
                    echo "     ‚îú‚îÄ From: {$msg->from->firstName}" . PHP_EOL;
                    if ($msg->text) {
                        echo "     ‚îî‚îÄ Text: " . substr($msg->text, 0, 50) . PHP_EOL;
                    }
                } elseif ($update->isCallbackQuery()) {
                    echo "     ‚îî‚îÄ –¢–∏–ø: CallbackQuery" . PHP_EOL;
                }
            }
        } else {
            echo "  ‚îî‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)" . PHP_EOL;
        }
        
        echo "  ‚îî‚îÄ –ù–æ–≤—ã–π offset: {$polling->getOffset()}" . PHP_EOL;
    } catch (Exception $e) {
        logTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 6: –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ (pollOnce)
    printHeader('–¢–ï–°–¢ 6: –û–î–ù–û–ö–†–ê–¢–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï');
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $testMessage2 = "üîÑ –¢–µ—Å—Ç pollOnce " . date('H:i:s');
        $api->sendMessage($CHAT_ID, $testMessage2);
        sleep(1);
        
        $updates = $polling->pollOnce();
        $count = count($updates);
        logTest('–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ (pollOnce)', true, "–ü–æ–ª—É—á–µ–Ω–æ: $count");
        
        if ($count > 0) {
            echo "  ‚îî‚îÄ –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID: {$updates[0]->updateId}" . PHP_EOL;
        }
    } catch (Exception $e) {
        logTest('–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è polling
    printHeader('–¢–ï–°–¢ 7: –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø');
    try {
        $isPolling = $polling->isPolling();
        logTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (isPolling)', true, $isPolling ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω');
    } catch (Exception $e) {
        logTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 8: –¶–∏–∫–ª polling —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π)
    printHeader('–¢–ï–°–¢ 8: –¶–ò–ö–õ POLLING –° –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–ú');
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        echo "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π..." . PHP_EOL;
        for ($i = 1; $i <= 3; $i++) {
            $api->sendMessage($CHAT_ID, "üì® –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #$i –¥–ª—è polling —Ü–∏–∫–ª–∞");
            usleep(500000); // 0.5 —Å–µ–∫—É–Ω–¥—ã
        }
        
        echo "–ó–∞–ø—É—Å–∫ polling —Ü–∏–∫–ª–∞ (3 –∏—Ç–µ—Ä–∞—Ü–∏–∏)..." . PHP_EOL;
        $processedUpdates = 0;
        
        $polling->setTimeout(3); // –ö–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è —Ç–µ—Å—Ç–∞
        $polling->startPolling(function(Update $update) use (&$processedUpdates) {
            $processedUpdates++;
            echo "  ‚îî‚îÄ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID: {$update->updateId}" . PHP_EOL;
            
            if ($update->isMessage() && $update->message->text) {
                echo "     ‚îî‚îÄ –¢–µ–∫—Å—Ç: " . substr($update->message->text, 0, 40) . PHP_EOL;
            }
        }, 3); // –ú–∞–∫—Å–∏–º—É–º 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏
        
        logTest('–¶–∏–∫–ª polling (startPolling)', true, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $processedUpdates");
    } catch (Exception $e) {
        logTest('–¶–∏–∫–ª polling', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 9: –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    printHeader('–¢–ï–°–¢ 9: –°–ë–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø');
    try {
        $oldOffset = $polling->getOffset();
        $polling->reset();
        $newOffset = $polling->getOffset();
        
        $resetSuccess = ($newOffset === 0);
        logTest('–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (reset)', $resetSuccess, 
            "Offset: $oldOffset ‚Üí $newOffset");
    } catch (Exception $e) {
        logTest('–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 10: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
    printHeader('–¢–ï–°–¢ 10: –û–°–¢–ê–ù–û–í–ö–ê POLLING');
    try {
        $polling->stopPolling();
        $isPolling = $polling->isPolling();
        
        logTest('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling (stopPolling)', !$isPolling, 'Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (Exception $e) {
        logTest('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 11: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    printHeader('–¢–ï–°–¢ 11: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö');
    try {
        // –°–æ–∑–¥–∞–µ–º API —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
        $badApi = new TelegramAPI('123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11', $http, $logger);
        $badPolling = new PollingHandler($badApi, $logger);
        
        try {
            $badPolling->getUpdates();
            logTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞', false, '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ');
        } catch (\App\Component\TelegramBot\Exceptions\ApiException $e) {
            logTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞', true, '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ');
            echo "  ‚îî‚îÄ –°–æ–æ–±—â–µ–Ω–∏–µ: " . substr($e->getMessage(), 0, 60) . PHP_EOL;
        }
    } catch (Exception $e) {
        logTest('–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫', false, $e->getMessage());
    }

    // –¢–µ—Å—Ç 12: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    printHeader('–¢–ï–°–¢ 12: –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø');
    try {
        $logFile = __DIR__ . '/../logs/app.log';
        
        if (file_exists($logFile)) {
            $logContent = file_get_contents($logFile);
            $hasLogs = !empty($logContent);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            $hasInit = str_contains($logContent, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PollingHandler');
            $hasGetUpdates = str_contains($logContent, '–ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ getUpdates');
            $hasPollingStart = str_contains($logContent, '–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞');
            
            $allLogsPresent = $hasInit && $hasGetUpdates && $hasPollingStart;
            
            logTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', $allLogsPresent, 
                '–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã');
            
            echo "  ‚îî‚îÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: " . ($hasInit ? '‚úÖ' : '‚ùå') . PHP_EOL;
            echo "  ‚îî‚îÄ getUpdates: " . ($hasGetUpdates ? '‚úÖ' : '‚ùå') . PHP_EOL;
            echo "  ‚îî‚îÄ startPolling: " . ($hasPollingStart ? '‚úÖ' : '‚ùå') . PHP_EOL;
            echo "  ‚îî‚îÄ –ü—É—Ç—å –∫ –ª–æ–≥—É: $logFile" . PHP_EOL;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å polling
            $lines = explode("\n", trim($logContent));
            $pollingLines = array_filter($lines, fn($line) => str_contains($line, 'polling') || str_contains($line, 'Polling'));
            $lastPollingLines = array_slice($pollingLines, -10);
            
            if (!empty($lastPollingLines)) {
                echo PHP_EOL . "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ (polling):" . PHP_EOL;
                foreach ($lastPollingLines as $line) {
                    if (trim($line)) {
                        echo "  " . substr($line, 0, 100) . PHP_EOL;
                    }
                }
            }
        } else {
            logTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', false, "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $logFile");
        }
    } catch (Exception $e) {
        logTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', false, $e->getMessage());
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    printHeader('–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $totalTests" . PHP_EOL;
    echo "–£—Å–ø–µ—à–Ω–æ: $passedTests" . PHP_EOL;
    echo "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: " . ($totalTests - $passedTests) . PHP_EOL;
    echo "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " . round(($passedTests / $totalTests) * 100, 2) . "%" . PHP_EOL;

    printSeparator();
    echo PHP_EOL . "–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:" . PHP_EOL;
    foreach ($testResults as $result) {
        echo $result . PHP_EOL;
    }

    if ($passedTests === $totalTests) {
        printHeader('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ');
    } else {
        printHeader('‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´ ‚ö†Ô∏è');
    }

} catch (Exception $e) {
    printHeader('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê');
    echo "–û—à–∏–±–∫–∞: " . $e->getMessage() . PHP_EOL;
    echo "–§–∞–π–ª: " . $e->getFile() . PHP_EOL;
    echo "–°—Ç—Ä–æ–∫–∞: " . $e->getLine() . PHP_EOL;
    echo PHP_EOL . "Stack trace:" . PHP_EOL;
    echo $e->getTraceAsString() . PHP_EOL;
    exit(1);
}
