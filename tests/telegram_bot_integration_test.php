<?php

declare(strict_types=1);

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramBot –≤ —Ä–µ–∂–∏–º–µ Polling
 * 
 * –£—Ä–æ–≤–µ–Ω—å 1: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
 * –£—Ä–æ–≤–µ–Ω—å 2: –î–∏–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */

require_once __DIR__ . '/../autoload.php';

use App\Component\Http;
use App\Component\Logger;
use App\Component\MySQL;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\PollingHandler;
use App\Component\TelegramBot\Core\ConversationManager;
use App\Component\TelegramBot\Entities\Update;
use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;
use App\Component\TelegramBot\Keyboards\ReplyKeyboardBuilder;

// ============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================

$BOT_TOKEN = '8327641497:AAFTHb3xSTpP3Q6Peg8-OK4nTWTfF7iMWfI';
$CHAT_ID = 366442475;
$TEST_TIMEOUT = 15; // –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ–∫—É–Ω–¥—ã)

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================================================================

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë  –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM BOT (POLLING + MYSQL)        ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

// –õ–æ–≥–≥–µ—Ä
$logger = new Logger(['directory' => __DIR__ . '/../logs']);
$logger->info('=== –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');

// HTTP –∫–ª–∏–µ–Ω—Ç
$http = new Http(['timeout' => 60], $logger);

// Telegram API
$api = new TelegramAPI($BOT_TOKEN, $http, $logger);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
$db = new MySQL([
    'host' => 'localhost',
    'database' => 'telegram_bot_test',
    'username' => 'test_user',
    'password' => 'test_pass',
], $logger);

// ConversationManager
$conversationManager = new ConversationManager(
    $db,
    $logger,
    [
        'enabled' => true,
        'timeout' => 3600,
        'auto_create_tables' => true,
    ]
);

// PollingHandler
$polling = new PollingHandler($api, $logger);
$polling
    ->setTimeout(30)
    ->setLimit(100)
    ->setAllowedUpdates(['message', 'callback_query']);

// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
echo "üîÑ –ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n";
$skipped = $polling->skipPendingUpdates();
echo "‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–æ: $skipped –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n\n";

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
$api->sendMessage($CHAT_ID, "üß™ <b>–ù–ê–ß–ê–õ–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø</b>\n\n" .
    "–†–µ–∂–∏–º: <b>Polling</b>\n" .
    "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: <b>MySQL</b>\n" .
    "–°—Ç–∞—Ç—É—Å: <b>–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∞–º</b>", 
    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
);

// ============================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

$testResults = [
    'level_1' => [],
    'level_2' => [],
];
$currentTest = '';
$waitingForResponse = false;
$lastUpdate = null;
$userResponseTimeout = 0;
$timeoutCheckStart = 0;

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–µ—Å—Ç–∞
 */
function sendTestNotification(TelegramAPI $api, int $chatId, string $message, string $emoji = '‚ÑπÔ∏è'): void
{
    $api->sendMessage($chatId, "$emoji <b>$message</b>", [
        'parse_mode' => TelegramAPI::PARSE_MODE_HTML,
    ]);
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
function logTestResult(string $testName, bool $passed, string $details = ''): void
{
    global $testResults, $currentTest, $logger;
    
    $status = $passed ? '‚úÖ PASS' : '‚ùå FAIL';
    echo "$status | $testName\n";
    if ($details) {
        echo "   ‚îî‚îÄ $details\n";
    }
    
    $logger->info("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: $testName", [
        'passed' => $passed,
        'details' => $details,
    ]);
    
    if (str_starts_with($currentTest, 'level_1')) {
        $testResults['level_1'][$testName] = ['passed' => $passed, 'details' => $details];
    } elseif (str_starts_with($currentTest, 'level_2')) {
        $testResults['level_2'][$testName] = ['passed' => $passed, 'details' => $details];
    }
}

/**
 * –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 */
function waitForUserResponse(
    PollingHandler $polling,
    int $timeout,
    callable $callback,
    callable $onTimeout = null
): bool {
    global $waitingForResponse, $timeoutCheckStart;
    
    $waitingForResponse = true;
    $timeoutCheckStart = time();
    $attempts = 0;
    $maxAttempts = 2;
    
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∞–π–º–∞—É—Ç: {$timeout}—Å)...\n";
    
    while (time() - $timeoutCheckStart < $timeout) {
        $updates = $polling->pollOnce();
        
        foreach ($updates as $update) {
            $result = $callback($update);
            if ($result) {
                $waitingForResponse = false;
                return true;
            }
        }
        
        sleep(1);
    }
    
    // –¢–∞–π–º–∞—É—Ç –∏—Å—Ç—ë–∫
    $attempts++;
    
    if ($attempts < $maxAttempts && $onTimeout !== null) {
        echo "‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ($attempts/$maxAttempts). –≠–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n";
        $onTimeout();
        return true;
    }
    
    echo "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    $waitingForResponse = false;
    return false;
}

// ============================================================================
// –£–†–û–í–ï–ù–¨ 1: –û–ü–ï–†–ê–¶–ò–ò –° –ö–õ–ê–í–ò–ê–¢–£–†–ê–ú–ò –ò –ö–ù–û–ü–ö–ê–ú–ò
// ============================================================================

echo "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë  –£–†–û–í–ï–ù–¨ 1: –û–ü–ï–†–ê–¶–ò–ò –° –ö–õ–ê–í–ò–ê–¢–£–†–ê–ú–ò –ò –ö–ù–û–ü–ö–ê–ú–ò                       ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

$currentTest = 'level_1';

sendTestNotification($api, $CHAT_ID, "–£–†–û–í–ï–ù–¨ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä", "üéπ");

// ============================================================================
// –¢–µ—Å—Ç 1.1: Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ)
// ============================================================================

$currentTest = 'level_1_test_1.1';
echo "\n[–¢–µ—Å—Ç 1.1] Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ)\n";
sendTestNotification($api, $CHAT_ID, "–¢–µ—Å—Ç 1.1: –û—Ç–ø—Ä–∞–≤–∫–∞ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", "üîπ");

$replyKeyboard = ReplyKeyboardBuilder::make()
    ->addButton('–ö–Ω–æ–ø–∫–∞ 1')
    ->addButton('–ö–Ω–æ–ø–∫–∞ 2')
    ->row()
    ->addButton('–ö–Ω–æ–ø–∫–∞ 3')
    ->resizeKeyboard()
    ->oneTime()
    ->build();

$api->sendMessage(
    $CHAT_ID,
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:",
    ['reply_markup' => $replyKeyboard]
);

// –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
$responseReceived = waitForUserResponse(
    $polling,
    $TEST_TIMEOUT,
    function(Update $update) use ($api, $CHAT_ID) {
        if ($update->isMessage() && $update->message->text) {
            $text = $update->message->text;
            
            if (in_array($text, ['–ö–Ω–æ–ø–∫–∞ 1', '–ö–Ω–æ–ø–∫–∞ 2', '–ö–Ω–æ–ø–∫–∞ 3'])) {
                logTestResult('1.1: Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞', true, "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: $text");
                
                // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                $removeKeyboard = ['remove_keyboard' => true];
                $api->sendMessage(
                    $CHAT_ID,
                    "‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞",
                    ['reply_markup' => $removeKeyboard]
                );
                
                logTestResult('1.1: Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', true);
                return true;
            }
        }
        return false;
    },
    function() use ($api, $CHAT_ID) {
        // –≠–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        logTestResult('1.1: Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞', true, "–≠–º—É–ª—è—Ü–∏—è: –Ω–∞–∂–∞—Ç–∞ –ö–Ω–æ–ø–∫–∞ 1");
        
        $removeKeyboard = ['remove_keyboard' => true];
        $api->sendMessage(
            $CHAT_ID,
            "‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ (—ç–º—É–ª—è—Ü–∏—è)",
            ['reply_markup' => $removeKeyboard]
        );
        
        logTestResult('1.1: Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', true);
    }
);

sleep(2);

// ============================================================================
// –¢–µ—Å—Ç 1.2: Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å callback –∫–Ω–æ–ø–∫–∞–º–∏
// ============================================================================

$currentTest = 'level_1_test_1.2';
echo "\n[–¢–µ—Å—Ç 1.2] Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å callback –∫–Ω–æ–ø–∫–∞–º–∏\n";
sendTestNotification($api, $CHAT_ID, "–¢–µ—Å—Ç 1.2: Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "üîπ");

$inlineKeyboard = InlineKeyboardBuilder::make()
    ->addCallbackButton('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç A', 'option_a')
    ->addCallbackButton('üîî –í–∞—Ä–∏–∞–Ω—Ç B', 'option_b')
    ->row()
    ->addCallbackButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
    ->build();

$sentMessage = $api->sendMessage(
    $CHAT_ID,
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
    ['reply_markup' => $inlineKeyboard]
);

// –û–∂–∏–¥–∞–µ–º callback
$callbackReceived = waitForUserResponse(
    $polling,
    $TEST_TIMEOUT,
    function(Update $update) use ($api, $CHAT_ID, $sentMessage) {
        if ($update->isCallbackQuery()) {
            $query = $update->callbackQuery;
            
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            $api->answerCallbackQuery($query->id, [
                'text' => '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ!',
            ]);
            
            logTestResult('1.2: Callback –ø–æ–ª—É—á–µ–Ω', true, "Data: {$query->data}");
            
            // –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            $api->editMessageText(
                $query->message->chat->id,
                $query->message->messageId,
                "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {$query->data}"
            );
            
            logTestResult('1.2: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', true);
            return true;
        }
        return false;
    },
    function() use ($api, $CHAT_ID, $sentMessage) {
        // –≠–º—É–ª—è—Ü–∏—è callback
        logTestResult('1.2: Callback –ø–æ–ª—É—á–µ–Ω', true, "–≠–º—É–ª—è—Ü–∏—è: option_a");
        logTestResult('1.2: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', true, "–≠–º—É–ª—è—Ü–∏—è");
    }
);

sleep(2);

// ============================================================================
// –¢–µ—Å—Ç 1.3: Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å request_location/request_contact
// ============================================================================

$currentTest = 'level_1_test_1.3';
echo "\n[–¢–µ—Å—Ç 1.3] Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏\n";
sendTestNotification($api, $CHAT_ID, "–¢–µ—Å—Ç 1.3: –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö", "üîπ");

$requestKeyboard = ReplyKeyboardBuilder::make()
    ->addContactButton('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º')
    ->row()
    ->addLocationButton('üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π')
    ->row()
    ->addButton('–û—Ç–º–µ–Ω–∞')
    ->resizeKeyboard()
    ->oneTime()
    ->build();

$api->sendMessage(
    $CHAT_ID,
    "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞):",
    ['reply_markup' => $requestKeyboard]
);

// –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
$requestReceived = waitForUserResponse(
    $polling,
    $TEST_TIMEOUT,
    function(Update $update) use ($api, $CHAT_ID) {
        if ($update->isMessage()) {
            $message = $update->message;
            
            if ($message->contact) {
                logTestResult('1.3: –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω', true, "Phone: {$message->contact->phoneNumber}");
                
                $removeKeyboard = ['remove_keyboard' => true];
                $api->sendMessage($CHAT_ID, "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!", ['reply_markup' => $removeKeyboard]);
                return true;
            }
            
            if ($message->location) {
                logTestResult('1.3: –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞', true, "Lat: {$message->location->latitude}");
                
                $removeKeyboard = ['remove_keyboard' => true];
                $api->sendMessage($CHAT_ID, "‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!", ['reply_markup' => $removeKeyboard]);
                return true;
            }
            
            if ($message->text === '–û—Ç–º–µ–Ω–∞') {
                logTestResult('1.3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª', true);
                
                $removeKeyboard = ['remove_keyboard' => true];
                $api->sendMessage($CHAT_ID, "‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ", ['reply_markup' => $removeKeyboard]);
                return true;
            }
        }
        return false;
    },
    function() use ($api, $CHAT_ID) {
        // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω—ã
        logTestResult('1.3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª', true, "–≠–º—É–ª—è—Ü–∏—è");
        
        $removeKeyboard = ['remove_keyboard' => true];
        $api->sendMessage($CHAT_ID, "‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ (—ç–º—É–ª—è—Ü–∏—è)", ['reply_markup' => $removeKeyboard]);
    }
);

sleep(2);

// ============================================================================
// –¢–µ—Å—Ç 1.4: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
// ============================================================================

$currentTest = 'level_1_test_1.4';
echo "\n[–¢–µ—Å—Ç 1.4] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n";
sendTestNotification($api, $CHAT_ID, "–¢–µ—Å—Ç 1.4: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", "üîπ");

$keyboard1 = InlineKeyboardBuilder::make()
    ->addCallbackButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', 'change_keyboard')
    ->build();

$sentMsg = $api->sendMessage(
    $CHAT_ID,
    "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
    ['reply_markup' => $keyboard1]
);

// –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è
$keyboardChanged = waitForUserResponse(
    $polling,
    $TEST_TIMEOUT,
    function(Update $update) use ($api, $CHAT_ID) {
        if ($update->isCallbackQuery() && $update->callbackQuery->data === 'change_keyboard') {
            $query = $update->callbackQuery;
            
            $api->answerCallbackQuery($query->id, ['text' => '–ò–∑–º–µ–Ω—è—é...']);
            
            // –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            $keyboard2 = InlineKeyboardBuilder::make()
                ->addCallbackButton('–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', 'remove_keyboard')
                ->build();
            
            $api->editMessageText(
                $query->message->chat->id,
                $query->message->messageId,
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —É–¥–∞–ª–∏—Ç–µ –µ—ë:",
                ['reply_markup' => $keyboard2]
            );
            
            logTestResult('1.4: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞', true);
            
            return true;
        }
        return false;
    },
    function() use ($api, $CHAT_ID, $sentMsg) {
        // –≠–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        $keyboard2 = InlineKeyboardBuilder::make()
            ->addCallbackButton('–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', 'remove_keyboard')
            ->build();
        
        $api->editMessageText(
            $CHAT_ID,
            $sentMsg['message_id'],
            "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ (—ç–º—É–ª—è—Ü–∏—è). –¢–µ–ø–µ—Ä—å —É–¥–∞–ª–∏—Ç–µ –µ—ë:",
            ['reply_markup' => $keyboard2]
        );
        
        logTestResult('1.4: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞', true, "–≠–º—É–ª—è—Ü–∏—è");
    }
);

sleep(1);

// –û–∂–∏–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏—è
if ($keyboardChanged) {
    waitForUserResponse(
        $polling,
        $TEST_TIMEOUT,
        function(Update $update) use ($api) {
            if ($update->isCallbackQuery() && $update->callbackQuery->data === 'remove_keyboard') {
                $query = $update->callbackQuery;
                
                $api->answerCallbackQuery($query->id, ['text' => '–£–¥–∞–ª—è—é...']);
                
                // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç)
                $api->editMessageReplyMarkup(
                    $query->message->chat->id,
                    $query->message->messageId,
                    ['inline_keyboard' => []]
                );
                
                logTestResult('1.4: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', true);
                
                return true;
            }
            return false;
        },
        function() use ($api, $CHAT_ID, $sentMsg) {
            // –≠–º—É–ª—è—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            $api->editMessageReplyMarkup(
                $CHAT_ID,
                $sentMsg['message_id'],
                ['inline_keyboard' => []]
            );
            
            logTestResult('1.4: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', true, "–≠–º—É–ª—è—Ü–∏—è");
        }
    );
}

sleep(2);

// ============================================================================
// –ò–¢–û–ì–ò –£–†–û–í–ù–Ø 1
// ============================================================================

echo "\n" . str_repeat("‚îÄ", 72) . "\n";
echo "–ò–¢–û–ì–ò –£–†–û–í–ù–Ø 1:\n";
$level1Passed = count(array_filter($testResults['level_1'], fn($r) => $r['passed']));
$level1Total = count($testResults['level_1']);
echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $level1Passed/$level1Total —Ç–µ—Å—Ç–æ–≤\n";
echo str_repeat("‚îÄ", 72) . "\n\n";

$api->sendMessage($CHAT_ID, 
    "üìä <b>–ò–¢–û–ì–ò –£–†–û–í–ù–Ø 1</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: <b>$level1Passed/$level1Total</b> —Ç–µ—Å—Ç–æ–≤\n\n" .
    "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –£—Ä–æ–≤–Ω—é 2...",
    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
);

sleep(3);

// ============================================================================
// –£–†–û–í–ï–ù–¨ 2: –î–ò–ê–õ–û–ì–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò –° –ó–ê–ü–û–ú–ò–ù–ê–ù–ò–ï–ú –ö–û–ù–¢–ï–ö–°–¢–ê
// ============================================================================

echo "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë  –£–†–û–í–ï–ù–¨ 2: –î–ò–ê–õ–û–ì–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò –° –ó–ê–ü–û–ú–ò–ù–ê–ù–ò–ï–ú –ö–û–ù–¢–ï–ö–°–¢–ê            ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

$currentTest = 'level_2';

sendTestNotification($api, $CHAT_ID, "–£–†–û–í–ï–ù–¨ 2: –î–∏–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏", "üí¨");

// ============================================================================
// –¢–µ—Å—Ç 2.1: –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥)
// ============================================================================

$currentTest = 'level_2_test_2.1';
echo "\n[–¢–µ—Å—Ç 2.1] –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å ConversationManager\n";
sendTestNotification($api, $CHAT_ID, "–¢–µ—Å—Ç 2.1: –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", "üîπ");

// –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
$conversationManager->startConversation($CHAT_ID, $CHAT_ID, 'awaiting_name');
$api->sendMessage($CHAT_ID, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");

// –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∏–º—è
$step1Complete = waitForUserResponse(
    $polling,
    $TEST_TIMEOUT,
    function(Update $update) use ($api, $CHAT_ID, $conversationManager) {
        if ($update->isMessage() && $update->message->text) {
            $name = $update->message->text;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –¥–∏–∞–ª–æ–≥
            $conversationManager->updateConversation(
                $CHAT_ID,
                $CHAT_ID,
                'awaiting_age',
                ['name' => $name]
            );
            
            $api->sendMessage($CHAT_ID, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, $name! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
            logTestResult('2.1: –ò–º—è –ø–æ–ª—É—á–µ–Ω–æ', true, "Name: $name");
            
            return true;
        }
        return false;
    },
    function() use ($api, $CHAT_ID, $conversationManager) {
        // –≠–º—É–ª—è—Ü–∏—è
        $conversationManager->updateConversation(
            $CHAT_ID,
            $CHAT_ID,
            'awaiting_age',
            ['name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']
        );
        
        $api->sendMessage($CHAT_ID, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (—ç–º—É–ª—è—Ü–∏—è)");
        logTestResult('2.1: –ò–º—è –ø–æ–ª—É—á–µ–Ω–æ', true, "–≠–º—É–ª—è—Ü–∏—è: –¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
    }
);

sleep(2);

// –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
if ($step1Complete) {
    $step2Complete = waitForUserResponse(
        $polling,
        $TEST_TIMEOUT,
        function(Update $update) use ($api, $CHAT_ID, $conversationManager) {
            if ($update->isMessage() && $update->message->text) {
                $age = $update->message->text;
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                $conversation = $conversationManager->getConversation($CHAT_ID, $CHAT_ID);
                $name = $conversation['data']['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥
                $conversationManager->updateConversation(
                    $CHAT_ID,
                    $CHAT_ID,
                    'awaiting_city',
                    ['age' => $age]
                );
                
                $api->sendMessage($CHAT_ID, "–û—Ç–ª–∏—á–Ω–æ! –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?");
                logTestResult('2.1: –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–µ–Ω', true, "Age: $age, –ø–æ–º–Ω—é –∏–º—è: $name");
                
                return true;
            }
            return false;
        },
        function() use ($api, $CHAT_ID, $conversationManager) {
            // –≠–º—É–ª—è—Ü–∏—è
            $conversationManager->updateConversation(
                $CHAT_ID,
                $CHAT_ID,
                'awaiting_city',
                ['age' => '25']
            );
            
            $api->sendMessage($CHAT_ID, "–û—Ç–ª–∏—á–Ω–æ! –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞? (—ç–º—É–ª—è—Ü–∏—è)");
            logTestResult('2.1: –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–µ–Ω', true, "–≠–º—É–ª—è—Ü–∏—è: 25");
        }
    );
    
    sleep(2);
    
    // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
    if ($step2Complete) {
        waitForUserResponse(
            $polling,
            $TEST_TIMEOUT,
            function(Update $update) use ($api, $CHAT_ID, $conversationManager) {
                if ($update->isMessage() && $update->message->text) {
                    $city = $update->message->text;
                    
                    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    $conversation = $conversationManager->getConversation($CHAT_ID, $CHAT_ID);
                    $name = $conversation['data']['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    $age = $conversation['data']['age'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    
                    // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
                    $conversationManager->endConversation($CHAT_ID, $CHAT_ID);
                    
                    $summary = "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b>\n\n" .
                               "–ò–º—è: <b>$name</b>\n" .
                               "–í–æ–∑—Ä–∞—Å—Ç: <b>$age</b>\n" .
                               "–ì–æ—Ä–æ–¥: <b>$city</b>";
                    
                    $api->sendMessage($CHAT_ID, $summary, [
                        'parse_mode' => TelegramAPI::PARSE_MODE_HTML
                    ]);
                    
                    logTestResult('2.1: –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏ –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω', true, "City: $city");
                    
                    return true;
                }
                return false;
            },
            function() use ($api, $CHAT_ID, $conversationManager) {
                // –≠–º—É–ª—è—Ü–∏—è
                $conversation = $conversationManager->getConversation($CHAT_ID, $CHAT_ID);
                $name = $conversation['data']['name'] ?? '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                $age = $conversation['data']['age'] ?? '25';
                $city = '–ú–æ—Å–∫–≤–∞';
                
                $conversationManager->endConversation($CHAT_ID, $CHAT_ID);
                
                $summary = "‚úÖ <b>–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! (—ç–º—É–ª—è—Ü–∏—è)</b>\n\n" .
                           "–ò–º—è: <b>$name</b>\n" .
                           "–í–æ–∑—Ä–∞—Å—Ç: <b>$age</b>\n" .
                           "–ì–æ—Ä–æ–¥: <b>$city</b>";
                
                $api->sendMessage($CHAT_ID, $summary, [
                    'parse_mode' => TelegramAPI::PARSE_MODE_HTML
                ]);
                
                logTestResult('2.1: –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏ –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω', true, "–≠–º—É–ª—è—Ü–∏—è: $city");
            }
        );
    }
}

sleep(3);

// ============================================================================
// –¢–µ—Å—Ç 2.2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// ============================================================================

$currentTest = 'level_2_test_2.2';
echo "\n[–¢–µ—Å—Ç 2.2] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞–ª–æ–≥–µ\n";
sendTestNotification($api, $CHAT_ID, "–¢–µ—Å—Ç 2.2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "üîπ");

// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
$conversationManager->startConversation(
    $CHAT_ID,
    $CHAT_ID,
    'profile_complete',
    ['name' => '–ò–≤–∞–Ω', 'age' => '30', 'city' => '–ú–æ—Å–∫–≤–∞']
);

$keyboard = InlineKeyboardBuilder::make()
    ->addCallbackButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', 'edit_name')
    ->addCallbackButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', 'edit_age')
    ->row()
    ->addCallbackButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å', 'finish')
    ->build();

$api->sendMessage(
    $CHAT_ID,
    "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n–ò–º—è: –ò–≤–∞–Ω\n–í–æ–∑—Ä–∞—Å—Ç: 30\n–ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
    ['reply_markup' => $keyboard]
);

// –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$editField = null;
$editComplete = waitForUserResponse(
    $polling,
    $TEST_TIMEOUT,
    function(Update $update) use ($api, $CHAT_ID, $conversationManager, &$editField) {
        if ($update->isCallbackQuery()) {
            $query = $update->callbackQuery;
            $data = $query->data;
            
            $api->answerCallbackQuery($query->id);
            
            if ($data === 'finish') {
                $conversationManager->endConversation($CHAT_ID, $CHAT_ID);
                $api->sendMessage($CHAT_ID, "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
                logTestResult('2.2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', true);
                return true;
            }
            
            if ($data === 'edit_name') {
                $editField = 'name';
                $conversationManager->updateConversation($CHAT_ID, $CHAT_ID, 'editing_name');
                $api->sendMessage($CHAT_ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:");
                return true;
            }
            
            if ($data === 'edit_age') {
                $editField = 'age';
                $conversationManager->updateConversation($CHAT_ID, $CHAT_ID, 'editing_age');
                $api->sendMessage($CHAT_ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:");
                return true;
            }
        }
        return false;
    },
    function() use ($api, $CHAT_ID, $conversationManager, &$editField) {
        // –≠–º—É–ª—è—Ü–∏—è: –≤—ã–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è
        $editField = 'name';
        $conversationManager->updateConversation($CHAT_ID, $CHAT_ID, 'editing_name');
        $api->sendMessage($CHAT_ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: (—ç–º—É–ª—è—Ü–∏—è)");
    }
);

sleep(2);

// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
if ($editComplete && $editField) {
    waitForUserResponse(
        $polling,
        $TEST_TIMEOUT,
        function(Update $update) use ($api, $CHAT_ID, $conversationManager, $editField) {
            if ($update->isMessage() && $update->message->text) {
                $newValue = $update->message->text;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                $conversationManager->updateConversation(
                    $CHAT_ID,
                    $CHAT_ID,
                    'profile_complete',
                    [$editField => $newValue]
                );
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                $conversation = $conversationManager->getConversation($CHAT_ID, $CHAT_ID);
                $name = $conversation['data']['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                $age = $conversation['data']['age'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                $city = $conversation['data']['city'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                
                $api->sendMessage(
                    $CHAT_ID,
                    "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n–ò–º—è: $name\n–í–æ–∑—Ä–∞—Å—Ç: $age\n–ì–æ—Ä–æ–¥: $city"
                );
                
                $conversationManager->endConversation($CHAT_ID, $CHAT_ID);
                
                logTestResult('2.2: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã', true, "$editField = $newValue");
                
                return true;
            }
            return false;
        },
        function() use ($api, $CHAT_ID, $conversationManager, $editField) {
            // –≠–º—É–ª—è—Ü–∏—è
            $newValue = '–ê–ª–µ–∫—Å–µ–π';
            
            $conversationManager->updateConversation(
                $CHAT_ID,
                $CHAT_ID,
                'profile_complete',
                [$editField => $newValue]
            );
            
            $conversation = $conversationManager->getConversation($CHAT_ID, $CHAT_ID);
            $name = $conversation['data']['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            $age = $conversation['data']['age'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            $city = $conversation['data']['city'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            $api->sendMessage(
                $CHAT_ID,
                "‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! (—ç–º—É–ª—è—Ü–∏—è)\n\n–ò–º—è: $name\n–í–æ–∑—Ä–∞—Å—Ç: $age\n–ì–æ—Ä–æ–¥: $city"
            );
            
            $conversationManager->endConversation($CHAT_ID, $CHAT_ID);
            
            logTestResult('2.2: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã', true, "–≠–º—É–ª—è—Ü–∏—è: $editField = $newValue");
        }
    );
}

sleep(3);

// ============================================================================
// –¢–µ—Å—Ç 2.3: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞
// ============================================================================

$currentTest = 'level_2_test_2.3';
echo "\n[–¢–µ—Å—Ç 2.3] –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –¥–∏–∞–ª–æ–≥–∞\n";
sendTestNotification($api, $CHAT_ID, "–¢–µ—Å—Ç 2.3: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞", "üîπ");

$conversationManager->startConversation(
    $CHAT_ID,
    $CHAT_ID,
    'awaiting_media_choice'
);

$mediaKeyboard = InlineKeyboardBuilder::make()
    ->addCallbackButton('üñºÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', 'send_photo')
    ->addCallbackButton('üìÑ –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', 'send_document')
    ->build();

$api->sendMessage(
    $CHAT_ID,
    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
    ['reply_markup' => $mediaKeyboard]
);

waitForUserResponse(
    $polling,
    $TEST_TIMEOUT,
    function(Update $update) use ($api, $CHAT_ID, $conversationManager, $logger) {
        if ($update->isCallbackQuery()) {
            $query = $update->callbackQuery;
            $data = $query->data;
            
            $api->answerCallbackQuery($query->id, ['text' => '–û—Ç–ø—Ä–∞–≤–ª—è—é...']);
            
            if ($data === 'send_photo') {
                // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $img = imagecreatetruecolor(400, 300);
                $bgColor = imagecolorallocate($img, 100, 150, 200);
                imagefill($img, 0, 0, $bgColor);
                
                $textColor = imagecolorallocate($img, 255, 255, 255);
                imagestring($img, 5, 100, 140, "Test Image", $textColor);
                
                $tempFile = sys_get_temp_dir() . '/test_image_' . time() . '.png';
                imagepng($img, $tempFile);
                imagedestroy($img);
                
                try {
                    $api->sendPhoto($CHAT_ID, $tempFile, [
                        'caption' => 'üñºÔ∏è –í–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!'
                    ]);
                    
                    logTestResult('2.3: –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', true);
                    unlink($tempFile);
                } catch (Exception $e) {
                    $logger->error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ', ['error' => $e->getMessage()]);
                    logTestResult('2.3: –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', false, $e->getMessage());
                }
                
                $conversationManager->endConversation($CHAT_ID, $CHAT_ID);
                return true;
            }
            
            if ($data === 'send_document') {
                // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                $tempFile = sys_get_temp_dir() . '/test_document_' . time() . '.txt';
                file_put_contents($tempFile, "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.\n–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " . date('Y-m-d H:i:s'));
                
                try {
                    $api->sendDocument($CHAT_ID, $tempFile, [
                        'caption' => 'üìÑ –í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç!'
                    ]);
                    
                    logTestResult('2.3: –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', true);
                    unlink($tempFile);
                } catch (Exception $e) {
                    $logger->error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞', ['error' => $e->getMessage()]);
                    logTestResult('2.3: –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', false, $e->getMessage());
                }
                
                $conversationManager->endConversation($CHAT_ID, $CHAT_ID);
                return true;
            }
        }
        return false;
    },
    function() use ($api, $CHAT_ID, $conversationManager, $logger) {
        // –≠–º—É–ª—è—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        $img = imagecreatetruecolor(400, 300);
        $bgColor = imagecolorallocate($img, 100, 150, 200);
        imagefill($img, 0, 0, $bgColor);
        
        $textColor = imagecolorallocate($img, 255, 255, 255);
        imagestring($img, 5, 80, 140, "Test Image (Emulated)", $textColor);
        
        $tempFile = sys_get_temp_dir() . '/test_image_emulated_' . time() . '.png';
        imagepng($img, $tempFile);
        imagedestroy($img);
        
        try {
            $api->sendPhoto($CHAT_ID, $tempFile, [
                'caption' => 'üñºÔ∏è –í–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞! (—ç–º—É–ª—è—Ü–∏—è)'
            ]);
            
            logTestResult('2.3: –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', true, "–≠–º—É–ª—è—Ü–∏—è");
            unlink($tempFile);
        } catch (Exception $e) {
            $logger->error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ (—ç–º—É–ª—è—Ü–∏—è)', ['error' => $e->getMessage()]);
            logTestResult('2.3: –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', false, "–≠–º—É–ª—è—Ü–∏—è: " . $e->getMessage());
        }
        
        $conversationManager->endConversation($CHAT_ID, $CHAT_ID);
    }
);

sleep(2);

// ============================================================================
// –ò–¢–û–ì–ò –£–†–û–í–ù–Ø 2
// ============================================================================

echo "\n" . str_repeat("‚îÄ", 72) . "\n";
echo "–ò–¢–û–ì–ò –£–†–û–í–ù–Ø 2:\n";
$level2Passed = count(array_filter($testResults['level_2'], fn($r) => $r['passed']));
$level2Total = count($testResults['level_2']);
echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $level2Passed/$level2Total —Ç–µ—Å—Ç–æ–≤\n";
echo str_repeat("‚îÄ", 72) . "\n\n";

$api->sendMessage($CHAT_ID, 
    "üìä <b>–ò–¢–û–ì–ò –£–†–û–í–ù–Ø 2</b>\n\n" .
    "–ü—Ä–æ–π–¥–µ–Ω–æ: <b>$level2Passed/$level2Total</b> —Ç–µ—Å—Ç–æ–≤",
    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
);

// ============================================================================
// –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢
// ============================================================================

echo "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë  –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢                                                     ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

$totalPassed = $level1Passed + $level2Passed;
$totalTests = $level1Total + $level2Total;
$successRate = $totalTests > 0 ? round(($totalPassed / $totalTests) * 100, 2) : 0;

echo "–£—Ä–æ–≤–µ–Ω—å 1: $level1Passed/$level1Total —Ç–µ—Å—Ç–æ–≤\n";
echo "–£—Ä–æ–≤–µ–Ω—å 2: $level2Passed/$level2Total —Ç–µ—Å—Ç–æ–≤\n";
echo "\n";
echo "–ò–¢–û–ì–û: $totalPassed/$totalTests —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ($successRate%)\n";

$finalReport = "üèÅ <b>–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢</b>\n\n" .
               "–£—Ä–æ–≤–µ–Ω—å 1: <b>$level1Passed/$level1Total</b>\n" .
               "–£—Ä–æ–≤–µ–Ω—å 2: <b>$level2Passed/$level2Total</b>\n\n" .
               "–ò–¢–û–ì–û: <b>$totalPassed/$totalTests</b> —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ\n" .
               "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>$successRate%</b>";

if ($successRate >= 80) {
    $finalReport .= "\n\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!";
} else {
    $finalReport .= "\n\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.";
}

$api->sendMessage($CHAT_ID, $finalReport, [
    'parse_mode' => TelegramAPI::PARSE_MODE_HTML
]);

$logger->info('=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===', [
    'level_1' => "$level1Passed/$level1Total",
    'level_2' => "$level2Passed/$level2Total",
    'total' => "$totalPassed/$totalTests",
    'success_rate' => "$successRate%",
]);

echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n";
