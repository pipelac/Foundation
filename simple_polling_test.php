<?php

declare(strict_types=1);

require_once __DIR__ . '/autoload.php';

use App\Component\Logger;
use App\Component\MySQL;
use App\Component\Http;
use App\Component\TelegramBot\Core\TelegramAPI;
use App\Component\TelegramBot\Core\PollingHandler;
use App\Component\TelegramBot\Core\ConversationManager;
use App\Component\TelegramBot\Keyboards\InlineKeyboardBuilder;
use App\Component\TelegramBot\Keyboards\ReplyKeyboardBuilder;
use App\Component\TelegramBot\Entities\Update;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
$logger = new Logger([
    'directory' => __DIR__ . '/logs',
    'file_name' => 'simple_test.log',
    'max_files' => 5,
    'max_file_size' => 10485760,
]);
$logger->info('========================================');
$logger->info('–ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–û–ì–û –¢–ï–°–¢–ê TELEGRAMBOT');
$logger->info('========================================');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
$botToken = '8327641497:AAFTHb3xSTpP3Q6Peg8-OK4nTWTfF7iMWfI';
$testChatId = 366442475;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL
$dbConfig = [
    'host' => 'localhost',
    'database' => 'test_telegram_bot',
    'username' => 'root',
    'password' => '',
    'charset' => 'utf8mb4',
];

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É mysql –¥–ª—è –¥–∞–º–ø–æ–≤
if (!is_dir(__DIR__ . '/mysql')) {
    mkdir(__DIR__ . '/mysql', 0755, true);
}

$api = null;
$db = null;

try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MySQL
    $logger->info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL...');
    $db = new MySQL($dbConfig, $logger);
    $logger->info('‚úì MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
    $logger->info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞...');
    $http = new Http([
        'timeout' => 60,
        'connect_timeout' => 10,
    ], $logger);
    $logger->info('‚úì HTTP –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram API
    $logger->info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram API...');
    $api = new TelegramAPI($botToken, $http, $logger);
    $logger->info('‚úì Telegram API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConversationManager
    $logger->info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConversationManager...');
    $conversationManager = new ConversationManager(
        $db,
        $logger,
        [
            'enabled' => true,
            'timeout' => 7200,
            'auto_create_tables' => true,
        ]
    );
    $logger->info('‚úì ConversationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PollingHandler
    $logger->info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PollingHandler...');
    $pollingHandler = new PollingHandler($api, $logger);
    $pollingHandler->setTimeout(30);
    $pollingHandler->setLimit(10);
    $logger->info('‚úì PollingHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    $logger->info('–ü—Ä–æ–ø—É—Å–∫ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    $skipped = $pollingHandler->skipPendingUpdates();
    $logger->info("‚úì –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $skipped");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    $api->sendMessage(
        $testChatId,
        "üöÄ <b>–ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–û–ì–û –¢–ï–°–¢–ê</b>\n\n" .
        "–†–µ–∂–∏–º: Polling\n" .
        "MySQL: –ü–æ–¥–∫–ª—é—á–µ–Ω ‚úì\n" .
        "–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã: ‚úì\n\n" .
        "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...",
        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
    );

    $logger->info('–¢–µ—Å—Ç 1: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    $api->sendMessage(
        $testChatId,
        "üìù <b>–¢–ï–°–¢ 1: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –±–æ—Ç—É.",
        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
    );

    $level1Done = false;
    $timeout = time() + 20;
    while (!$level1Done && time() < $timeout) {
        $updates = $pollingHandler->pollOnce();
        foreach ($updates as $update) {
            if ($update->message && $update->message->text) {
                $text = $update->message->text;
                $chatId = $update->message->chat->id;
                $userId = $update->message->from->id;

                $conversationManager->saveUser(
                    $userId,
                    $update->message->from->firstName,
                    $update->message->from->username,
                    $update->message->from->lastName
                );

                $api->sendMessage(
                    $chatId,
                    "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: <code>" . htmlspecialchars($text) . "</code>",
                    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                );

                $level1Done = true;
                $logger->info("‚úì –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: $text");
                break;
            }
        }
        if (!$level1Done) sleep(1);
    }

    sleep(2);

    $logger->info('–¢–µ—Å—Ç 2: Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞');
    $keyboard = ReplyKeyboardBuilder::make()
        ->addButton('‚úÖ –î–∞')
        ->addButton('‚ùå –ù–µ—Ç')
        ->row()
        ->addButton('üîô –ù–∞–∑–∞–¥')
        ->resizeKeyboard()
        ->oneTime()
        ->build();

    $api->sendMessage(
        $testChatId,
        "üìù <b>–¢–ï–°–¢ 2: Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞</b>\n\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É.",
        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML, 'reply_markup' => $keyboard]
    );

    $level2Done = false;
    $timeout = time() + 20;
    while (!$level2Done && time() < $timeout) {
        $updates = $pollingHandler->pollOnce();
        foreach ($updates as $update) {
            if ($update->message && $update->message->text && in_array($update->message->text, ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç', 'üîô –ù–∞–∑–∞–¥'])) {
                $text = $update->message->text;
                $chatId = $update->message->chat->id;

                $api->sendMessage(
                    $chatId,
                    "‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: $text",
                    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                );

                $level2Done = true;
                $logger->info("‚úì –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: $text");
                break;
            }
        }
        if (!$level2Done) sleep(1);
    }

    sleep(2);

    $logger->info('–¢–µ—Å—Ç 3: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞');
    $inlineKeyboard = InlineKeyboardBuilder::make()
        ->addCallbackButton('üî¥ –ö–Ω–æ–ø–∫–∞ 1', 'btn_1')
        ->addCallbackButton('üü¢ –ö–Ω–æ–ø–∫–∞ 2', 'btn_2')
        ->row()
        ->addCallbackButton('üîµ –ö–Ω–æ–ø–∫–∞ 3', 'btn_3')
        ->build();

    $api->sendMessage(
        $testChatId,
        "üìù <b>–¢–ï–°–¢ 3: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞</b>\n\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É.",
        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML, 'reply_markup' => $inlineKeyboard]
    );

    $level3Done = false;
    $timeout = time() + 20;
    while (!$level3Done && time() < $timeout) {
        $updates = $pollingHandler->pollOnce();
        foreach ($updates as $update) {
            if ($update->callbackQuery) {
                $callbackData = $update->callbackQuery->data;
                $chatId = $update->callbackQuery->message->chat->id;
                $messageId = $update->callbackQuery->message->messageId;

                $api->answerCallbackQuery($update->callbackQuery->id, '–ü–æ–ª—É—á–µ–Ω–æ!');
                $api->editMessageText(
                    $chatId,
                    $messageId,
                    "‚úÖ Callback –ø–æ–ª—É—á–µ–Ω: <code>$callbackData</code>",
                    ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                );

                $level3Done = true;
                $logger->info("‚úì –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: $callbackData");
                break;
            }
        }
        if (!$level3Done) sleep(1);
    }

    sleep(2);

    $logger->info('–¢–µ—Å—Ç 4: –î–∏–∞–ª–æ–≥ —Å –ø–∞–º—è—Ç—å—é');
    $api->sendMessage(
        $testChatId,
        "üìù <b>–¢–ï–°–¢ 4: –î–∏–∞–ª–æ–≥</b>\n\n–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
    );

    $dialogData = [];
    $currentStep = 'awaiting_name';
    $timeout = time() + 60;

    while ($currentStep !== 'completed' && time() < $timeout) {
        $updates = $pollingHandler->pollOnce();
        foreach ($updates as $update) {
            if ($update->message && $update->message->text) {
                $text = $update->message->text;
                $chatId = $update->message->chat->id;
                $userId = $update->message->from->id;

                switch ($currentStep) {
                    case 'awaiting_name':
                        $dialogData['name'] = $text;
                        $conversationManager->startConversation($chatId, $userId, 'awaiting_age', $dialogData);
                        $api->sendMessage(
                            $chatId,
                            "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, $text!\n\n–í–æ–ø—Ä–æ—Å 2: –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
                            ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                        );
                        $currentStep = 'awaiting_age';
                        $logger->info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–º—è: $text");
                        break;

                    case 'awaiting_age':
                        $dialogData['age'] = $text;
                        $conversationManager->updateConversation($chatId, $userId, 'awaiting_city', $dialogData);
                        $api->sendMessage(
                            $chatId,
                            "–û—Ç–ª–∏—á–Ω–æ!\n\n–í–æ–ø—Ä–æ—Å 3: –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?",
                            ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                        );
                        $currentStep = 'awaiting_city';
                        $logger->info("–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç: $text");
                        break;

                    case 'awaiting_city':
                        $dialogData['city'] = $text;
                        $conversationManager->updateConversation($chatId, $userId, 'completed', $dialogData);
                        $api->sendMessage(
                            $chatId,
                            "‚úÖ <b>–¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω!</b>\n\n" .
                            "üìù –î–∞–Ω–Ω—ã–µ:\n" .
                            "üë§ –ò–º—è: {$dialogData['name']}\n" .
                            "üéÇ –í–æ–∑—Ä–∞—Å—Ç: {$dialogData['age']}\n" .
                            "üèô –ì–æ—Ä–æ–¥: {$dialogData['city']}\n\n" .
                            "üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î!",
                            ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
                        );
                        $conversationManager->endConversation($chatId, $userId);
                        $currentStep = 'completed';
                        $logger->info("‚úì –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω");
                        break;
                }
                break;
            }
        }
        if ($currentStep !== 'completed') sleep(1);
    }

    sleep(2);

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    $stats = $conversationManager->getStatistics();
    $api->sendMessage(
        $testChatId,
        "üéâ <b>–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!</b>\n\n" .
        "‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: OK\n" .
        "‚úÖ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: OK\n" .
        "‚úÖ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: OK\n" .
        "‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–∞–º—è—Ç—å—é: OK\n\n" .
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" .
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {$stats['total']}\n" .
        "‚Ä¢ MySQL: –†–∞–±–æ—Ç–∞–µ—Ç\n" .
        "‚Ä¢ Polling: –°—Ç–∞–±–∏–ª–µ–Ω\n\n" .
        "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!",
        ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
    );

    // –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø—ã —Ç–∞–±–ª–∏—Ü
    $logger->info('–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–æ–≤ —Ç–∞–±–ª–∏—Ü MySQL...');
    $tables = ['telegram_bot_users', 'telegram_bot_conversations'];

    foreach ($tables as $table) {
        $dumpFile = __DIR__ . "/mysql/{$table}.sql";
        exec("sudo mysqldump -u root test_telegram_bot $table > $dumpFile 2>&1", $output, $returnCode);
        if ($returnCode === 0 && file_exists($dumpFile)) {
            $logger->info("‚úì –î–∞–º–ø $table —Å–æ–∑–¥–∞–Ω");
        }
    }

    // –ü–æ–ª–Ω—ã–π –¥–∞–º–ø
    $fullDumpFile = __DIR__ . "/mysql/full_database_dump.sql";
    exec("sudo mysqldump -u root test_telegram_bot > $fullDumpFile 2>&1", $output, $returnCode);
    if ($returnCode === 0) {
        $logger->info("‚úì –ü–æ–ª–Ω—ã–π –¥–∞–º–ø –ë–î —Å–æ–∑–¥–∞–Ω");
    }

    $logger->info('========================================');
    $logger->info('–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û');
    $logger->info('========================================');

} catch (\Exception $e) {
    $logger->error('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê', [
        'message' => $e->getMessage(),
        'file' => $e->getFile(),
        'line' => $e->getLine(),
    ]);

    if ($api !== null) {
        try {
            $api->sendMessage(
                $testChatId,
                "‚ùå <b>–û–®–ò–ë–ö–ê</b>\n\n" .
                "–û—à–∏–±–∫–∞: <code>" . htmlspecialchars($e->getMessage()) . "</code>\n\n" .
                "–§–∞–π–ª: {$e->getFile()}:{$e->getLine()}",
                ['parse_mode' => TelegramAPI::PARSE_MODE_HTML]
            );
        } catch (\Exception $notifyError) {
            $logger->error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ');
        }
    }

    exit(1);
}

$logger->info('–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
