<?php

declare(strict_types=1);

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ Logger
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Logger
 * –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
 */

require_once __DIR__ . '/autoload.php';

use App\Component\Logger;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
define('GREEN', "\033[32m");
define('YELLOW', "\033[33m");
define('BLUE', "\033[34m");
define('CYAN', "\033[36m");
define('RESET', "\033[0m");
define('BOLD', "\033[1m");

echo BOLD . CYAN . "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "           –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–õ–ê–°–°–ê Logger               \n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo RESET . "\n";

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
$demoDir = sys_get_temp_dir() . '/logger_demo_' . date('Y-m-d_H-i-s');
mkdir($demoDir, 0777, true);

echo YELLOW . "üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: " . RESET . $demoDir . "\n\n";

// ===============================================================================
// –ü–†–ò–ú–ï–† 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
// ===============================================================================
echo BOLD . "‚îÅ‚îÅ‚îÅ –ü–†–ò–ú–ï–† 1: –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚îÅ‚îÅ‚îÅ\n" . RESET;

$appLogger = new Logger([
    'directory' => $demoDir . '/app',
    'file_name' => 'application.log',
    'max_files' => 5,
    'max_file_size' => 2, // MB
]);

$appLogger->info('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
$appLogger->debug('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', ['config_file' => '/etc/app/config.json']);
$appLogger->info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', [
    'host' => 'localhost',
    'database' => 'myapp',
    'user' => 'appuser'
]);
$appLogger->warning('–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î', [
    'query' => 'SELECT * FROM users WHERE active = 1',
    'duration_ms' => 1523
]);
$appLogger->flush();

echo GREEN . "‚úì –ó–∞–ø–∏—Å–∞–Ω–æ 4 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ application.log\n" . RESET;
displayLogContent($demoDir . '/app/application.log');

// ===============================================================================
// –ü–†–ò–ú–ï–† 2: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
// ===============================================================================
echo "\n" . BOLD . "‚îÅ‚îÅ‚îÅ –ü–†–ò–ú–ï–† 2: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ ‚îÅ‚îÅ‚îÅ\n" . RESET;

$httpLogger = new Logger([
    'directory' => $demoDir . '/http',
    'file_name' => 'access.log',
    'pattern' => '{timestamp} [{level}] {message}',
    'date_format' => 'd/M/Y:H:i:s O',
    'log_buffer_size' => 10, // KB
]);

// –ò–º–∏—Ç–∞—Ü–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
$requests = [
    ['method' => 'GET', 'path' => '/', 'status' => 200, 'time' => 45],
    ['method' => 'POST', 'path' => '/api/users', 'status' => 201, 'time' => 123],
    ['method' => 'GET', 'path' => '/api/products', 'status' => 200, 'time' => 89],
    ['method' => 'DELETE', 'path' => '/api/users/123', 'status' => 404, 'time' => 34],
    ['method' => 'POST', 'path' => '/login', 'status' => 401, 'time' => 67],
];

foreach ($requests as $req) {
    $level = $req['status'] >= 400 ? 'error' : 'info';
    $httpLogger->log(
        $level,
        "{$req['method']} {$req['path']} - {$req['status']} ({$req['time']}ms)",
        ['ip' => '192.168.1.100', 'user_agent' => 'Mozilla/5.0']
    );
}
$httpLogger->flush();

echo GREEN . "‚úì –ó–∞–ø–∏—Å–∞–Ω–æ " . count($requests) . " HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ access.log\n" . RESET;
displayLogContent($demoDir . '/http/access.log');

// ===============================================================================
// –ü–†–ò–ú–ï–† 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
// ===============================================================================
echo "\n" . BOLD . "‚îÅ‚îÅ‚îÅ –ü–†–ò–ú–ï–† 3: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚îÅ‚îÅ‚îÅ\n" . RESET;

$errorLogger = new Logger([
    'directory' => $demoDir . '/errors',
    'file_name' => 'error.log',
    'pattern' => '{timestamp} {level} {message} {context}',
]);

// –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–æ–∫
try {
    throw new RuntimeException('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É API');
} catch (RuntimeException $e) {
    $errorLogger->error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API', [
        'exception' => get_class($e),
        'message' => $e->getMessage(),
        'file' => $e->getFile(),
        'line' => $e->getLine(),
        'trace' => array_slice($e->getTrace(), 0, 3)
    ]);
}

try {
    throw new InvalidArgumentException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å: "invalid-email"');
} catch (InvalidArgumentException $e) {
    $errorLogger->warning('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', [
        'type' => 'validation_error',
        'field' => 'email',
        'value' => 'invalid-email',
        'error' => $e->getMessage()
    ]);
}

$errorLogger->critical('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã', [
    'error' => '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ',
    'free_space' => '100MB',
    'required' => '500MB',
    'action' => '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
]);

$errorLogger->flush();

echo GREEN . "‚úì –ó–∞–ø–∏—Å–∞–Ω–æ 3 –æ—à–∏–±–∫–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –≤ error.log\n" . RESET;
displayLogContent($demoDir . '/errors/error.log');

// ===============================================================================
// –ü–†–ò–ú–ï–† 4: –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—è–º
// ===============================================================================
echo "\n" . BOLD . "‚îÅ‚îÅ‚îÅ –ü–†–ò–ú–ï–† 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—è–º —Å–∏—Å—Ç–µ–º—ã ‚îÅ‚îÅ‚îÅ\n" . RESET;

// –ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
$authLogger = new Logger([
    'directory' => $demoDir . '/modules',
    'file_name' => 'auth.log',
]);

$authLogger->info('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞', ['username' => 'admin', 'ip' => '192.168.1.50']);
$authLogger->info('–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', ['user_id' => 123, 'session_id' => 'abc123']);
$authLogger->warning('–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞', [
    'username' => 'hacker',
    'ip' => '45.67.89.12',
    'reason' => '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
    'attempts' => 5
]);
$authLogger->flush();

// –ú–æ–¥—É–ª—å –ø–ª–∞—Ç–µ–∂–µ–π
$paymentLogger = new Logger([
    'directory' => $demoDir . '/modules',
    'file_name' => 'payments.log',
]);

$paymentLogger->info('–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω', [
    'order_id' => 'ORD-12345',
    'amount' => 1999.99,
    'currency' => 'RUB',
    'user_id' => 456
]);
$paymentLogger->info('–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', [
    'transaction_id' => 'TXN-67890',
    'status' => 'success',
    'payment_method' => 'card'
]);
$paymentLogger->error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞', [
    'order_id' => 'ORD-12346',
    'error_code' => 'INSUFFICIENT_FUNDS',
    'amount' => 5000.00
]);
$paymentLogger->flush();

echo GREEN . "‚úì –°–æ–∑–¥–∞–Ω–æ 2 –º–æ–¥—É–ª—å–Ω—ã—Ö –ª–æ–≥–∞ (auth.log, payments.log)\n" . RESET;
echo CYAN . "  auth.log:" . RESET . "\n";
displayLogContent($demoDir . '/modules/auth.log', 3);
echo CYAN . "  payments.log:" . RESET . "\n";
displayLogContent($demoDir . '/modules/payments.log', 3);

// ===============================================================================
// –ü–†–ò–ú–ï–† 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
// ===============================================================================
echo "\n" . BOLD . "‚îÅ‚îÅ‚îÅ –ü–†–ò–ú–ï–† 5: –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÅ‚îÅ‚îÅ\n" . RESET;

$perfLogger = new Logger([
    'directory' => $demoDir . '/performance',
    'file_name' => 'high_volume.log',
    'log_buffer_size' => 64, // 64 KB –±—É—Ñ–µ—Ä
]);

$startTime = microtime(true);

// –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
for ($i = 1; $i <= 500; $i++) {
    $perfLogger->debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ #{$i}", [
        'queue' => 'default',
        'worker' => 'worker-' . ($i % 5 + 1),
        'duration_ms' => rand(10, 100)
    ]);
}

$perfLogger->flush();
$duration = microtime(true) - $startTime;

echo GREEN . "‚úì –ó–∞–ø–∏—Å–∞–Ω–æ 500 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ " . number_format($duration * 1000, 2) . " –º—Å\n" . RESET;
echo CYAN . "  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " . number_format(500 / $duration, 0) . " –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫\n" . RESET;
displayLogContent($demoDir . '/performance/high_volume.log', 5);

// ===============================================================================
// –ü–†–ò–ú–ï–† 6: –†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö
// ===============================================================================
echo "\n" . BOLD . "‚îÅ‚îÅ‚îÅ –ü–†–ò–ú–ï–† 6: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ ‚îÅ‚îÅ‚îÅ\n" . RESET;

$rotatingLogger = new Logger([
    'directory' => $demoDir . '/rotation',
    'file_name' => 'rotating.log',
    'max_files' => 3,
    'max_file_size' => 1, // 1 MB –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    'log_buffer_size' => 0, // –ë–µ–∑ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
]);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä–æ—Ç–∞—Ü–∏–∏
$largeMessage = str_repeat('–ê', 5000); // 5KB —Å–æ–æ–±—â–µ–Ω–∏–µ

for ($i = 1; $i <= 300; $i++) {
    $rotatingLogger->info("–ë–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{$i}: {$largeMessage}");
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
$files = glob($demoDir . '/rotation/*.log*');
sort($files);

echo GREEN . "‚úì –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Ä–æ—Ç–∞—Ü–∏–∏: " . count($files) . "\n" . RESET;
foreach ($files as $file) {
    $size = filesize($file);
    echo CYAN . "  " . basename($file) . " - " . number_format($size / 1024, 2) . " KB\n" . RESET;
}

// ===============================================================================
// –ü–†–ò–ú–ï–† 7: –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
// ===============================================================================
echo "\n" . BOLD . "‚îÅ‚îÅ‚îÅ –ü–†–ò–ú–ï–† 7: –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (enable/disable) ‚îÅ‚îÅ‚îÅ\n" . RESET;

$conditionalLogger = new Logger([
    'directory' => $demoDir . '/conditional',
    'file_name' => 'conditional.log',
]);

$debugMode = false; // –û—Ç–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏ –≤ production

if (!$debugMode) {
    $conditionalLogger->disable();
}

$conditionalLogger->debug('–≠—Ç–æ debug —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ)');
$conditionalLogger->info('–≠—Ç–æ info —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–∂–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ)');

$conditionalLogger->enable();

$conditionalLogger->info('–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ)');
$conditionalLogger->error('–û—à–∏–±–∫–∞ (–±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞)');
$conditionalLogger->flush();

echo GREEN . "‚úì –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n" . RESET;
displayLogContent($demoDir . '/conditional/conditional.log');

// ===============================================================================
// –ü–†–ò–ú–ï–† 8: –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
// ===============================================================================
echo "\n" . BOLD . "‚îÅ‚îÅ‚îÅ –ü–†–ò–ú–ï–† 8: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÅ‚îÅ‚îÅ\n" . RESET;

// JSON —Ñ–æ—Ä–º–∞—Ç
$jsonLogger = new Logger([
    'directory' => $demoDir . '/formats',
    'file_name' => 'json_format.log',
    'pattern' => '{"time":"{timestamp}","level":"{level}","msg":"{message}","data":{context}}',
    'date_format' => 'c', // ISO 8601
]);

$jsonLogger->info('API request received', [
    'endpoint' => '/api/v1/users',
    'method' => 'GET',
    'response_time' => 145
]);
$jsonLogger->flush();

// –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
$simpleLogger = new Logger([
    'directory' => $demoDir . '/formats',
    'file_name' => 'simple_format.log',
    'pattern' => '[{level}] {message}',
]);

$simpleLogger->warning('–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ');
$simpleLogger->error('–ü—Ä–æ—Å—Ç–∞—è –æ—à–∏–±–∫–∞');
$simpleLogger->flush();

echo GREEN . "‚úì –°–æ–∑–¥–∞–Ω–æ 2 –ª–æ–≥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏\n" . RESET;
echo CYAN . "  JSON —Ñ–æ—Ä–º–∞—Ç:" . RESET . "\n";
displayLogContent($demoDir . '/formats/json_format.log');
echo CYAN . "  –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç:" . RESET . "\n";
displayLogContent($demoDir . '/formats/simple_format.log');

// ===============================================================================
// –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
// ===============================================================================
echo "\n" . BOLD . CYAN;
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "                              –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê                              \n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo RESET;

$totalFiles = countFiles($demoDir);
$totalSize = getDirSize($demoDir);

echo "\n";
echo YELLOW . "üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: " . RESET . $totalFiles . "\n";
echo YELLOW . "üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤: " . RESET . number_format($totalSize / 1024, 2) . " KB\n";
echo YELLOW . "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏: " . RESET . $demoDir . "\n";
echo "\n";

echo GREEN . "‚úì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n" . RESET;
echo CYAN . "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–æ–≤.\n" . RESET;
echo "\n";

// ===============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ===============================================================================

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥-—Ñ–∞–π–ª–∞
 */
function displayLogContent(string $filePath, int $maxLines = 10): void
{
    if (!file_exists($filePath)) {
        echo "  " . YELLOW . "(—Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω)\n" . RESET;
        return;
    }
    
    $content = file_get_contents($filePath);
    $lines = explode("\n", trim($content));
    $displayLines = array_slice($lines, 0, $maxLines);
    
    foreach ($displayLines as $line) {
        if (trim($line) !== '') {
            // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            $displayLine = strlen($line) > 100 ? substr($line, 0, 97) . '...' : $line;
            echo "  " . RESET . $displayLine . "\n";
        }
    }
    
    $remaining = count($lines) - count($displayLines);
    if ($remaining > 0) {
        echo "  " . CYAN . "... –∏ –µ—â–µ {$remaining} —Å—Ç—Ä–æ–∫(–∏)\n" . RESET;
    }
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
 */
function countFiles(string $dir): int
{
    $count = 0;
    
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS)
    );
    
    foreach ($iterator as $file) {
        if ($file->isFile()) {
            $count++;
        }
    }
    
    return $count;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
 */
function getDirSize(string $dir): int
{
    $size = 0;
    
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS)
    );
    
    foreach ($iterator as $file) {
        if ($file->isFile()) {
            $size += $file->getSize();
        }
    }
    
    return $size;
}
